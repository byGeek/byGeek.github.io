<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2020-new-year]]></title>
    <url>%2F2020%2F01%2F31%2F2020-new-year%2F</url>
    <content type="text"><![CDATA[2019已经过去，2020已经来临，照例写点东西记录下吧。 看到19年当初定的一些计划，我都有点不太好意思，当初立的一些flag好多都没有做到，以至于今天我都不好再定2020的计划了。那就索性改变一下以前的形式吧。 回望201919年买了房子，开启了“百万负翁”的生活。以前想的是如何去周游世界，怎样去随性所欲，现在想着从每个月的工资扣掉房贷之后，平平凡凡的生活。这个算是好消息吧。虽然有时累的时候觉得不值，但是晚上睡在自己家的床上的时候，那种温暖还是跟以前不一样的。 19年8月换了份工作，结束了以前养老的工作。感谢现在的公司，在我换行业的时候，愿意给我一个学习的机会。也感谢上一家公司，可以让我有很多可以自我学习提高的机会。说到换工作的事情，跟买房子也有联系，当每个月的工资抵不上每个月的房贷时，让我不得不跳出自己的舒适圈。至于新的公司，到现在为止，有满意也有不满意的地方。经过几个月的工作，遇到了很多能力很强的同事，意识到了很多自己工作上问题，能力上的不足。我想我会努力的。 19年打脸最严重的就是跑步了。19年跑量不到500公里。在佳明上定的半马计划也搁置了。自从8月准备换工作到新公司上班之后，锻炼的少了，有那段时间忙碌的托辞，但是更重要的是是自己懒了。 19年倒是玩了好多游戏。看了下2019年play station的游戏游玩时间统计，花了259个小时在游戏上。 总的来说，可能因为上一份工作比较养老，所以花在游戏上的时间也比较多。而且正如PS有支广告说的，游戏是一种比较好的，花钱又比较少的娱乐活动了，哈哈。 展望20202020，我希望自己更加自信。在工作上，不仅仅是自己努力，需要多向同事学习，工作方式，沟通，如何解决问题，定时复盘。 我希望能报名一场半程马拉松比赛，半马应该不是问题，但是我想去赛场感受一下，和众多跑者一起奔跑。 我希望自己多看书，把自己买的书慢慢消化。 最重要的，希望自己，家人都身体健康，希望2020越来越好！]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[My reviews about Red dead redemption 2]]></title>
    <url>%2F2020%2F01%2F30%2Fmy-review-on-rdr2%2F</url>
    <content type="text"><![CDATA[前几天把荒野大镖客2通关了，今天专门找了下游戏中的原声带听了一下，很有感触，正好闲在家中，看看记录点东西吧。 大表哥这个游戏盘买了很久了，记得当时刚发售的时候，看到一些预告和别人试玩的视频片段，心里痒痒。上次去香港的时候本来打算买块盘，看了看新战神还没开坑，就作罢。后来是看到越来越多的报道，说R星七年磨一剑，于是果断买盘（想着以后还可出二手回血）。 其实大表哥这种题材的游戏还是蛮合我的胃口的。我个人更倾向于写实的游戏。比如一战，二战题材，以前玩的英雄连，COD二战等。我对一些比较科幻，武器很fancy的不是特别感冒。就玩法来说，我比较喜欢一本道的游戏，比如战神系列，神海系列，对开放世界比较无感，但是塞尔达荒野之息例外。当我玩完大表哥第一章的时候，还是很震撼的。但是到了第二章的时候，发现游戏节奏有点慢，大部分时间都是在骑马跑路，热情大减，于是弃坑了。 时隔一年，快到春节假期，游戏荒了，趁着周末，拿出大表哥盘，花了两个小时将光盘载入到PS4中。发现战斗系统都生疏了。依旧是骑马跑路，但是随着主线任务的推进，慢慢沉浸到了亚瑟摩根的西部世界中。下面说说在游戏中我印象比较深刻的人。 亚瑟摩根亚瑟12岁被Dutch救了之后，跟随Dutch20多年，脏活苦活，出生入死。他对Dutch是很敬仰的，不管现在的情况多么穷困潦倒，坚定的相信Dutch可以work out a plan。中间被奥觉斯科帮派抓住，折磨，也丝毫没有透露出帮派的信息。每次Dutch计划失败，让大家深陷险境时，亚瑟都是去解决问题的那个人， 对Dutch无条件的信任。即使亚瑟最后发现Dutch是个不折不扣的利己主义者，对自己见死不救，还是希望Dutch可以回心转意。最终那一幕，亚瑟，麦卡，Dutch三人对质，此时的亚瑟已是濒死之人，”I did my best, I did”。不知道Dutch听到这些话是什么感受。 沙迪艾德勒沙迪是里面我最喜欢的一个女角色了。从被奥觉斯科帮派杀了丈夫，被Dutch就下，一直在皮尔逊的厨房打下手，但是她注定是个gunslinger！跟亚瑟出征，巾帼不让须眉。后期更是带领帮派藏身沼泽地，和亚瑟一起突破平克顿侦探的围剿。她应该是价值观最和亚瑟和的来的吧。有勇有谋，率性爽快。最后和马斯顿上雪山，杀迈卡，中枪之后，马斯顿说， “You are dying”, 沙迪果断说，“No, I ain’t! I ain’t‘”。最后反杀迈卡。沙迪是一个很要强的女性，最后成为一个赏金猎人我觉得是对她来说不失为一个很好的结局。]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>games</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次修改联通光猫为桥接模式的经历]]></title>
    <url>%2F2019%2F08%2F18%2FChange-Optical-modem-to-bridge-mode%2F</url>
    <content type="text"><![CDATA[自从搬家换了宽带移机之后，本来群晖的外网访问就失效了。因为前段时间一直都比较忙，一直没好好解决这个问题。今天终于得闲，把这个问题整好了。以下是我的折腾记录。 公网IP被取消？黑裙无法外网访问，首先想到的可能是联通这边不给公网IP了。打开ip138查看出口IP地址，是公网IP。当然这个并不能说明问题，因为这个检测到的只是出口IP，可能家里还是内网IP。 登录路由器管理界面，在远程管理看到路由器的IP地址为192.168的内网地址。内网IP无疑了。于是联系联通客服，质问为何移机之后的宽带取消了公网IP。一个工作日客服人员答复家里的宽带公网IP并未取消。 无法ping通其实确认有公网IP之后，路由器获取的又是内网地址，如果对网络拓扑和组网有简单的了解之后，已经可以确定可能是光猫的问题了，但是好久不搞这些东西，我已经把计算机网络的一些东西忘了差不多了。真是惭愧。 言归正传，当时我的想法是，既然我还是有公网IP，那么我试着ping下试试。使用我在腾讯云和GCP上的VPS对家里公网IP进行ping操作，无法ping通，100% package loss。有可能是封禁了ICMP response？ 我又想到可以使用端口扫描工具，对该IP进行端口扫描，看是不是端口被封禁的问题。 1nmap -Pn ip_addr 找不到open的端口。端口都被封了？ 在群晖设置router 端口转发找到问题走投无路的情况下，通过内网，我打开群晖的external access的问题。在重新配置router 端口转发的时候，群晖自检网络时抛出了一个warning：网络里存在多个路由，需要将接入设置为桥接模式。 感觉找到了一个突破口。我马上找到光猫，开启无线功能，然后连上光猫的无线网之后，登录到web界面。但是发现由于是user用户，找不到修改光猫工作为桥接模式的设置。于是，在google上搜索“光猫 桥接”，找到了简书上的一篇文章： 电信光猫桥接模式的设置。这篇文章也是碰到了外网访问的问题。修改光猫为桥接模式，必须要拿到管理员账户。那怎么搞到光猫的控制台密码呢？ 要到光猫管理员密码我直接在google上搜索的光猫的型号：吉比特TEWA 800G。找到一个知乎相关的问题：吉比特TEWA 800G的管理员登录地址是什么？。这个问题虽然没有人回答，但是在问题的描述中我知道了管理员登录的网址。这个光猫的登录界面还做的一个鸡贼的处理：当直接输入光猫的登录地址192.168.1.1时，只能看到普通用户登录的选项，没有管理员账户的登录选项。正好这个知乎问题上说明管理员的登录地址时: 192.168.1.1/cu.html。 接下来就差密码了，我倒是想搜索相关的“破解”方法，不过本着试一试的想法，我直接打电话给装宽带小哥，询问他光猫的管理员的密码之后，没想到宽带小哥直接告诉了我！ 使用管理员密码登录之后，我直接在光猫的快速设置向导中，将路由模式修改为桥接模式。然后在自己的路由器上使用PPPoE拨号。但是无法成功，提示没有连接到互联网。怎么回事呢？ 要到vlan id我重新看了简书上的这篇文章，里面说道改成桥接模式之后，需要修改VLAN ID，这个VLAN ID是原来路由模式的VLAN ID。再确认了一下我自家光猫的配合，没有问题，但是就是无法成功拨号。 无奈之下我再次拨打了宽带小哥的电话。小哥说让我加钱，他上门服务。我说别了吧，我自己弄就好了，不用上门，我请教你几个问题。没想到小哥也同意了。我加了小哥微信，把光猫的VLAN配置发他看了。他询问了我光猫上的一个参数之后，告诉我VLAN ID（这个VLAN ID并不是路由模式的VLAN ID），同时他说需要他在那边“操作一下”。 看来这个VLAN ID并不是像简书上的文章说的那样，而且需要宽带人员的操作（好像是要解绑什么东西？）。所以遇到问题需要按照实际情况进行分析。 我填入小哥说的VLAN ID之后，拨号成功！ 外网成功访问打开路由器的管理界面，在远程访问中可以看到路由器的IP不再是192.168了，而是公网IP。 然后在群晖上执行下DDNS脚本，终于搞定了外网访问的问题！ 桥接与VLAN其实这件事情很小，而且起初确认公网IP没有取消，路由器获取的是内网IP的时候，当时就应该可以判断是光猫的问题，但是由于还是一些组网知识都忘了，所以走了一些弯路。 下面在这里贴一下这期间碰到的知识点。 Q: [What’s the difference between a bridge and a switch?(https://serverfault.com/questions/78184/whats-the-difference-between-a-bridge-and-a-switch) An ethernet switch is a multiport ethernet bridge. A bridge is a device that splits collision domains but not broadcast domains. A switch is simply a bridge with lots of ports. Other examples of bridges are wireless access points and dual speed hubs. A virtual LAN (VLAN) is any broadcast domain that is partitioned and isolated in a computer network at the data link layer (OSI layer 2).[1][2] LAN is the abbreviation for local area network and in this context virtual refers to a physical object recreated and altered by additional logic. VLANs work by applying tags to network frames and handling these tags in networking systems – creating the appearance and functionality of network traffic that is physically on a single network but acts as if it is split between separate networks. In this way, VLANs can keep network applications separate despite being connected to the same physical network, and without requiring multiple sets of cabling and networking devices to be deployed.]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>geek</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ios 13 beta降级到ios 12.3]]></title>
    <url>%2F2019%2F07%2F13%2Fdowngrade-ios-13-to-ios-12-3%2F</url>
    <content type="text"><![CDATA[今天手贱把手机的IPhone 6s升级到ios public beta3。谁想到发热严重，app时不时闪退，必须重启才有效。不得已要要降级。本文就当自己今天的作死记录做个小记吧。 起因我一直时不想当苹果的小白鼠的。Beta在软件上的含义不言而喻。但是实在是不能忍受在IOS 12.3.1短信拦截失效bug又一次复现！国内的垃圾短信太猖獗，我一直是用的“短信拦截”这个APP来拦截垃圾短信，好像是花了6块钱买的吧。我在IOS上使用的收费软件不多。但是升级到IOS 12.3.1版本之后，短信拦截失效了。我还以为是APP出现了问题，后来下载了另一款“熊猫吃短信”发现也无法拦截垃圾短信。在该APP的描述中才知道是IOS系统的bug导致短信无法拦截。 这个问题以前也出现过，本来拦截正常使用的情况下，在升级某个小版本的正式包之后，出现问题。现在果真BUG OS也越来越坐实了。后来在V2EX论坛上了解到在IOS13以及修正了这个BUG。于是乎，我在使用Itunes备份了数据之后，开启了升级之路。 IOS 13 PB BETA 2升级IOS 13 公测版2之后，系统发热严重，我想这可能是刚升级完系统，可能是正常现象，可能多重启几次就能“放凉”。没想到一重启之后，打开应用全部闪退。不得不再次重启，才恢复正常。 简单体验了下IOS 13，特别是Apple提到的Dark mode，有点新鲜感。Photos界面也重新设计了。短信界面好像变的更拟物化设计了。短信拦截也恢复正常了。但是发热严重。随便打开哪个APP，一会时间，手机就变的好烫，掉电量惊人。上午9点出门，下午3点就没电了，而且中间还开启了省电模式。 掉电这个还能忍，就是异常发热和APP偶尔闪退忍不了。没办法，只好选择降级。但是，数据咋办？ 降级降级一般都是要刷机，而刷机一般都是要抹除数据。幸好在油管上找到降级无损数据的方法。谢天谢地，否则折腾到明天也折腾不完了。 油管视频：How to Downgrade iOS 13 to iOS 12! (Without Losing Data) 看视频应该很简单： 在ipsw.me上下载对应的固件，我是下载的IOS 12.3版本，因为12.3.1有短信无法拦截的版本，索性直接降级到12.3版本。幸好苹果还没有关闭12.3的激活通道。 使用Itunes备份数据。注意请先升级到itunes的最新版本再备份。 恢复数据。在恢复过程中出现一次白苹果。卡在苹果logo，无进度条显示。以为变砖了，在苹果官网找到进recovery方法，但是幸好在插上数据线之后，iTunes提示升级新版本即可。但是就是这个升级操作，导致后面“虚惊一场”！ 一开始itunes自动升级失败，所以我没在意，直接使用的老版本的itunes做backup，然后再restore的时候itunes提示要升级到最新版才可以restore到12.3。但是在我升级完itunes之后，发现新版的itunes无法找到我的backup记录了！当时感觉心都凉了，数据都没了。后来在查看info.plist文件，在文件结尾有itunes的版本号，怀疑是不是iTunes的版本差异，导致新版的iTunes无法识别使用旧版iTunes backup的文件。所以我在卸载新版itunes，并安装对应的旧版本的时候，终于恢复数据成功。 在卸载新版iTunes的时候，现在微软也慢慢使用Microsoft store作统一的软件分发平台了。新版的itunes就是在MS Store上下载。在卸载的时候没有在control panel中的卸载中找到itunes，后来是直接在windows上搜索iTunes，右键直接uninstall。 安装完旧版本的iTunes时，启动会发现提示一个文件由新版本的iTunes创建，导致无法启动成功。解决方法时直接将该文件删除即可。启动iTunes时，会自动创建该文件。安装成功之后，可以找到先前备份的数据。10G的恢复文件大概花了半个小时才恢复成功。 降级之后降级之后，别完了卸载旧的iTunes，重新安装新版iTunes。并且充分备份下数据。最后在iCloud中也备份一份数据。 最重要的是，千万不要再手贱升级啦！]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>apple</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我与游戏的故事(一)]]></title>
    <url>%2F2019%2F06%2F03%2Fmy-story-with-video-games%2F</url>
    <content type="text"><![CDATA[买了Play Station已经快两个月了。玩了几款PS4平台的第一方大作之后，是时候来写写自己的感受了。说起买PS4这个经历，其实有点阴差阳错。不过在这之前，我打算先说一下以前我跟游戏的前世今生。 令人怀念的“小霸王”作为一枚90后，我小时候接触到的其实是“小霸王”之类的“学习机”，以前并没有红白机之类的概念。可能是中国特殊的国情所致，特别是一些农村的父母，对游戏可是讳莫如深，想正大光明的买游戏机，那几乎是不可能的事。估计也是这个原因，国内的一些厂商将红白机包装为学习机，正好让我有了买“小霸王”的理由。那个时候基本都对父母说是买来“学电脑的”。也确实，当时随机器附带的卡带都是带五笔打字的，我估计应该有很多人对这个场景有印象：一艘艘小船上面是五笔的偏旁部首，只要敲如相应的键就可以将小船击沉。说实话，当时自己还是花了一些时间在“小霸王”上练习五笔打字的，还背诵了偏旁部首的记忆口诀。只可惜，这些打字诀窍最终只停留在了那个学习机上，等我真正接触到电脑，五笔打字早就忘了一干二净了。 那个时候还是比较痴迷在“小霸王”上的，而且自己还耗费了不少资金在上面。我记得当时一盘“四合一”的卡带要卖8块。那个时候应该大概是2000年左右。要是没记错的话，当时在小学的商店一支雪糕只要5分钱。前前后后应该买了不下20盘卡带。那个时候成绩好，每次基本都是以这个为后盾再加上撒娇，母亲也就顺了我的意。 想起那段时间，真实觉得很美好。小学放学之后，先把作业写完（那个时候作业应该简单吧，记得每次半个小时就写完了）。然后将“小霸王”接上家里的黑白电视机，拿着卡带在嘴边吹下卡带金手指（似乎这样能防止死机），小心翼翼的摁上去，开机！一个简单的游戏能不亦乐乎的玩上很久。当然了，最后肯定是在母亲一遍遍的催促下最后关了机。 除了一个人在家里开黑，最大的乐趣就是和村里的小伙伴一起玩了。当时隔壁院子里的一个小伙伴，暂且称之为玲，经常一起玩。印象最深游戏是“热血系列”中的“热血格斗”。这个游戏并不是类似拳皇之类的格斗游戏，而是每局4个人物，你，队友，还有两位对手。你和队友需要在规定时间内击败对手。每一局都是不同的场景，场景还有不同的辅助道具，例如电网，地雷，瀑布等。最后挑战最终的boss——两个带着虎头的对手。首先这个游戏带有一定的随机性（也可能是当时玩的日文版本，看不明白吧），因为每次无法直接选择游戏人物的“招数”，而是通过为人物选择名字，血型，然后系统会分配一个人物给你。可能人物可以有“连环拳”，或者“连环腿”，或者“地雷滚”。其次“热血格斗”场景比较多，每一局的场景设计都很有意思。比如电网那关，当时经常干的伎俩就是讲击倒后的NPC直接扔到电网里，给其造成二次伤害，而且由于击倒后到再起来，有一定的时间差，把握好这个时间差可以无限扔到电网里。还有地雷那关，故意引诱NPC去踩雷，但有的时候被NPC背摔自己去中雷了，哈哈。游戏里还可以跟队友“合体”放大招，变成旋风。由于看不懂日文，我和玲经常要去试看那个人物最厉害，后来还总结出一个“规律”：O型血比较“欧”。“殴”在我的家乡话里是有点类似撒泼比较厉害的意思。我们都觉得很形象。于是默默都给人物选择O型血。但也不总是能选择有“连环拳”或者“连环腿”的人物。 “热血格斗”卡带是玲的，我没有，于是我经常趁着玲妈不在跟玲一起玩。那个时候基本每个放学的下午，都能在玲的房间里昏天黑地的玩一两个小时。有的时候被玲妈发现我们在房间里背着她玩游戏，我只能尬笑着回家，偷偷约定这明天来我家玩。 学习机我一共买过两台，一台是在一个打着雷的雨天关机之后就无法再开机了。后来仗着自己成绩好，又让我妈给我买了一台新的。这台新的还带了一把“枪”。可以用来玩一个叫“打鸭子”的游戏。只要指着黑白电视机里的鸭子开枪，就可以将其击落。不过终归没有见到支持这种玩法的游戏了，渐渐的这把“枪”也吃灰了。 街机我记得这个“学习机”一直没坏，只是后来上中学之后，当时慢慢迷上了街机。虽然经常是一个币都不买，但是却可以站在旁边看别人玩一天。当时比较火的几款游戏是恐龙岛和三国战记。看着别人摇杆拍的左来右去，按键拍的啪啪响，感觉自己也浑身充满了”干劲“。没记错的话，一块钱4个币，对于一些老手来说，可以玩一天了。对于我来说，可能四个币也就撑过一两关吧。输了不续币是要重来的，但即使这样，也乐此不疲。因为街机始终玩的很少。一个是费钱，另外就是家人的反对了。可能是街机厅里环境不是很好，有人经常逃学去玩，而且街机厅在家长的眼里就是游戏厅，好歹小霸王还打个掩护叫学习机呢。我妈很反对我去街机厅。一开始是表哥带我去，有一次被我妈发现了，直接冲到街机厅，把我两拎回来了。”你去玩吧，我看你以后有什么出息。“然后也数落其表哥来，后来表哥再也没带我去了。 我觉得街机当时对我的吸引力主要有三点吧。第一，相比与再黑白电视机上接上小霸王玩，街机的大彩屏简直就是现在的iPhone对于比诺基亚的功能机带来的震撼一样多。第二，街机满足了一定的社交需求。在家还是一个人玩小霸王的时候居多，有的时候我宁愿再与伙伴再通几局魂斗罗或者沙罗曼蛇，也不愿去玩一些角色扮演的”大型游戏“。可能一些角色扮演的游戏剧情多，但是玩游戏嘛还是需要玩伴才玩的开心。街机就不一样的，为什么即使自己不玩也能再游戏厅里呆一天，就是因为有那个氛围在那。投了多少个币，重生多少次之后，终于干倒了别人没干倒的boss，在别人的围观下，next mission！第三点，街机操作的快感。街机加入的摇杆，带来了一种很爽快的体验。那个时候我经常看别人玩，摇杆拍来拍去，特别是玩拳皇这种特别讲究操作的游戏，结合大大的摇杆和大大的按键，更能体验到那种拳拳到肉的感觉，仿佛你按键用多大力气，就能直接传递到游戏人物的打击中一样。 上面我说的小霸王上的”大游戏“，不仅仅是价格比普通的4合1的游戏贵好几倍，而且卡带也要更大。我记得有两个游戏，一个是角色扮演游戏（当然当时我还不知道），游戏开始掉到山洞里，然后4个人物，到后期可以给每个人选择不同的职业，拥有不同的技能。遗憾的是后来在一个地方卡关了，一块巨石挡在了王宫，然后就过不去了。当时还能玲一起尝试，最后我们一致认为是游戏的bug，再后来就不了了之了。直到我买了PS4之后，才知道原来这个游戏叫最终幻想。 还有一个游戏是再我玩了塞尔达荒野之息后（这个游戏真是赞誉再多也不为过），再网上看一些游戏视频，发现了一个FC上的游戏，突然发现我玩过，最后也没通关，原因好像是迷宫太多。这个游戏叫塞尔达！ 未完待续！]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>games</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows 开发遇到的一些权限问题]]></title>
    <url>%2F2019%2F05%2F15%2Fit-is-all-about-security%2F</url>
    <content type="text"><![CDATA[最近碰到一个问题，折腾了很久。因为troubleshooting的过程中沟通不畅（种种原因暂且不表），导致像个无头苍蝇一样debug。最后发现是个windows权限的问题。好了，直接说问题。 问题问题简化为以下代码，是在windows下使用PIPE来进行进程间通信。首先看下server 端代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;Windows.h&gt;#include &lt;stdio.h&gt;typedef struct _message &#123; int id; char data[8];&#125; Message;int main() &#123; HANDLE h = INVALID_HANDLE_VALUE; const char* pipename = "\\\\.\\pipe\\mypipe"; const int BUFSIZE = 1024; const int DEFAULT_TIMEOUT = 100; char buf[1024]; h = CreateNamedPipe( pipename, PIPE_ACCESS_DUPLEX,/*| FILE_FLAG_OVERLAPPED*/ PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE, PIPE_UNLIMITED_INSTANCES, BUFSIZE, BUFSIZE, DEFAULT_TIMEOUT, NULL ); if (h == INVALID_HANDLE_VALUE) &#123; exit(0); &#125; if (ConnectNamedPipe(h, NULL)) &#123; DWORD read = 0; if (ReadFile(h, buf, sizeof(Message), &amp;read, NULL) &amp;&amp; read == sizeof(Message)) &#123; Message* msg = reinterpret_cast&lt;Message*&gt;(buf); printf("get message from client: id: %d, data: %s\n", msg-&gt;id, msg-&gt;data); printf("ready to echo back!\n"); DWORD written = 0; if (WriteFile(h, msg, sizeof(Message), &amp;written, NULL) &amp;&amp; written == sizeof(Message)) &#123; printf("echo back completed!\n"); &#125; else &#123; printf("WriteFile failed: %d\n", GetLastError()); exit(0); &#125; &#125; else &#123; printf("ReadFile failed: %d\n", GetLastError()); exit(0); &#125; &#125; else &#123; printf("ConnectNamedPipe failed: %d\n", GetLastError()); exit(0); &#125; CloseHandle(h); getchar(); exit(0);&#125; 代码很简单，使用WIN32 API CreateNamedPipe创建一个命名管道，然后等待pipe client来建立连接。收到client的message之后再echo回去。 再看下client端代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445HANDLE h = INVALID_HANDLE_VALUE; const char* pipename = "\\\\.\\pipe\\mypipe"; const int BUFSIZE = 1024; const int DEFAULT_TIMEOUT = 100; h = CreateFile(pipename, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL ); if (h == INVALID_HANDLE_VALUE) &#123; printf("open pipe failed: %d\n", GetLastError()); exit(0); &#125; Message m = &#123; 1, "hello" &#125;; DWORD written = 0; if (WriteFile(h, &amp;m, sizeof(Message), &amp;written, NULL) &amp;&amp; written == sizeof(Message)) &#123; printf("client write pipe finished\n"); char buf[1024]; DWORD read = 0; if (ReadFile(h, buf, sizeof(Message), &amp;read, NULL) &amp;&amp; read == sizeof(Message)) &#123; Message* msg = reinterpret_cast&lt;Message*&gt;(buf); printf("received message: id: %d, data: %s\n", msg-&gt;id, msg-&gt;data); &#125; else &#123; printf("read pipe failed: %d\n", GetLastError()); exit(0); &#125; &#125; else &#123; printf("Write Pipe failed: %d\n", GetLastError()); exit(0); &#125; CloseHandle(h); exit(0); client代码也很简单，发起pipe connect，之后发送一个简单的message，然后收到server回复后退出。 但是在实际的生产环境中，发现client端无法连接到server端。根据GetLastError返回值是5，对应的error message是“Access Deny”。那肯定是权限问题嘛。果然，server端是使用Administrator运行的，而client端只有standard user的权限，因为Windows vista中加入的Mandatory Integrity Control(强制性完整性控制)，导致low integrity level的对象无法modify或者delete high integrity level的对象。 什么是Integrity LevelMSDN&gt;)上如是说： The integrity level is a representation of the trustworthiness of running application processes and objects, such as files created by the application. The integrity mechanism provides the ability for resource managers, such as the file system, to use pre-defined policies that block processes of lower integrity, or lower trustworthiness, from reading or modifying objects of higher integrity. The integrity mechanism allows the Windows security model to enforce new access control restrictions that cannot be defined by granting user or group permissions in access control lists (ACLs). 抛开定义，首先先visualize一下Integrity level。我们使用process explorer工具来查看，如果没有这一栏，可以在View-&gt;Select Columns-&gt;Process Image tab中勾选Integrity level。 我们可以看到Integrity level(以下简写为IL)分为几个等级：low, medium, high, system。根据MSDN: Windows defines four integrity levels: low, medium, high, and system. Standard users receive medium, elevated users receive high. Processes you start and objects you create receive your integrity level (medium or high) or low if the executable file’s level is low; system services receive system integrity. Objects that lack an integrity label are treated as medium by the operating system; this prevents low-integrity code from modifying unlabeled objects. Additionally, Windows ensures that processes running with a low integrity level cannot obtain access a process which is associated with an app container. 标准用户得到meduim IL，这意味着标准用户启动的程序或创建的内核对象都拥有medium IL，除非在程序或对象中指定其为low IL。特权用户得到high IL。系统服务得到system IL。任何其他没有声明IL 标签的，系统默认其为medium IL。windows系统会保证低IL的对象无法读写/访问高IL的对象。 摘录一张《windows via c++》第四章最后一节的图： When a piece of code tries to access a kernel object, the system compares the integrity level of thecalling process with the integrity level associated to the kernel object. If the latter is higher than theformer, modify and delete actions are denied. Notice that this comparison is done before checkingACLs. So, even though the process would have the right privileges to access the resource, the factthat it runs with an integrity level lower than the one required by the resource denies the requestedaccess to the object. 简单来说，就是当访问一个内核对象的时候，系统会比较调用进程的IL和与内核对象关联的IL，如果内核对象关联的IL更高，则无法对其进行修改或者删除操作。一般可以进行读操作。 所以在上面的demo中，由于pipe server使用的是管理员用户运行的，则其创建的PIPE 内核对象拥有high 级别的IL。pipe client 使用标准用户运行，去访问pipe 内核对象时，由于只有medium 级别的IL，所以发生access deny的错误。 除了在进程间访问内核对象提供保护之外，IL还用在windows 的用户界面中，用于防止low IL的进程去修改high IL的界面。我们知道，windows提供了SendMessage和PostMessage来在窗口之间发送消息。窗体可以根据收到的消息来更新UI等。当一个low IL的进程通过SendMessage、PostMessage、SendInput发送消息给high IL的窗体时，系统会屏幕掉这类消息， 这个时候SendInput会返回0，并且GetLastError也不会显示出异常。这种机制称为User Interface Privilege Isolation（UIPI）。 这里再多说一句，一些杀毒软件，如360安全卫士会主动拦截SendMessage发出的消息。曾经就遇到过bug排查一天，最后发现是这个问题。 关于详细内容，可以参考《windows via c++》中第四章的内容，中文书名为《windows 核心编程》。 什么是UAC什么事ACL参考文档 What’s New in User Account Control)) Windows Security Survival Guide Exploring the Windows Security Survival Guide – Integrity What is the Windows Integrity Mechanism?&gt;)]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用DebugView来debug]]></title>
    <url>%2F2019%2F05%2F10%2Fuse-dbgviewer-to-debug-your-code%2F</url>
    <content type="text"><![CDATA[在windows开发的过程中，经常会碰到这样的问题：我们需要记录一些程序的运行期间的信息（log），但是又不想直接记录成log文件保存在用户磁盘上。一般在develop的过程中，我们会将 一些信息直接输入到console或者visual studio中的Output窗口中，但是一旦release给用户之后，我们无法获取这些信息。 That’s where DebugView COMES IN! 介绍DebugView原来是sysinternals开发的一系列工具包中的一个，现在早已被MS收购。简单来说，这个工具可以用来显示打印到Debug output windows中的信息。比如使用WIN32 OutputDebugString中的消息在visual studio中可以在output windows中查看的信息。但是在release build版本中，可以通过DebugView工具查看。 DebugView is an application that lets you monitor debug output on your local system, or any computer on the network that you can reach via TCP/IP. It is capable of displaying both kernel-mode and Win32 debug output, so you don’t need a debugger to catch the debug output your applications or device drivers generate, nor do you need to modify your applications or drivers to use non-standard debug output APIs. DebugView能做的 Under Windows 2000, XP, Server 2003 and Vista DebugView will capture: Win32 OutputDebugString Kernel-mode DbgPrint All kernel-mode variants of DbgPrint implemented in Windows XP and Server 2003 DebugView also extracts kernel-mode debug output generated before a crash from Window’s 2000/XP crash dump files if DebugView was capturing at the time of the crash. 就是说DebugView可以抓取到程序中的OutputDebugString, DbgPrint等函数调用。在.net中，同样抓取System.Diagnostic.Debug.WriteLine输出的信息。 基本功能使用DebugView很简单，只需要设置下需要capture的类型，如下图只capture win32 调用OutputDebugString的输出，capture events指的是开始/暂停 捕捉。 使用highlight高亮功能log一多久容易迷失方向，使用highlight功能，方便查找含有特定字符串的信息。注意是在include中输入通配符，然后在highlight下输入要包含的关键字，如下图。注意，在include中一般直接输入通配符*，如果想只显示包含特定字符的信息，可以输入关键字，多个关键词已；隔开。 设置最多显示多少条记录如下图，这样在GUI中只会显示最新的500条记录。 显示PID在option中可以设置是否显示进程的PID，如果勾选，则在每一行中都会显示进程的PID。这个功能可以配合highlight高亮功能，用来关注特定进程的log信息。 查看帮助文档以上只是debugview的简单功能的介绍，详细功能使用可以参考下载包里的帮助文件：dbgview.chm。]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019-new-year]]></title>
    <url>%2F2019%2F02%2F11%2F2019-new-year%2F</url>
    <content type="text"><![CDATA[今天初七，2019年上班第一天。 今年的计划如下： 减脂体重控制在69kg，全年跑量1000km。我知道这个目标其实很弱鸡，如果不出问题，应该可以很轻松的达成。但贵在坚持。坚持跑步，要对得起18年自己买的跑鞋。注意更加科学的跑步，加强自己的核心力量。 书单专业书： Windows via C++ APUE Inside the C++ Object Model Effective STL COM技术内幕-微软组件模型 非专业书 二战全史 尤瓦尔·赫拉利 三部曲：人类简史（看过了觉得还要重新看一遍），未来简史，今日简史 Kindle上ISIS的崛起 中央帝国的财政密码（去年未看完） 人生大事打算今年多关注一些房子的信息，多收集收集资料。 旅游暂定东南亚吧，泰国？或者重庆成都也可以，待西乡计划。 工作希望可以通过慢慢参与到开源社区，贡献自己的力量。 博客关于自己博客的内容，不一定是专业相关的文章，也可以是自己的见闻游记，思考等。 其他想到在补充吧。 2019/02/11 于南京]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>plan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于神秘海域系列的玩后感]]></title>
    <url>%2F2019%2F01%2F31%2Fthoughts-on-Sony-s-Uncharted-series%2F</url>
    <content type="text"><![CDATA[拖延症害死人啊，这篇文章写于一个月之前吧。如今已通关神海3和资料片失落遗产。 —分割线— 上次打折（2018年圣诞促销）买了神海合集和神海4。 目前通了神海4，1和2。说下感受吧。 我先玩的4，画面真的很赞，第一次玩类似的游戏，电影大片即视感，既有点fps还有点揭秘冒险。而且个人觉得枪战，冒险和解谜都恰到好处。诶琳娜真的好美，哈哈。 后来开始玩合集，神海1感觉一直是突突突，枪战，从神海4画面过来看1的画面还是下降挺多，当然了，神海1是十几年前的老游戏，画面在现在看来也是可以理解。就是打到最后变电室出来怪物有点瘆人，有点像指环王的那个咕噜，死了好多次，把难度调到简单通关。 之前在论坛看到说神海2不错。果真，从1开始玩2的时候，电影大片即视感，而且射击可以看到子弹轨迹了，手柄反馈比1要好很多。而且剧情好太多，场面也很足，追火车，打飞机，打坦克。不过个人感觉有点不足的是，为啥非要跟1一样最后整出个怪物来？这点我还是比较喜欢4中，更现实一点。 接下来准备玩3，然后4的dlc。未完待续。]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年回顾]]></title>
    <url>%2F2019%2F01%2F07%2F2018-review%2F</url>
    <content type="text"><![CDATA[2019年的元旦都过完好几天了，新年计划还一直没出来。迫于“新年新FLAG”，下面即是新年计划以及对过去一年的回顾。 一一对照下去年的计划吧。 跑步减肥，目标是73KG 今天早上上秤称了一下，正好达到目标。好悬！从8月底办了健身卡督促自己，一直到12月中旬，大概4个月，基本月跑量在130KM左右。自己的体重确实有下降。我也慢慢重新爱上了跑步，隔两天不跑感觉不舒服。单次距离从3K到5K到10K再到21K。10KM配速从6分半提高到5分，同时尝试了两次半马，一次2小时10分，一次1小时55分。总体来说对自己的成绩还是比较满意。但是后来右膝关节有点不舒服，跑步间隔也从一周4跑改成了一周2跑或3跑。 总的来说，下半年减重还是有效果的，也基本达到了预期，但是后面有所懈怠，当然有部分是膝关节的原因，但是个人主观上也有部分原因。 把博客运行起来。 当初的计划是一周两篇博客，将自己积累的一些东西，或者遇到的一些问题，想法，记录下来，主要目的是方便自己以后查阅。开始的一两个月，确实保持这个频率更新，后来发现整理笔记成博客挺耗时间的，一般自己整理在onenote上的笔记，都是专业技术文章的剪贴，格式凌乱，自己看懂就行。一些文章要理出成自己的文字还是需要一定的时间。二来慢慢的以前的积累也慢慢消耗了。所以后来博文基本都已最近遇到问题或者看到的资料为基础。 本来博客是托管在Github上，后来趁着腾讯云搞活动，买了3年的云主机，就迁移到了腾讯云上。期间购买了域名并进行了网站备案。总的来说，这个Flag实现的还算合格吧。 看书，专业书和自己买的两本社科书。 这里先列下去年计划书单。 书名 完成情况 备注 操作系统：精髓与设计原理 GOOD 深入理解操作系统（CSAPP） NG 读完上一本书，发现CSAPP这本书受到推崇更多，于是又买了这本，但是没看了，估计以后这本书作为工具书查阅吧 程序员的自我修养–链接，装载与库 GOOD C++ Primer GOOD Effective C++ GOOD 看的电子版，但是值得经常查阅，反复看 Effective Modern C++ ALMOST GOOD 看了大半部分，还未看完 COM技术内幕–微软组件对象模型 NG 未看完，看了开头 Inside the C++ Object Model ALMOST GOOD Lippman出的一本小册子，英文版，共180多页6个chapter，看了4个，算看完了大部分吧 深入理解Nginx NG 看了部分，这本书当时还是跟前端的书一起买的，一直没看，后来为了折腾VPS的时候，以及阅读Nginx源码看了部分。 Docker入门实战 NG 看了部分 GEB NG 当初在StackOverflow看到很多人推荐这本书，就买了，看了一章就没咋看了 货币金融学 NG 看了部分，金融学确实比较难啊 去年大概是下半年才开始看专业书的。因为项目的原因，阅读了几本C++方面以及操作系统相关的书籍。好多书都是看了部分，然后因为各种各样的原因没有完整阅读完毕。 开发一个能上线的小程序/app，或者有自己的一个开源项目。 这个算是做的比较失败了。小程序和APP没影，就是Github上有自己的几个Toy Project，都是简单的自己学习C++写的代码。发现这个还是比较难坚持下去，动力有点不足。 去一趟香港 在12月份的时候去了一趟。这个也是准备了好久的事，期间从办居住证，护照，通行证，拖了很长时间。整体去香港的感受一般，住宿，交通，吃饭都挺贵的。有时间写篇博文记录下吧。]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>plan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于正则表达式的简单总结]]></title>
    <url>%2F2018%2F12%2F18%2Fpersonal-summary-on-regular-expression%2F</url>
    <content type="text"><![CDATA[本文记录一下正则表达式的一些语法和常见用法。以备后查。 在线regex测试网站推荐regex101。 有关regex的资料推荐: regular-expressions.info runoob.com 基础概念语法Text patterns and Matchespattern表示一个规则。在本文中将正则表达式的Text pattern使用/包裹起来。如/cat/ Literal Characters字面量字符，最普通的一种情况。比如/cat/, 输入字符串he catch a catfish for his cat. 在字符串的第4个位置找到匹配。 如果想继续匹配。则需要设置为全局模式。/cat/g，则会对输入字符串进行全局搜索。 在正则表达式中有12个字符有着特殊的含义，分别是： the backslash \, the caret ^, the dollar sign $, the period or dot ., the vertical bar or pipe symbol |, the question mark ?, the asterisk or star *, the plus sign +, the opening parenthesis (, the closing parenthesis ), the opening square bracket [, and the opening curly brace { 它们也叫做metacharacters。这些字符如果想被当成普通字符使用，需要使用\进行转译。如如果你想匹配1+1=2，你需要的Text pattern是/1\+1=2/ Character Classes or Character SetsCharacter Class 只能在几个字符中匹配到其中一个。比如/gr[ae]y/可以匹配gray, grey, 但不能匹配graey。可以使用hyphen（连字符-）来表示一个候选范围，如/[0-9]/可匹配一个数字。/[a-zA-Z]/可用来匹配bH, cD等。也可以单字符和连字符一起使用，如/[x0-9]/用来匹配字符x或0-9的数字。 在方括号里使用^用来表示取否。如/[^abc]/可匹配非a非b非c的字符，/[^ ]/可匹配非空格（blank space）的字符。 Shorthand Character Classes正则表达式提供了一些更简便的方式（Shorthand）来匹配一些常用的字符串。注意，这些shorthand具体包含的字符跟不同的regex flavour有关。不同的flavour可能还有其他的一些shorthand。这里讲一些通用的shorhand放在下表中。 Shorthand Equals Match \d [0-9] digit: 0-9的数字 \w [a-zA-Z0-9_] Word character: 用于组成单词的字符，下划线和数字 \s [ \t\r\n\f] Whitespace ：空格，tab，换行符, form feed Shorthand也可以有shorthand。一般用大写字母来表示取否。 Negated Shorthand Equals \D [^\d] \W [^\w] \S [^\s] 在中括号中使用Negated Shorthand需要注意。如[\D\S]与[^\d\s]表达的含义不一样。[^\d\s]用来匹配即不是White space又不是数字的字符，而[\D\S]两个条件（\D或\S）满足一个即可匹配，换句话说，[\D\S]可以匹配数字，whitespace或者其他字符。这里面涉及的是逻辑上与或非关系。 可以在regex101上进行在线测试每个shorthand代表的简写。 Non-Printable Characters在正则表达式中可以使用特殊字符来匹配不可打印字符。 pattern match pattern match \t tab字符（ASCII 0x09） \r carriage return(0x0D) \n line feed(0x0A) \f form feed(0x0C) 需要注意的是，在windows上使用\r\n来用作line break, 而unix上是\n. The Dot matches (Almost) any character.可以匹配除了line break之外的所有字符。如/gr.y/可以匹配gray, grey, /gr%y. 谨慎的使用dot 字符。因为使用Character class匹配的速度回更快也更精确. Anchors Anchors do not match any characters. They match a position. Anchors（锚）用来匹配一个位置。^用于匹配输入字符串的开始位置，$用于匹配输入字符串的结束位置。在multi-line模式下，^用来匹配每一行的开始位置，$用来匹配每一行的结束位置。如/^a/可以匹配abc中的a，但是再bca中找不到匹配。 \b用来匹配word boundary。 A word boundary is a position between a character that can be matched by \w and a character that cannot be matched by \w \B正好相反，用来匹配\b无法匹配的地方。 更多的内容相关请参考: Learn more about anchors. AlternationAlternation相当于正则表达式中的”或”。如/cat|dog/匹配cat and dogs中的cat,如果再次匹配（如使用global模式），才会再次匹配到dog. Alternation在正则表达式中的操作符中优先级最低。如cat|dog food可以用来匹配cat或者dog food。如果想要匹配cat food或者dog food，需要使用捕获组(cat|dog)food. Repetition quantifier ?用来使得前面的token最多可以出现一次（0次或一次）。如colou?r匹配colour或color . quantifier *用来使得前面的token出现0次，一次，或多次。 quentifier +用来使得前面的token至少出现一次（一次或多次）。 使用大括号{}用来表示前面的token出现特定次数。如/\b[1-9][0-9]{3}\b/匹配1000-9999的数字. /\b[1-9][0-9]{2,4}\b/匹配100-9999. Greedy and Lazy RepetitionRepetition的匹配符都是“贪婪”的，他们会尽可能多的匹配，返回尽可能长的匹配字符串。如/&lt;.+&gt;/在输入字符串为This is a &lt;EM&gt;first&lt;/EM&gt; test中返回的匹配字符串为&lt;EM&gt;first&lt;/EM&gt;。 在+之后使用?使得匹配变为lazy. 使用/&lt;.+?&gt;/来匹配上面的字符串，则返回的是&lt;EM&gt;. 更好的方式是使用dot 运算符。 Use &lt;[^&lt;&gt;]+&gt; to quickly match an HTML tag without regard to attributes. The negated character class is more specific than the dot, which helps the regex engine find matches quickly. Grouping and Capturing使用()来对多个字符进行分组，可以使用repetition运算符来修饰分组。如/set(value)?/ 可以匹配set或setvalue`. 使用小括号分组即创建了一个捕获组。上面的例子有一个分组，如果匹配set，则group1什么都没有，如果匹配setvalue，则group1是value。group0总是整个匹配的字符串。至于如何访问group，这个跟你使用的编程语言有关。 创建捕获组之后，可以使用backreference来引用捕获组。backreference即使用backslash和group number来表示捕获组的内容。 如/([abc])=\1/可以匹配a=a,或b=b，或c=c 如果你只想分组不想创建捕获组可以使用(？:)?。如上面的例子，set(?:value)?, 这样只会创建分组，但不会创建捕获组。这样做的目的可以使得正则表达式匹配更快，性能更高。]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在VS C++工程中使用Auto versionning]]></title>
    <url>%2F2018%2F12%2F17%2Fauto-versioning-in-cpp-project%2F</url>
    <content type="text"><![CDATA[前面我已经总结了在csharp中如何auto versionning来管理Assembly的版本号。本文总结一下在C++下如何方便的管理DLL的版本号。 遇到的问题首先明确一下本文要解决的问题： 在一个C++ solution中实现DLL或者EXE共享同一个版本号。 既然要共享同一个版本号，那么最简单的类似csharp中的共享同一个AssemblyInfo文件了。csharp工程可以通过Add as Link方式将一个文件共享给其他project。在C++ project中自然也可以通过Add Existing File来实现这个目的。不过在VS2015之后Visual Studio支持了Shared Project Template。那么可以将version的信息放在Shared Project中，这样修改起来也方便。 解决办法在C++ project中version信息是放在Resource.rc中的。 假设现在我们的代码结构是这样的： solution +– project1 +– project2 +– sharedproject 首先我们给project1和project2工程建立Resource文件。 Project-&gt; Add-&gt;Resource-&gt;Version-&gt;New 右击生成的Resource.rc文件, 选择View Code，滑动到Version部分。可以看到Version信息。 接下来在sharedproject中建立一个头文件verson.h 1234567891011121314151617181920212223242526272829303132#define STRINGIZE2(s) #s //stringizing operator#define STRINGIZE(s) STRINGIZE2(s)#define VERSION_MAJOR 1#define VERSION_MINOR 0#define VERSION_REVISION 0#define VERSION_BUILD 0//#define VER_FILE_DESCRIPTION_STR "Description" //decription和productionname各自独立，需要单独定义#define VER_FILE_VERSION VERSION_MAJOR, VERSION_MINOR, VERSION_REVISION, VERSION_BUILD#define VER_FILE_VERSION_STR STRINGIZE(VERSION_MAJOR) \ "." STRINGIZE(VERSION_MINOR) \ "." STRINGIZE(VERSION_REVISION) \ "." STRINGIZE(VERSION_BUILD) \//#define VER_PRODUCTNAME_STR "c_version_binary"#define VER_PRODUCT_VERSION VER_FILE_VERSION#define VER_PRODUCT_VERSION_STR VER_FILE_VERSION_STR#define VER_ORIGINAL_FILENAME_STR VER_PRODUCTNAME_STR ".exe"#define VER_INTERNAL_NAME_STR VER_ORIGINAL_FILENAME_STR#define VER_COPYRIGHT_STR "Copyright (C) 2011"#ifdef _DEBUG #define VER_VER_DEBUG VS_FF_DEBUG#else #define VER_VER_DEBUG 0#endif#define VER_FILEOS VOS_NT_WINDOWS32#define VER_FILEFLAGS VER_VER_DEBUG#define VER_FILETYPE VFT_APP//注意，这里需要有一个空行，否则在resource中include这个头文件会报"unexpected end of file"错误 然后分别在project1和project2的Resource 属性中将Additional Include Directory将version.h的路径加进去。 Project Property -&gt;Resource -&gt; General -&gt; Additional Include Directories 注意是Resource选项卡，不是C++选项卡中的设置。 然后分别对project1和project2的Resource文件做如下操作： include version.h，定义description和product name 12345678// Microsoft Visual C++ generated resource script.//#include "resource.h"#define VER_PRODUCTNAME_STR "product_name_here"#define VER_FILE_DESCRIPTION_STR "description_here"#include "version.h" 替换version section 12345678910111213141516171819202122232425262728293031///////////////////////////////////////////////////////////////////////////////// Version//VS_VERSION_INFO VERSIONINFO FILEVERSION VER_FILE_VERSION PRODUCTVERSION VER_PRODUCT_VERSION FILEFLAGSMASK 0x3fL FILEFLAGS VER_FILEFLAGS FILEOS VER_FILEOS FILETYPE VER_FILETYPE FILESUBTYPE 0x0LBEGIN BLOCK "StringFileInfo" BEGIN BLOCK "040904b0" BEGIN VALUE "FileDescription", VER_FILE_DESCRIPTION_STR "\0" VALUE "FileVersion", VER_FILE_VERSION_STR "\0" VALUE "InternalName", VER_INTERNAL_NAME_STR "\0" VALUE "LegalCopyright", VER_COPYRIGHT_STR "\0" VALUE "OriginalFilename", VER_ORIGINAL_FILENAME_STR "\0" VALUE "ProductName", VER_PRODUCTNAME_STR VALUE "ProductVersion", VER_PRODUCT_VERSION_STR "\0" END END BLOCK "VarFileInfo" BEGIN VALUE "Translation", 0x409, 1200 ENDEND Build一下工程，并修改version.h头文件，看project1和project2的版本号是否是version里设置的版本号。 下次如果要修改版本号，就不用一个个去改每个工程的resource.rc文件了，直接修改version.h即可。 进阶上面的方法需要每次都手动修改version信息，可以利用visual studio中的Build Event自动将version.h信息更新。Share Project Template不支持VS project Build Event，可以将其换正常的Project类型。 具体请参考Code Project的一篇文章：Automatic Build Versioning in Visual Studio. 参考链接 Versioning a Native C/C++ Binary with Visual Studio unexpected end of file found]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ 中的智能指针]]></title>
    <url>%2F2018%2F12%2F04%2Fsmart-pointer-in-c-plus-plus%2F</url>
    <content type="text"><![CDATA[C++ 11中共有四种智能指针(Smart Pointers)：std::auto_ptr,std::unique_ptr,std::shared_ptr,std::weak_ptr。其中std::auto_ptr是在C++98中就引入的智能指针，在C++11中已经被std::unique_ptr所取代。所以本文主要讨论讨论剩下的三种智能指针。 为什么要使用智能指针？不像C#/Java等语言拥有垃圾回收机制，C++必须靠程序员自己申请和释放内存。这样就给内存泄漏带来了机会。智能指针就是为了解决可能的内存泄漏的风险而设计的。在C++中局部变量在离开作用域之后，编译器会自动调用变量的析构函数对其进行析构，即使在发生异常的情况下也可以保证对象被析构。 智能指针其实就是贯彻了RAII(Resource acquisition is initialization)的思想。将Raw Pointer作为资源托管起来，在离开作用域之后，自动调用Raw pointer的deletor。智能指针就是对象。 查看智能指针的头文件: memory，这里摘录下MSVC的实现： 12345678910111213 // DECLARATIONStemplate&lt;class _Ty&gt; struct default_delete;template&lt;class _Ty, class _Dx = default_delete&lt;_Ty&gt;&gt; class unique_ptr;template&lt;class _Ty&gt; class shared_ptr;template&lt;class _Ty&gt; class weak_ptr; 可以看到三种智能指针被声明为带有模板参数的类，其中unique_ptr带有两个模板参数，shared_ptr和weak_ptr都只有一个模板参数。 下面我们来分别详细来分析下三种智能指针的使用场景和一些注意事项。 std::unique_ptr当需要使用智能指针时，std::unique_ptr应该作为首选，用来表达对资源的专属所有权。 当使用默认deletor时，std::unique_ptr跟裸指针尺寸相同，这意味着不会带来memory overhead。一个非空的std::unique_ptr总是指向涉及的资源。移动一个std::unique_ptr会将所有权将源指针移至目标指针(源指针被置空)。std::unique_ptr不支持复制操作。 创建std::unique_ptr的方法我们可以用以下方式来创建std::unique_ptr。 通过C++14 引入的标准make函数std::make_unique 直接接管newly allocated object 创建自己的make函数 举例如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;memory&gt;#define MY_PRINT std::cout&lt;&lt; __FUNCTION__ &lt;&lt; std::endl;class Investment &#123;public: Investment(const char* name) : m_name(new char[128])&#123; strcpy_s(m_name, 128, name); MY_PRINT; &#125; virtual ~Investment() &#123; delete m_name; MY_PRINT; &#125;protected: char* m_name;&#125;;class Stock : public Investment &#123;public: Stock(const char* name) : Investment(name)&#123; MY_PRINT; &#125; ~Stock() &#123; MY_PRINT; &#125;&#125;;std::unique_ptr&lt;Investment&gt; makeInvestment() &#123; //in c++ 11 //std::unique_ptr&lt;Stock&gt; stock(new Stock("hello")); //return stock; return std::unique_ptr&lt;Stock&gt;(new Stock("hello")); //newly allocated object是一个右值&#125;std::unique_ptr&lt;Investment&gt; makeInvestment2() &#123; //in c++ 14 return std::make_unique&lt;Stock&gt;("hello");&#125; 在C++11中，由于没有引入unique_ptr的make函数，我们应该直接从new object接管pointer的控制权。如果使用以下方式来创建unique_ptr，会增加内存泄漏的风险。 12auto ptr = new Stock("hello");std::unique_ptr&lt;Investment&gt; pInvest(ptr); 通过左值来初始化一个unique_ptr不是一个好的选择，因为ptr这个裸指针有可能会被delete掉，而pInvest在析构的时候会再次delete 裸指针，这时会造成未定义行为。 Best practice是通过make函数来创建智能指针。如果使用的是C++11，还有一种方式是创建自定义的make函数。如下是一个简单的版本。当然了，也可以直接去标准库中copy make_unique函数的实现代码。 1234template&lt;typename T, typename ... Args&gt;std::unique_ptr&lt;T&gt; make_unique(Args&amp;&amp;... params) &#123; return std::unique_ptr&lt;T&gt;(new T(std::forward&lt;Args&gt;(params)...));&#125; 自定义deletor我们也可以为unique_ptr自定义deletor。有以下两种方式： 函数对象，如lambda表达式 函数指针 举例如下： 1234567891011121314151617//use lambda expression auto delInvest = [](Investment* pInvestment) &#123; //do something delete pInvestment; &#125;; std::unique_ptr&lt;Investment, decltype(delInvest)&gt; ptr(new Stock("hello"), delInvest);//use function pointer void delInv(Investment* pInvestment) &#123; delete pInvestment; &#125; std::unique_ptr&lt;Investment, void(*)(Investment* pInvestment)&gt; ptr2(new Stock("hello"), delInv); //或者使用decltype std::unique_ptr&lt;Investment, decltype(&amp;delInv)&gt; ptr2(new Stock("hello"), delInv); 一般来说对于std::unique_ptr，在默认deletor的情况下，unique_ptr和裸指针的大小一样，但是使用自定义的deletor之后，情况变得有所不同。如果自定义的deletor是函数指针，则unique_ptr的大小会至少增加一个函数指针的大小。如果是函数对象，则带来的尺寸变化取决于函数对象中存储了多少状态。无状态的函数对象，如无捕获的lambda表达式不会浪费任何尺寸。 这意味着一个自定义deletor可以用函数指针也可以使用无捕获的lambda表达式时，lambda表达式是更好的选择。 注意，自定义deletor必须是一个directly-callable object，如果想让一个member function作为deletor的话，可以使用std::mem_fn将其转化为函数对象。 12345678#include &lt;functional&gt; //for std::mem_fn#include &lt;memory&gt;void Investment::release()&#123; //release is a member function //do something&#125;std::unique_ptr&lt;Investment, decltype(std::mem_fn(&amp;Investment::release))&gt; pInvest(new Stock("hello"), std::mem_fn(&amp;Investment::release)); 转化为shared_ptrstd::unique_ptr可以很方便的转换为std::shared_ptr，所以适合作为工厂函数的返回型别。具体可以参考《Modern Effective C++》 item18。 12345std::unique_ptr&lt;std::string&gt; unique = std::make_unique&lt;std::string&gt;("test");std::shared_ptr&lt;std::string&gt; shared = std::move(unique);//orstd::shared_ptr&lt;std::string&gt; shared = std::make_unique&lt;std::string&gt;("test"); auto_ptr vs unique_ptr在C98标准的时候，由于没有移动语义（move sematic），引入了auto_ptr来表示对资源的所有权。在表示所有权转移的时候，auto_ptr实际是通过拷贝操作来实现的。 1234std::auto_ptr&lt;Stock&gt; ap(new Stock("hello"));std::auto_ptr&lt;Stock&gt; ap2 = ap; //compile success, while unique_ptr don'tap-&gt;foo(); //crash because ap is set to NULL 通过auto_ptr的拷贝赋值运算符之后，ap已经置为了NULL，无法再使用ap2。 在使用unique_ptr时，由于unique_ptr将copy ctor和copy assign operator声明为delete function，所以编译无法通过。如果想转移资源的所有权，必须使用std::move（位于utility头文件）。 1234std::unique_ptr&lt;Stock&gt; up(new Stock("hello"));std::unique_ptr&lt;Stock&gt; up1 = std::move(up); //use std::move to explicitly transfer ownership, and up is empty, can not use it againup.foo(); //crash, can not use up again because ownership has transferred to up1 unique_ptr 源码剖析从上面unique_ptr的声明可以看到unique_ptr的类型中第二个模板参数默认时一个default_delete。查看其源码发现default_delete就是一个定义了函数调用运算符的函数对象: 12345678910111213template&lt;class _Ty&gt; struct default_delete &#123; // default deleter for unique_ptr constexpr default_delete() noexcept = default; //...省略部分 void operator()(_Ty * _Ptr) const noexcept &#123; // delete a pointer static_assert(0 &lt; sizeof (_Ty), "can't delete an incomplete type"); delete _Ptr; //调用delete &#125; &#125;; 在函数调用中直接调用delete，delete操作会调用_Ty类型的析构函数。这就是unique_ptr的默认析构所做的事。再看下unique_ptr的具体定义： 12345678template&lt;class _Ty, class _Dx&gt; // = default_delete&lt;_Ty&gt; class unique_ptr : public _Unique_ptr_base&lt;_Ty, _Dx&gt; &#123; // non-copyable pointer to an objectpublic://...省略&#125; unique_ptr继承自_Unique_ptr_base&lt;_Ty, _Dx&gt;，继续看_Unique_ptr_base&lt;_Ty, _Dx&gt;的代码，其中包含一个成员变量： 1_Compressed_pair&lt;_Dx, pointer&gt; _Mypair; 这里的pointer就是unique_ptr实际的对象的指针。接着在头文件xutility中可以看到_Compressed_pair的两个定义： 123456789101112131415161718192021222324//定义1template&lt;class _Ty1, class _Ty2, bool = is_empty_v&lt;_Ty1&gt; &amp;&amp; !is_final_v&lt;_Ty1&gt;&gt; class _Compressed_pair final : private _Ty1 &#123; // store a pair of values, deriving from empty firstprivate: _Ty2 _Myval2; using _Mybase = _Ty1; // for visualization //...省略 &#125;//定义2template&lt;class _Ty1, class _Ty2&gt; class _Compressed_pair&lt;_Ty1, _Ty2, false&gt; final &#123; // store a pair of values, not deriving from firstprivate: _Ty1 _Myval1; _Ty2 _Myval2; //...省略 &#125; 这两个定义的区别直观上来说声明的内部成员变量不同，一个只有一个实际对象的指针（_Ty2）,另外一个不仅有_Ty2，还包含deletor类型变量。换句话说，这个区别影响了unique_ptr指针所占用的内存大小。 _Ty1就是_Dx，也就是deletor的类型，_Ty2也就是unique_ptr实际指向的对象的指针。这里应该是通过重载的机制，让编译器去选择实例化哪个_Compressed_pair模板的代码。这个判断条件就是: 1is_empty_v&lt;_Ty1&gt; &amp;&amp; !is_final_v&lt;_Ty1&gt; 查询cpp reference可以is_empty_v用来标识类是否是一个empty类 Trait class that identifies whether T is an empty class. An empty class is a class that stores no data, either cv-qualified or not. is_final_v用来标识是否是final类（使用final关键字声明类）。 至此我们可以看到unique_ptr所占空间的大小跟deletor有关，如果使用默认的deletor，则显然default_delete是一个空类，那么unique_ptr跟裸指针具有相同的大小。而如果自定义的deletor（可以理解为function object）包含了其他的data，则unique_ptr的大小是裸指针和function object占用大小之和。 std::shared_ptr控制块和std::unique_ptr用来表示对资源的独占性相反，std::shared_ptr用来表示对资源的共享。创建的shared_ptr对象共享同一个资源。shared_ptr在内部实现使用引用计数的方式。每个shared_ptr&lt;T&gt;对象都包含两个部分，一个是指向T型别对象的指针，一个是指向控制块的指针，如下图： 很显然，从shared_ptr的memory layout可以看到，shared_ptr的大小为裸指针的两倍。 注意：必须保证对同一个资源只创建一个控制块。因为当控制块中的引用计数为0时，资源被销毁。如果违反了这个约定，资源会被“销毁两次”，也就是说会造成未定义行为。控制块需要动态分配。控制块的创建遵循以下规则： std::make_shared总是创建一个控制块 从具备专属所有权的指针(即unique_ptr或auto_ptr指针)出发构造一个shared_ptr时，会创建一个控制块。 使用裸指针作为实参来调用（创建）shared_ptr时，会创建一个控制块。如果使用shared_ptr或者weak_ptr来创建shared_ptr，则不会创建控制块。 创建std::shared_ptr1234567891011121314//Stock和Investment接上面unique_ptr中的定义//通过make函数构造std::shared_ptr&lt;Stock&gt; ptr = std::make_shared&lt;Stock&gt;("hello"); //创建一个控制块//通过传递右值构造std::shared_ptr&lt;Stock&gt; ptr(new Stock("hello")); //创建一个控制块//bad code: 通过裸指针，左值构造auto raw_ptr = new Stock("hello");std::shared_ptr&lt;Stock&gt; ptr1(raw_ptr); //为raw_ptr创建了一个控制块std::shared_ptr&lt;Stock&gt; ptr2(raw_ptr); //又创建了一个控制块，在析构时，会造成未定义行为。std::shared_ptr&lt;Stock&gt; ptr3(ptr1); //从一个已有的shared_ptr创建另一个shared_ptr，调用shared_ptr的copy ctor，不会再次创建控制块， Best Practice是使用make函数来构造shared_ptr。最后的例子通过裸指针来构造，会为同一个资源创建两个控制块，也就是会有两个引用计数，当一个引用计数为0时，会发生析构，这样会对同一个资源析构两次，造成未定义行为。 自定义deletor在unique_ptr的类型中，自定义的deletor是作为一个模板参数，所以deletor的型别是作为unique_ptr型别的一部分的，而shared_ptr则不一样。 1234567891011121314void delete_stock(Stock* s) &#123; delete s;&#125;auto stockDeletor = [](Stock* s) &#123; //logsomething(); delete s; &#125;;//自定义析构std::shared_ptr&lt;Stock&gt; ptr1(new Stock("hello"), stockDeletor);std::shared_ptr&lt;Stock&gt; ptr2(new Stock("hello"), delete_stock);std::vector&lt;std::shared_ptr&lt;Stock&gt;&gt; v&#123;ptr1, ptr2&#125;; //不同的deletor，但是属于同一个类型，可以放在vector容器中，如果是unique_ptr，则不行 shared_from_this考虑这样一种情况，如果使用this指针直接来创建shared_ptr，会发生什么。以下代码来自cpp reference： 123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;memory&gt;#include &lt;iostream&gt; struct Good: std::enable_shared_from_this&lt;Good&gt; // note: public inheritance&#123; std::shared_ptr&lt;Good&gt; getptr() &#123; return shared_from_this(); &#125;&#125;; struct Bad&#123; std::shared_ptr&lt;Bad&gt; getptr() &#123; return std::shared_ptr&lt;Bad&gt;(this); &#125; ~Bad() &#123; std::cout &lt;&lt; "Bad::~Bad() called\n"; &#125;&#125;; int main()&#123; //example 1 // Good: the two shared_ptr's share the same object std::shared_ptr&lt;Good&gt; gp1 = std::make_shared&lt;Good&gt;(); std::shared_ptr&lt;Good&gt; gp2 = gp1-&gt;getptr(); std::cout &lt;&lt; "gp2.use_count() = " &lt;&lt; gp2.use_count() &lt;&lt; '\n'; //example 2 // Bad: shared_from_this is called without having std::shared_ptr owning the caller try &#123; Good not_so_good; std::shared_ptr&lt;Good&gt; gp1 = not_so_good.getptr(); &#125; catch(std::bad_weak_ptr&amp; e) &#123; // undefined behavior (until C++17) and std::bad_weak_ptr thrown (since C++17) std::cout &lt;&lt; e.what() &lt;&lt; '\n'; &#125; //example 3 // Bad, each shared_ptr thinks it's the only owner of the object std::shared_ptr&lt;Bad&gt; bp1 = std::make_shared&lt;Bad&gt;(); std::shared_ptr&lt;Bad&gt; bp2 = bp1-&gt;getptr(); std::cout &lt;&lt; "bp2.use_count() = " &lt;&lt; bp2.use_count() &lt;&lt; '\n';&#125; // UB: double-delete of Bad 在example 3，使用make函数来创建bp1，这是会创建一个控制块，后面又通过this裸指针又会创建一个控制块，所以会发生double delete。 在标准库中已经提供了enable_shared_from_this模板来解决这个问题。让类继承自enable_shared_from_this的特化版本，这个模板提供一个shared_from_this成员函数，可以使用这个成员函数来构造新的shared_ptr。但是注意，必须当前shared_ptr已经有一个相关联的控制块之后，才可以安全的使用shared_from_this，否则也会发生未定义行为。如上面的example 2。 std::weak_ptrweak_ptr vs shared_ptrweak_ptr并不是一种独立的智能指针，是对shared_ptr的一种扩充。weak_ptr不能直接由裸指针来构造，只能通过shared_ptr或者其他的weak_ptr来构造。cpp reference对weak_ptr的定义： std::weak_ptr is a smart pointer that holds a non-owning (“weak”) reference to an object that is managed by std::shared_ptr. It must be converted to std::shared_ptr in order to access the referenced object. weak_ptr并不影响指向同一个资源对象的shared_ptr的引用计数，换句话说，weak_ptr不影响对象的共享所有权。前面在shared_ptr中提到的控制块中包含一个弱引用计数，weak_ptr影响的就是这个弱引用计数。当这个弱引用计数为0时，也即没有shared_ptr涉及到这个对象时，weak_ptr失效（过期）。 123456789101112131415161718192021//call use_count function to get the numbers of shared_ptr instances that //shared ownship of the managed object, if 0 then the object has been deletedstd::shared_ptr&lt;Stock&gt; sp = std::make_shared&lt;Stock&gt;("hello");std::cout &lt;&lt; sp.use_count() &lt;&lt; std::endl; //1std::weak_ptr&lt;Stock&gt; wp = sp;std::cout &lt;&lt; sp.use_count() &lt;&lt; std::endl; //1std::cout &lt;&lt; wp.use_count() &lt;&lt; std::endl; //1std::weak_ptr&lt;Stock&gt; wp2 = wp;std::cout &lt;&lt; wp.use_count() &lt;&lt; std::endl; //1std::cout &lt;&lt; wp2.use_count() &lt;&lt; std::endl; //1std::shared_ptr&lt;Stock&gt; sp2 = wp.lock(); //use lock to get a shared_ptr instanceif (sp2) &#123; //sp2 not null&#125;else &#123; //sp2 null, mean weak_ptr is expired&#125; 在weak_ptr中使用lock方法来新建一个shared_ptr对象并返回，如果为空，则说明weak_ptr已经过期。也可以使用expired来检测weak_ptr是否过期，在多线程的环境中，可能会带来竞争风险。所以还是推荐使用lock方法。 使用场景weak_ptr可以有以下几种使用场景。 用作cache（缓存） 观察者模式 避免shared_ptr指针环路 用作cache（缓存）12345678910111213141516//use weak_ptr in cache scenariostd::shared_ptr&lt;Widget&gt; loadWidget() &#123; return std::make_shared&lt;Widget&gt;();&#125;std::shared_ptr&lt;Widget&gt; fast_load_widget(int id) &#123; static std::unordered_map&lt;int, std::weak_ptr&lt;Widget&gt;&gt; cache; auto sp = cache[id].lock(); //check if exist in cache if (!sp) &#123; sp = loadWidget(); cache[id] = sp; //put to cache &#125; return sp;&#125; 观察者模式Subject类有一个vector容器，用于保存observers，当需要通知observer时，先检查observer是否还有效。注意：通过std::make_shared创建了一个临时的shared_ptr直接复制给weak_ptr，这个时候shared_ptr即被销毁。在调用lock测试weak_ptr是否过期时，这个observer是过期的。所以在测试函数中另外一个observer能收到通知。 1234567891011121314151617181920212223242526272829303132333435363738class Observer &#123;public: void DoStuff() &#123; std::cout &lt;&lt; "Got notified" &lt;&lt; std::endl; &#125;&#125;;class Subject &#123;public: void Notify() &#123; for (auto&amp; ob : m_obs) &#123; auto sp = ob.lock(); //convert to shared_ptr if (sp) &#123; //test if converted shared_ptr is valid sp-&gt;DoStuff(); &#125; &#125; &#125; void AddToObserver(std::weak_ptr&lt;Observer&gt;&amp; ob) &#123; m_obs.push_back(ob); &#125;private: std::vector&lt;std::weak_ptr&lt;Observer&gt;&gt; m_obs;&#125;;void test_observer_pattern_using_weak_ptr() &#123; Subject s; auto sp = std::make_shared&lt;Observer&gt;(); //make a shared_ptr obj std::weak_ptr&lt;Observer&gt; ob1 = std::make_shared&lt;Observer&gt;(); //make a temp shared_ptr, after the assignment, shared_ptr is deleted std::weak_ptr&lt;Observer&gt; ob2(sp); //only this observer can receive notification!!! s.AddToObserver(ob1); s.AddToObserver(ob2); s.Notify();&#125; 避免shared_ptr指针环路 A, C都共享B，如果B需要保有一个对A的指针，这时候如果使用shared_ptr的话，会造成shared_ptr 环路，A, B互相保持引用，这样A和B的引用计数都不为0，无法析构，造成内存泄漏。 weak_ptr可以避免这个问题。当A的引用计数为0，即使B保有一个指向A的weak_ptr，不影响A被销毁。 Make函数的几个注意点在使用智能指针时，Best Practice都是使用make函数来创建。特别是对于shared_ptr， 因为与之相关的控制块需要动态分配，如果使用make函数，则可以进行一次系统调用来分配内存（包含控制块和shared_ptr对象的内存）。而如果使用先创建裸指针，然后再创建shared_ptr的方法，需要进行两次系统调用来申请内存。这样做带来裸指针安全性的问题，也增加的性能上的开销。 当然了，make函数也不是万能的，如果需要使用自定义的deletor，那么只能通过其他方式来创建智能指针。 本文主要参考了Scott Meyers大师的 Effective Modern C++，可以直接在网络上阅读：地址在这. 参考资料 Scott Meyers Effective Modern C++ GotW91: Smart Pointer Parameters top-10-dumb-mistakes-avoid-c-11-smart-pointers]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ 11带来的新特性]]></title>
    <url>%2F2018%2F12%2F04%2Fnew-features-in-cpp-11%2F</url>
    <content type="text"><![CDATA[本文转载自Herb Sutter的blog。Herb Sutter是C++标准委员会的主席，他在本文中主要讲述了C++ 11 带来的新的一些feature，同时建议尽量使用Modern C++ style编程。 同时我建议阅读Scott Mayers的《Effective Modern C++》一书。 原文如下。 The C++11 standard offers many useful new features. This page focuses specifically and only on those features that make C++11 really feel like a new language compared to C++98, because: They change the styles and idioms you’ll use when writing C++ code, often including the way you’ll design C++ libraries. For example, you’ll see more smart pointer parameters and return values, and functions that return big objects by value. They will be used so pervasively that you’ll probably see them in most code examples. For example, virtually every five-line modern C++ code example will say “auto” somewhere. Use the other great C++11 features too. But get used to these ones first, because these are the pervasive ones that show why C++11 code is clean, safe, and fast – just as clean and safe as code written in any other modern mainstream language, and with C++’s traditional to-the-metal performance as strong as ever. Notes: Like Strunk &amp; White, this page is deliberately focused on brief summary guidance. It is not intended to provide exhaustive rationale and pro/con analysis; that will go into other articles. This is a living document. See the end for a list of the main changes and additions over time. autoUse auto wherever possible. It is useful for two reasons. First, most obviously it’s a convenience that lets us avoid repeating a type name that we already stated and the compiler already knows. 123456789// C++98map&lt;int,string&gt;::iterator i = m.begin();double const xlimit = config["xlimit"];singleton&amp; s = singleton::instance(); // C++11auto i = begin(m);auto const xlimit = config["xlimit"];auto&amp; s = singleton::instance(); Second, it’s more than just a convenience when a type has an unknown or unutterable name, such as the type of most lambda functions, that you couldn’t otherwise spell easily or at all. 12345// C++98binder2nd&lt; greater &gt; x = bind2nd( greater(), 42 ); // C++11auto x = [](int i) &#123; return i &gt; 42; &#125;; Note that using auto doesn’t change the code’s meaning. The code is still statically typed, and the type of every expression is already crisp and clear; the language just no longer forces us to redundantly restate the type’s name. Some people are initially afraid of using auto here, because it may feel like not (re)stating the type we want could mean we’ll get a different type by accident. If you want to explicitly enforce a type conversion, that’s okay; state the target type. The vast majority of the time, however, just use auto; it will rarely be the case that you get a different type by mistake, and even in those cases the language’s strong static typing means the compiler will usually let you know because you’ll be trying to call a member function the variable doesn’t have or otherwise use it as something that it isn’t. Smart pointers: No deleteAlways use the standard smart pointers, and non-owning raw pointers. Never use owning raw pointers and delete, except in rare cases when implementing your own low-level data structure (and even then keep that well encapsulated inside a class boundary). If you know you’re the only owner of another object, use unique_ptr to express unique ownership. A “new T” expression should immediately initialize another object that owns it, typically a unique_ptr. A classic example is the Pimpl Idiom (see GotW #100): 123456789101112131415// C++11 Pimpl idiom: header fileclass widget &#123;public: widget(); // ... (see GotW #100) ...private: class impl; unique_ptr&lt;impl&gt; pimpl;&#125;; // implementation fileclass widget::impl &#123; /*...*/ &#125;; widget::widget() : pimpl&#123; new impl&#123; /*...*/ &#125; &#125; &#123; &#125;// ... Use shared_ptr to express shared ownership. Prefer to use make_shared to create shared objects efficiently. 1234567// C++98widget* pw = new widget();:::delete pw; // C++11auto pw = make_shared&lt;widget&gt;(); Use weak_ptr to break cycles and express optionality (e.g., implementing an object cache). 123456789101112// C++11class gadget; class widget &#123;private: shared_ptr&lt;gadget&gt; g; // if shared ownership&#125;; class gadget &#123;private: weak_ptr&lt;widget&gt; w;&#125;; If you know another object is going to outlive you and you want to observe it, use a (non-owning) raw pointer. 1234567// C++11class node &#123; vector&lt;unique_ptr&lt;node&gt;&gt; children; node* parent;public: :::&#125;; nullptrAlways use nullptr for a null pointer value, never the literal 0 or the macro NULL which are ambiguous because they could be either an integer or a pointer. 12345// C++98int* p = 0; // C++11int* p = nullptr; Range forThe range-based for loop is a much more convenient way to visit every element of a range in order. 123456789// C++98for( vector&lt;int&gt;::iterator i = v.begin(); i != v.end(); ++i ) &#123; total += *i;&#125; // C++11for( auto d : v ) &#123; total += d;&#125; Nonmember begin and endAlways use nonmember begin(x) and end(x) (not x.begin() and x.end()), because begin(x) and end(x) are extensible and can be adapted to work with all container types – even arrays – not just containers that follow the STL style of providing x.begin() and x.end() member functions. If you’re using a non-STL collection type that provides iteration but not STL-style x.begin() and x.end(), you can often write your own non-member begin(x) and end(x) overloads for that type and then you can traverse collections of that type using the same coding style above as for STL containers. The standard has set the example: C arrays are such a type, and the standard provides begin and end for arrays. 12345678910vector&lt;int&gt; v;int a[100]; // C++98sort( v.begin(), v.end() );sort( &amp;a[0], &amp;a[0] + sizeof(a)/sizeof(a[0]) ); // C++11sort( begin(v), end(v) );sort( begin(a), end(a) ); Lambda Functions and AlgorithmsLambdas are a game-changer and will frequently change the way you write code to make it more elegant and faster. Lambdas make the existing STL algorithms roughly 100x more usable. Newer C++ libraries increasingly are designed assuming lambdas as available (e.g., PPL), and some even require you to write lambdas to use the library at all (e.g., C++ AMP). Here’s one quick example: Find the first element in v that’s &gt;x and &lt;y. In C+11, the simplest and cleanest code is to use a standard algorithm. 12345678// C++98: write a naked loop (using std::find_if is impractically difficult)vector&lt;int&gt;::iterator i = v.begin(); // because we need to use i laterfor( ; i != v.end(); ++i ) &#123; if( *i &gt; x &amp;&amp; *i &lt; y ) break;&#125; // C++11: use std::find_ifauto i = find_if( begin(v), end(v), [=](int i) &#123; return i &gt; x &amp;&amp; i &lt; y; &#125; ); Want a loop or similar language feature that’s not actually in the language? No sweat; just write it as a template function (library algorithm), and thanks to lambdas you can use it with almost the same convenience as if it were a language feature, but with more flexibility because it really is a library and not a hardwired language feature. 12345678910111213141516// C#lock( mut_x ) &#123; ... use x ...&#125; // C++11 without lambdas: already nice, and more flexible (e.g., can use timeouts, other options)&#123; lock_guard&lt;mutex&gt; hold &#123; mut_x &#125;; ... use x ...&#125; // C++11 with lambdas, and a helper algorithm: C# syntax in C++// Algorithm: template&lt;typename T&gt; void lock( T&amp; t, F f ) &#123; lock_guard hold(t); f(); &#125;lock( mut_x, [&amp;]&#123; ... use x ...&#125;); Get familiar with lambdas. You’ll use them a lot, and not just in C++ – they are already widely available and pervasively used in several popular mainstream languages. A good place to start is my talk Lambdas, Lambdas Everywhere at PDC 2010. Move / &amp;&amp;Move is best thought of as an optimization of copy, though it also enables other things like perfect forwarding. Move semantics change the way we design our APIs. We’ll be designing for return by value a lot more often. 1234567891011121314// C++98: alternatives to avoid copyingvector&lt;int&gt;* make_big_vector(); // option 1: return by pointer: no copy, but don't forget to delete:::vector&lt;int&gt;* result = make_big_vector(); void make_big_vector( vector&lt;int&gt;&amp; out ); // option 2: pass out by reference: no copy, but caller needs a named object:::vector&lt;int&gt; result;make_big_vector( result ); // C++11: movevector&lt;int&gt; make_big_vector(); // usually sufficient for 'callee-allocated out' situations:::auto result = make_big_vector(); // guaranteed not to copy the vector Enable move semantics for your type when you can do something more efficient than copy. Uniform Initialization and Initializer ListsWhat hasn’t changed: When initializing a local variable whose type is non-POD or auto, continue using the familiar = syntax without extra { } braces. 12345// C++98 or C++11int a = 42; // still fine, as always // C++ 11auto x = begin(v); // no narrowing or non-initialization is possible In other cases, including especially everywhere that you would have used ( ) parentheses when constructing an object, prefer using { } braces instead. Using braces avoids several potential problems: you can’t accidentally get narrowing conversions (e.g., float to int), you won’t occasionally accidentally have uninitialized POD member variables or arrays, and you’ll avoid the occasional C++98 surprise that your code compiles but actually declares a function rather than a variable because of a declaration ambiguity in C++’s grammar – what Scott Meyers famously calls “C++’s most vexing parse.” There’s nothing vexing about the new style. 123456789101112// C++98rectangle w( origin(), extents() ); // oops, declares a function, if origin and extents are typescomplex&lt;double&gt; c( 2.71828, 3.14159 );int a[] = &#123; 1, 2, 3, 4 &#125;;vector&lt;int&gt; v;for( int i = 1; i &lt;= 4; ++i ) v.push_back(i); // C++11rectangle w &#123; origin(), extents() &#125;;complex&lt;double&gt; c &#123; 2.71828, 3.14159 &#125;;int a[] &#123; 1, 2, 3, 4 &#125;;vector&lt;int&gt; v &#123; 1, 2, 3, 4 &#125;; The new { } syntax works pretty much everywhere: 12345// C++98X::X( /*...*/ ) : mem1(init1), mem2(init2, init3) &#123; /*...*/ &#125; // C++11X::X( /*...*/ ) : mem1&#123;init1&#125;, mem2&#123;init2, init3&#125; &#123; /*...*/ &#125; Finally, sometimes it’s just convenient to pass function arguments without a type-named temporary: 1234567void draw_rect( rectangle ); // C++98draw_rect( rectangle( myobj.origin, selection.extents ) ); // C++11draw_rect( &#123; myobj.origin, selection.extents &#125; ); The only place where I prefer not to write the braces is on simple initialization of a non-POD variable, like auto x = begin(v); , where it would make the code needlessly ugly because I know it’s a class type, so I know I don’t need to worry about accidental narrowing conversions, and modern compilers already routinely perform the optimization to elide the extra copy (or the extra move, if the type is move-enabled). And MoreThere’s more to modern C++. Much more. And in the future I plan to write more in-depth pieces about these and other features of C++11 we’ll get to know and love. But for now, this is the list of must-know features. These features form the core that defines modern C++ style, that make C++ code look and perform the way it does, that you’ll see used pervasively in nearly every piece of modern code you’ll see or write… and that make modern C++ the clean, and safe, and fast language that our industry will continue relying on heavily for years to come. Major Change History2011-10-30: Added C# lock example to lambdas. Reordered smart pointers to introduce unique_ptr first. 2011-11-01: Added uniform initialization.]]></content>
      <categories>
        <category>coding</category>
        <category>repost</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bitwise copy vs memberwise copy]]></title>
    <url>%2F2018%2F11%2F23%2Fbitwise-copy-vs-memberwise-copy%2F</url>
    <content type="text"><![CDATA[本文转自Stack Overflow，对几种copy的概念将的通熟易懂。 Member-wise Copy Is when you visit each member and explicitly copy it, invoking its copy constructor. It is usually tantamount to deep-copy. It is the right and proper way of copying things. The opposite is bit-wise copy, which is a hack, see below. Bit-wise Copy Is a specific form of shallow copy. It is when you simply copy the bits of the source class to the target class, using memcpy() or something similar. Constructors are not invoked, so you tend to get a class which appears to be all right but things start breaking in horrible ways as soon as you start using it. This is the opposite of member-wise copy, and is a quick and dirty hack that can sometimes be used when we know that there are no constructors to be invoked and no internal structures to be duplicated. For a discussion of what may go wrong with this, see this Q&amp;A: C++ bitwise vs memberwise copying? Shallow Copy Refers to copying just the immediate members of an object, without duplicating whatever structures are pointed by them. It is what you get when you do a bit-wise copy. (Note that there is no such thing as “shadow copy”. I mean, there is such a thing, in file systems, but that’s probably not what you had in mind.) Deep Copy Refers to not only copying the immediate members of an object, but also duplicating whatever structures are pointed by them. It is what you normally get when you do member-wise copy. To summarize: There are two categories: Shallow Copy Deep Copy Then, there are two widely used techniques: Bit-wise Copy (a form of Shallow Copy) Member-wise Copy (a form of Deep Copy) As for the hear-say about someone who said something and someone who said something else: bit-wise copy is definitely always shallow copy. Member-wise copy is usually deep copy, but you may of course foul it up, so you may be thinking that you are making a deep copy while in fact you are not. Proper member-wise copy relies on having proper copy constructors. Finally: The default copy constructor will do a bit-wise copy if the object is known to be trivially copyable, or a member-wise copy if not. However, the compiler does not always have enough information to perform a proper copy of each member. For example, a pointer is copied by making a copy of the pointer, not by making a copy of the pointed object. That’s why you should generally not rely on the compiler providing you with a default copy constructor when your object is not trivially copyable. A user-supplied constructor may do whatever type of copy the user likes. Hopefully, the user will choose wisely and do a member-wise copy.]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>copy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[同步与锁]]></title>
    <url>%2F2018%2F11%2F15%2Fabout-synchronization%2F</url>
    <content type="text"><![CDATA[本文摘录自《程序员的自我修养》第一章。 二元信号量(Binary Semaphore):最简单的一种锁, 只有两种状态: 占用与非占用. 它适合只能被唯一一个线程独占访问的资源. 信号量(Semaphore):允许多个线程并发访问的资源. 互斥量(Mutex):资源仅同时允许一个线程访问. 但和信号量不同的是, 信号量在整个系统可以被任意线程获取并释放, 也就是说, 同一个信号量可以被系统中的一个线程获取之后由另一个线程释放. 而互斥量则要求哪个线程获取了互斥量, 哪个线程就要负责释放这个锁, 其他线程越俎代庖去释放互斥量是无效的. 临界锁(Critical Section):是比互斥量更加严格的同步手段. 临界区和互斥量与信号量的区别在于, 互斥量和信号量在系统的任何进程里都是可见的, 也就是说, 一个进程创建了一个互斥量或信号量, 另一个进程试图去获取该锁是合法的. 然而, 临界区的作用范围仅限于本进程, 其他的进程无法获取该锁. 除此之外, 临界区具有和互斥量相同的性质. 读写锁(Read-Write Lock):致力于一种更加特定的场合的同步. 读写锁的状态如下: 读写锁状态 以共享方式获取 以独占方式获取 自由 成功 成功 共享 成功 等待 独占 成功 等待]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>lock</tag>
        <tag>synchronization</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[build c/c++ extension for python]]></title>
    <url>%2F2018%2F11%2F08%2Fbuild-c-c-extension-for-python%2F</url>
    <content type="text"><![CDATA[本文记录下如何在python中调用C/C++中函数。本文主要参考MSDN 中Create a C++ extension for Python 一文。 搭建python环境由于我是直接参考的MSDN上的教程，所以没有直接下载python安装包，而是直接通过Visual Studio 2017来安装的python。所以按照MSDN上的步骤，通过Visual Studio Installer来安装Python模块。建议同时安装32bit和64bit。 安装好之后，默认安装的路径是C:\Program Files (x86)\Microsoft Visual Studio\Shared。可以建立一个文件夹快捷方式放在C盘根目录，方便以后导航。 接下来设置一下系统的环境变量，首先建立PATHHOME环境变量为Python安装目录： 1C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python36_86\ 然后修改PATH环境变量，加入以下路径： 1;%PYTHONHOME%;%PYTHONHOME%\Scripts;%PYTHONHOME%\DLLS; 以后如果想使用Python 64位的，直接修改PYTHONHOME环境变量为Python 64目录即可。 验证环境按照MSDN上，建立一个Python工程，直接run一下试试，验证Python环境是否成功。 按照MSDN上，建立一个c++ 工程，然后设置下project property，具体设置项按照MSDN上的设置项。然后编写c++ function。build以下，验证C++工程无问题。 注意: 根据MSDN，需要将在Project Property中C/C++ Code Generation -&gt; Runtime Library 设置为Multi-threaded DLL(/MD) 工程设置中将$(PYTHONHOME)\include加入到Additional Include directory中。$(PYTHONHOME)即是我们在上一步中设置的环境变量。 在Linker -&gt; General -&gt; Additional Library Directories 中加入$(PYTHONHOME)\libs 将Project platform设置为win32 平台。 编写代码在原有的c++工程中新建一个cpp文件，然后加入以下代码 12345678910111213141516171819202122232425262728293031323334353637383940414243//always put Python header first, if not found this header, //check c++ Additional library include setting ：$(PYTHONHOME)\include#include &lt;Python.h&gt; #include &lt;Windows.h&gt;#include "math.h"PyObject* test_mul(PyObject *self, PyObject* args) &#123; int a, b; PyArg_ParseTuple(args, "ii", &amp;a, &amp;b); //format string ref: https://docs.python.org/3.7/c-api/arg.html //return PyLong_FromLong(a*b); int result = mul(a, b); return PyLong_FromLong(result);&#125;PyObject* test_sub(PyObject* self, PyObject* args) &#123; int a, b; PyArg_ParseTuple(args, "ii", &amp;a, &amp;b); int result = sub(a, b); return PyLong_FromLong(result);&#125;static PyMethodDef superfastcode_methods[] = &#123; // The first property is the name exposed to Python, fast_tanh, the second is the C++ // function name that contains the implementation. //&#123; "fast_tanh", (PyCFunction)tanh_impl, METH_O, nullptr &#125;, //METH_O means only passing one argument &#123;"test_mul", (PyCFunction)test_mul, METH_VARARGS, nullptr&#125;, //METH_VARARGS ref: https://docs.python.org/3/c-api/structures.html &#123;"test_sub", (PyCFunction)test_sub, METH_VARARGS, nullptr&#125;, // Terminate the array with an object containing nulls. &#123; nullptr, nullptr, 0, nullptr &#125;&#125;;static PyModuleDef superfastcode_module = &#123; PyModuleDef_HEAD_INIT, "superfastcode", // Module name to use with Python import statements "Provides some functions, but faster", // Module description 0, superfastcode_methods // Structure that defines the methods of the module&#125;;PyMODINIT_FUNC PyInit_superfastcode() &#123; //PyInit_&lt;module_name&gt; module_name must be your module name return PyModule_Create(&amp;superfastcode_module);&#125; build工程查看是否成功。下面是对其几点说明。 必须要有一个PyInit_&lt;model_name&gt;导出函数，Python会通过这个函数来初始化模块。 给C++函数写一个对应的wrapper 函数，比如上述中的test_mul函数，wrapper函数的签名是Pyobject* (Pyobject* self, Pyobject* args)。在Python中所有的type都是“继承”自Pyobject（之所以打引号，是因为python是用C写的，并没有继承的概念）。 在wrapper函数中的第二个参数是args表示从Python脚本中传递过来的参数包。可以使用PyArg_ParseTuple来取得。 int PyArg_ParseTuple(PyObject args*, const char format*, …) Parse the parameters of a function that takes only positional parameters into local variables. Returns true on success; on failure, it returns false and raises the appropriate exception. 其中第二个参数format表示如何解析传递的参数包，”ii”表示两个integer，”s”表示字符串，具体请参考Parsing arguments and building values 定义一个数组，并枚举需要导出的C++函数，如上面的superfastcode_methods，数组中每个元素都是一个PyMethodDef结构体。 12345678struct PyMethodDef &#123; const char *ml_name; /* The name of the built-in function/method */ PyCFunction ml_meth; /* The C function that implements it */ int ml_flags; /* Combination of METH_xxx flags, which mostly describe the args expected by the C func */ const char *ml_doc; /* The __doc__ attribute, or NULL */&#125;;typedef struct PyMethodDef PyMethodDef; 其中ml_flags中METH_O表示只有一个参数，METH_VARARGS表示可以有多个参数。在wrapper class中会使用这些”声明”来取得参数。 定义一个PyModuleDef结构体，如上面的superfastcode_module。表示module名称等信息。 使用定义好的ModuleModule定义好之后，可以有两种方式导入到python中。 如果跟Python工程属于同一个Solution，可以直接在Python Project中直接Reference过来。具体做法是在Python工程-&gt; References -&gt; Add References。 另外一种方式，可以通过distutils来编译成Python的一个模块。distutils通过setup.py 脚本来编译C/C++ 源文件。一个简单的setup.py如下。 123456789101112from distutils.core import setup, Extension, DEBUG#more info about setup.py, please ref: https://docs.python.org/3/extending/building.htmlsfc_module = Extension('superfastcode', libraries=['StaticLib1'], #dependency sources = ['source.cpp'])setup(name = 'superfastcode', version = '1.0', description = 'Python Package with superfastcode C++ extension', ext_modules = [sfc_module] ) 上面source.cpp中依赖了一个StaticLib1中的函数，所以加入了libraries 供链接用。 目前文件结构如下图： 其中math.h 是StaticLib1的头文件。PythonApplication1.py是测试用的脚本。 我们首先需要编译source.cpp。在该目录下打开cmder(cmder一款统一命令行工具，也可以用cmd命令行)，执行 1pip install . 此操作会将module安装到Python的site-package中。然后我们就可以在python脚本中使用了 123456789#demo test#import function from modulefrom superfastcode import test_mul, test_subresult = test_mul(2,2)print(result);result = test_sub(5,1);print(result); 在Visual Studio中F5运行或者在命令行执行python PythonApplication1.py，验证是否成功。 卸载已安装的包如果在上一步执行pip install .的时候提示已经该包已经安装过，无法卸载。执行pip uninstall your_module_name也无法卸载。可以通过删除Python安装目录下的site-packages来卸载该包。 注意采用这种卸载方式是因为我们使用的distutils来安装package的，Python下可以使用其他包管理来管理，如easy_install 参考资料 https://docs.python.org/3/c-api/arg.html https://docs.python.org/3/extending/building.html https://docs.python.org/3/c-api/structures.html https://stackoverflow.com/questions/402359/how-do-you-uninstall-a-python-package-that-was-installed-using-distutils https://docs.python.org/3.7/c-api/arg.html https://docs.microsoft.com/en-us/visualstudio/python/working-with-c-cpp-python-in-visual-studio?view=vs-2017]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[由sizeof引起的问题]]></title>
    <url>%2F2018%2F11%2F06%2Fsizeof-question-in-cpp%2F</url>
    <content type="text"><![CDATA[最近在看Lippman的《Inside the c++ object model》，书中Lippman说有人发邮件问了他一个问题。 123456class X &#123;&#125;;class Y : public virtual X&#123;&#125;;class Z: public virtual X&#123;&#125;;class A:public Y, public Z&#123;&#125;; 根据以上定义，使用sizeof运算符分别计算类X,Y,Z,A的所占大小。 答案公布： 在msvc140和gcc 5.4环境下测试： 1234size_t temp = sizeof(X); //1temp = sizeof(Y); //4temp = sizeof(Z); //4temp = sizeof(A); //8 为什么sizeof(X)为1？X是一个”空类”，按理来说sizeof(X)应该是0，因为没有数据需要存储。为何sizeof(X)为1呢？ Lippman给出的解释是，如果空类所占空间为0，则类的两个不同的实例地址就相同，这样的结果显然不是我们想要的。编译器自动给空类插入占用一字节的char数据成员，这样可以保证不同的对象会分配唯一的地址空间。 12X a, b;if(&amp;a == &amp;b) cerr &lt;&lt; "yipes" &lt;&lt;endl; 在《Effective c++》中item 39中，作者提到：freestanding objects必须有Non-zero size，对于大多数编译器，sizeof(X)是1，是因为编译器插入一个char完成的。 在cppreference可以找到相关的标准规定: The size of any object or member subobject (unless [[no_unique_address]] – see below) (since C++20) is required to be at least 1 even if the type is an empty class type (that is, a class or struct that has no non-static data members), in order to be able to guarantee that the addresses of distinct objects of the same type are always distinct. 为什么sizeof(Y), sizeof(Z)为4？先来考虑另外一个问题 12345class X&#123;&#125;;class Q: public X&#123; private: int data;&#125; Q继承自空类X，考虑到sizeof(X) = 1, 那么Q类的所占空间是sizeof(int)还是sizeof(int) + 1? 答案是根据Empty base optimization原则，Q所占空间为sizeof(int)。也就是说base class所占空间被“优化”掉了。但是这里我们class Y， Z并没有数据成员，sizeof(Y) == sizeof(Z) == 4。 这是因为使用了virtual inheritance。一旦跟virtual扯上关系，编译器又在背后偷偷的做了一些事情。 为了实现面向对象中的多态特性，大多数编译器都会将一个vptr插入到the most base class中，vptr指向vtable。关于vtable的相关知识，请参考我的这篇博文。正是因为vptr指针占用4个字节，并且基于empty base optimization原则，所以sizeof(Y) = 4。 为什么sizeof(A)为8？因为virtual继承关系，编译器会在Y，Z的memory layout中加入一个vptr指针。在多重继承下，X的memory layout会包含Y,Z的vptr，所以sizeof(A)为8。 如看查看memory layoutMSVC在msvc下我们可以使用编译器选项/d1reportSingleClassLayout&lt;classname&gt;， /d1reportAllClassLayout来查看memory layout。打开visual studio 开发者prompt 1cl.exe your_source_file_path.cpp /d1reportAllClassLayout 如果包含的类比较多，可以将输出信息重定向到文件中，方便查看。 1cl.exe your_source_file_path.cpp /d1reportAllClassLayout &gt; &quot;d:\out.txt&quot; 在MSVC140下dump出来的memory layout如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class X size(1): +--- +---class Y size(4): +--- 0 | &#123;vbptr&#125; +--- +--- (virtual base X) +---Y::$vbtable@: 0 | 0 1 | 4 (Yd(Y+0)X)vbi: class offset o.vbptr o.vbte fVtorDisp X 4 0 4 0class Z size(4): +--- 0 | &#123;vbptr&#125; +--- +--- (virtual base X) +---Z::$vbtable@: 0 | 0 1 | 4 (Zd(Z+0)X)vbi: class offset o.vbptr o.vbte fVtorDisp X 4 0 4 0class A size(8): +--- 0 | +--- (base class Y) 0 | | &#123;vbptr&#125; | +--- 4 | +--- (base class Z) 4 | | &#123;vbptr&#125; | +--- +--- +--- (virtual base X) +---A::$vbtable@Y@: 0 | 0 1 | 8 (Ad(Y+0)X)A::$vbtable@Z@: 0 | 0 1 | 4 (Ad(Z+0)X)vbi: class offset o.vbptr o.vbte fVtorDisp X 8 0 4 0 GCC在gcc中可以通过编译选项-fdump-class-hierarchy来查看。 1g++ main.cpp -fdump-class-hierarchy 编程成功后，会生成一个main.cpp.002t.class的文件，搜索想要查看的类的memory layout即可。 载g++ 5.4 ubuntu下dump出来的main.cpp.002t.class文件如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182Class X size=1 align=1 base size=0 base align=1X (0x0x7f34c09cf5a0) 0 emptyVtable for YY::_ZTV1Y: 3u entries0 0u8 (int (*)(...))016 (int (*)(...))(&amp; _ZTI1Y)VTT for YY::_ZTT1Y: 1u entries0 ((&amp; Y::_ZTV1Y) + 24u)Class Y size=8 align=8 base size=8 base align=8Y (0x0x7f34c08661a0) 0 nearly-empty vptridx=0u vptr=((&amp; Y::_ZTV1Y) + 24u) X (0x0x7f34c09cf600) 0 empty virtual vbaseoffset=-24Vtable for ZZ::_ZTV1Z: 3u entries0 0u8 (int (*)(...))016 (int (*)(...))(&amp; _ZTI1Z)VTT for ZZ::_ZTT1Z: 1u entries0 ((&amp; Z::_ZTV1Z) + 24u)Class Z size=8 align=8 base size=8 base align=8Z (0x0x7f34c0866208) 0 nearly-empty vptridx=0u vptr=((&amp; Z::_ZTV1Z) + 24u) X (0x0x7f34c09cf660) 0 empty virtual vbaseoffset=-24Vtable for AA::_ZTV1A: 6u entries0 0u8 (int (*)(...))016 (int (*)(...))(&amp; _ZTI1A)24 18446744073709551608u32 (int (*)(...))-840 (int (*)(...))(&amp; _ZTI1A)Construction vtable for Y (0x0x7f34c0866270 instance) in AA::_ZTC1A0_1Y: 3u entries0 0u8 (int (*)(...))016 (int (*)(...))(&amp; _ZTI1Y)Construction vtable for Z (0x0x7f34c08662d8 instance) in AA::_ZTC1A8_1Z: 3u entries0 18446744073709551608u8 (int (*)(...))016 (int (*)(...))(&amp; _ZTI1Z)VTT for AA::_ZTT1A: 4u entries0 ((&amp; A::_ZTV1A) + 24u)8 ((&amp; A::_ZTC1A0_1Y) + 24u)16 ((&amp; A::_ZTC1A8_1Z) + 24u)24 ((&amp; A::_ZTV1A) + 48u)Class A size=16 align=8 base size=16 base align=8A (0x0x7f34c0878310) 0 vptridx=0u vptr=((&amp; A::_ZTV1A) + 24u) Y (0x0x7f34c0866270) 0 nearly-empty primary-for A (0x0x7f34c0878310) subvttidx=8u X (0x0x7f34c09cf6c0) 0 empty virtual vbaseoffset=-24 Z (0x0x7f34c08662d8) 8 nearly-empty subvttidx=16u vptridx=24u vptr=((&amp; A::_ZTV1A) + 48u) X (0x0x7f34c09cf6c0) alternative-path 在调试的时候还可以通过GDB命令info vtbl来查看vtable，下面是在vscode中调试示例。 如果想更多了解C++背后的故事，推荐阅读Lippman的《Inside the C++ Object Model》一书。 参考链接 https://ofekshilon.com/2010/11/07/d1reportallclasslayout-dumping-object-memory-layout/ http://visualgdb.com/gdbreference/commands/info_vtbl https://www.gonwan.com/2010/09/20/c-class-layout-using-msvc/ https://stackoverflow.com/questions/99297/how-are-virtual-functions-and-vtable-implemented https://www.v2ex.com/t/500682#reply10 https://isocpp.org/wiki/faq/pointers-to-members]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VMware虚拟机中设置网络代理]]></title>
    <url>%2F2018%2F10%2F24%2Fset-network-proxy-in-vmware-virtual-machine%2F</url>
    <content type="text"><![CDATA[本文是为vmware中安装的ubuntu设置代理的备忘。 步骤 在宿主机中安装好shadowsocks，并允许局域网连接。 在vmware中设置虚拟机的网络为NAT模式，这时虚拟机对外来说共享宿主的IP地址，对内于宿主是属于局域网 在ubuntu中，system settings-&gt;network -&gt; network proxy 中勾选Manual（手动）,地址全部填宿主机IP（局域网网段），设置好代理端口（可在windows下的shadowsocks查看，一般为默认1080） 访问下不可知的网站试试。]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
        <tag>vmware</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vtable and object memory layout in cpp]]></title>
    <url>%2F2018%2F10%2F22%2Fvtable-and-object-memory-layout-in-cpp-language%2F</url>
    <content type="text"><![CDATA[在C语言中，data和function是独立的entity，换句话说data和function是没有直接关联的。所以说使用C编程是面向过程编程，使用一个个的function来操作外在的data。而在C++中，通过Class将data和function集合在一起，形成一个Object。通过面向对象编程的三大特点：1)封装2)继承3)多态 来实现更好的灵活性。 1234567891011121314151617181920212223242526272829//c style： declare data structure and function seperately//datatypedef struct _point&#123; float x; float y;&#125;Point_t;//functionvoid print_point(const Point_t* ptr)&#123; printf("%f %f", ptr-&gt;x, ptr-&gt;y);&#125;//c++ style: use classclass Point&#123;public: Point(float x, float y): m_x(x), m_y(y)&#123;&#125; ~Point() = default; void print()&#123; printf("%f %f", m_x, m_y); &#125; float x()&#123;return m_x;&#125; float y()&#123;return m_y;&#125; private: float m_x; float m_y;&#125; c++ Object Memory Model在上述代码中，Point类的大小跟C语言中的Point 结构体的大小是一致的，在64bit机器上使用sizeof运算符得到大小都是8 byte。考虑下面的一个例子： 1234567class A&#123; int a; float f; char c1; char c2; char d[4];&#125; 一个对象所占的内存空间是一块连续的地址，且后声明的数据成员具有更高的地址。 what is vtable static array usually the first slot in c++ object model class-specific vptr, vptr is assigned in constructor by compiler generated code, that is why member initialization list is different with initialization in constructor body. polymorphic can be implemented differently between compilers. But generally implement using vtable use sample code in linux, use gdb to show vtable: -exec info vtbl objectname object memory model alignment member function member function is just a tag in code segment, is not include in object memory layout single inheritance and multi-inheritance pointer fix needed in multi-inheritance notes pointers-to-members PPT material]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WPF中遇到的一个关于RadioButton的数据绑定问题]]></title>
    <url>%2F2018%2F10%2F11%2Fdata-binding-problem-with-radiobutton-in-wpf%2F</url>
    <content type="text"><![CDATA[最近在重构代码的时候遇到一个WPF相关的问题，在使用MVVM pattern时，给WPF RadioButton建立绑定数据源时，理所当然的想到使用boolean类型。但是发生了一个奇怪的现象。废话不多说，直接上sample 代码。 问题代码完整sample代码在github上。 TestClass.cs 12345678910public enum RW&#123; Read, Write&#125; public class TestClass&#123; public RW ReadOrWrite &#123; get; set; &#125;&#125; TestViewModel.cs 12345678910111213141516171819202122232425262728public class TestViewModel : ViewModelBase &#123; private readonly TestClass testclass; public TestViewModel(TestClass tc) &#123; testclass = tc; &#125; public bool IsRead &#123; get &#123; return testclass.ReadOrWrite == RW.Read; &#125; set &#123; testclass.ReadOrWrite = value ? RW.Read : RW.Write; OnPropertyChanged("IsRead"); &#125; &#125; public bool IsWrite &#123; get &#123; return testclass.ReadOrWrite == RW.Write; &#125; set &#123; testclass.ReadOrWrite = value ? RW.Write : RW.Read; OnPropertyChanged("IsWrite"); &#125; &#125; &#125; TestWindow.xaml 1234&lt;StackPanel &gt; &lt;RadioButton GroupName=&quot;test&quot; Content=&quot;read&quot; IsChecked=&quot;&#123;Binding IsRead, Mode=TwoWay&#125;&quot;/&gt; &lt;RadioButton GroupName=&quot;test&quot; Content=&quot;write&quot; IsChecked=&quot;&#123;Binding IsWrite, Mode=TwoWay&#125;&quot;/&gt;&lt;/StackPanel&gt; 代码很简单，有两个window: MainWindowViewModel, TestWindow。TestWindow有两个RadioButton，分别建立双向绑定TestViewModel中的两个属性。在MainWindow中传递TestViewModel给TestWindow，作为其DataContext。同时在MainWindow有一个button，点击打开TestWindow。当点击button，然后关闭TestWindow，重复几遍，发现TestWindow中的RadioButton 来回自动切换状态！ 第一次点击： read write 第二次点击： read write 第三次点击： read write 第四次点击: read write 如此反复… 问题分析为什么在“数据源不变”的情况下，RadioButton的状态会变化呢？这是一个很简单的数据绑定而已! 在TestViewModel中属性的getter和setting中打上断点发现：程序会”自动”调用两个属性的setter。在代码中没有直接给属性赋值，所以setter的调用肯定是WPF搞的鬼了。 会不会是因为两个RadioButton属于同一个Group，所以在选择一个的时候，WPF会自动将Group内的置为Uncheck状态？在xaml中去掉GroupName之后，果然没有出现这个问题了。 查看Reference code: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859//file RadioButton.cs[ThreadStatic] private static Hashtable _groupNameToElements;protected override void OnChecked(RoutedEventArgs e) &#123; // If RadioButton is checked we should uncheck the others in the same group UpdateRadioButtonGroup(); base.OnChecked(e); &#125;private void UpdateRadioButtonGroup() &#123; string groupName = GroupName; if (!string.IsNullOrEmpty(groupName)) &#123; Visual rootScope = KeyboardNavigation.GetVisualRoot(this); if (_groupNameToElements == null) _groupNameToElements = new Hashtable(1); lock (_groupNameToElements) &#123; // Get all elements bound to this key and remove this element ArrayList elements = (ArrayList)_groupNameToElements[groupName]; for (int i = 0; i &lt; elements.Count; ) &#123; WeakReference weakReference = (WeakReference)elements[i]; RadioButton rb = weakReference.Target as RadioButton; if (rb == null) &#123; // Remove dead instances elements.RemoveAt(i); &#125; else &#123; // Uncheck all checked RadioButtons different from the current one if (rb != this &amp;&amp; (rb.IsChecked == true) &amp;&amp; rootScope == KeyboardNavigation.GetVisualRoot(rb)) rb.UncheckRadioButton(); i++; &#125; &#125; &#125; &#125; else // Logical parent should be the group &#123; DependencyObject parent = this.Parent; if (parent != null) &#123; // Traverse logical children IEnumerable children = LogicalTreeHelper.GetChildren(parent); IEnumerator itor = children.GetEnumerator(); while (itor.MoveNext()) &#123; RadioButton rb = itor.Current as RadioButton; if (rb != null &amp;&amp; rb != this &amp;&amp; string.IsNullOrEmpty(rb.GroupName) &amp;&amp; (rb.IsChecked == true)) rb.UncheckRadioButton(); &#125; &#125; &#125; &#125; 看代码可知，RadioButton内部有一个static变量_groupNameToElements, 用来存储GroupName与RadioButton示例的对应关系。在RadioButton的状态改变时，会调用UpdateRadioButtonGroup函数。 12if (rb != null &amp;&amp; rb != this &amp;&amp; string.IsNullOrEmpty(rb.GroupName) &amp;&amp; (rb.IsChecked == true)) rb.UncheckRadioButton(); 料想应该是这段代码设置RadioButton的状态，然后通过binding调用了属性的setter。在TestWindow ShowDialog前后打断点，查看变量_groupNameToElements. 第一次点击： 第二次点击： 第三次点击： 可以看到由于创建的RadioButton并没有马上被垃圾回收，还是残留在同一个Group中。所以在UpdateRadioButtonGroup函数中迭代elements时，执行 1rb.UncheckRadioButton(); 同时由于在这几个RadioButton中TestViewModel是共享的(即DataContext为同一个对象)，所以通过setter会改变TestViewModel中的属性。而因为是双向绑定，又反过来作用与RadioButton的IsChecked状态。所以出现了上述的问题。 问题解决至此应该很明了了，在RadioButton中使用绑定时，应该留个心眼，如果给每个RadioButton分别绑定一个属性的时候，需要注意这种情况。这种情况在xaml中直接给RadioButton去掉GroupName这个属性即可。我觉得更好的方法应该是使用其他的数据绑定方式。如stackoverflow中的一个问题，使用ListBox来模拟RadioButton. [Simple WPF RadioButton Binding?] 延伸阅读 [How is XAML interpreted and executed at runtime?]]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>wpf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c/c++ 中的变长参数]]></title>
    <url>%2F2018%2F09%2F28%2Fvariable-arguments-in-c-c%2F</url>
    <content type="text"><![CDATA[一个bug引起的思考最近碰到一个bug，是在一个log模块，在使用vsprintf_s函数时发生access deny错误。奇怪的是在Debug模式下没有问题，切换到Release模式下就会重现。我把问题简单化后的代码如下： 123456789101112131415161718192021222324252627282930313233#include "stdafx.h"#include &lt;stdio.h&gt;#include &lt;string&gt;#include &lt;stdarg.h&gt;#include &lt;iostream&gt;void test_var_args(const char* format, ...)&#123; va_list args; va_start(args, format); char buf[512]; int len = vsprintf_s(buf, 512, format, args); //buf[len] = '\0'; printf(buf); va_end(args);&#125;void test_var_args() &#123; std::string s("robert"); //const char* str = "robert"; test_var_args("%s age is %d", s, 25); std::cout &lt;&lt; std::endl;&#125;int main()&#123; test_var_args(); getchar(); return 0;&#125; 代码很简单。使用vs2017 在debug模式下编译，成功运行，当然输出的字符串有问题，先暂时忽略。在release下直接报如下的错误 当然了，因为上面的代码是简化后的代码，所以直接看输出就能定位到是变长参数带来的内存访问问题。 我在debug实际代码的过程中，开始并没有发现问题的根源。而是纠结在为什么debug模式能work而release不行。于是面向stackoverflow编程(Common reasons for bugs in release version not present in debug mode)。在试过了修改release模式下的配置，使得尽量与debug下一致（比如使用相同的Runtime Library，不启用优化等），无果。后来看到一个答案，大致意思是， 除了性能上的影响之外，debug和release模式配置无影响，debug working而release not working的原因很可能是bug其实一直都在，只是在debug下没有注意到一些细节，应该去分析代码。 再次去debug下分析代码，单步调试到vsprintf_s，发现格式化输出的字符串有一个变量明显不对(为什么开始没有注意到！！！)，类似上面的简单化代码的输出效果。定位到问题就好了，这个应该是变长参数传递的锅。再次面向stackoverflow编程(Trouble with va_list c++)。 you can’t portably extract std::string from variadic function arguments. Only trivial types are fully supported, and for strings you have to use char*. std::string is not trivial, because it has non-trivial constructor and destructor. Some compilers do support non-trivial types as arguments for such functions, but others do not, so you shouldn’t try this.The last, but not the least: variadic functions have no place in C++ world, even for assignments. 大致意思是在可变参数传递中只支持简单类型(trivial types), std::string传递会有问题。果不其然，查看call stack的调用关系，其中有一步，变长参数传递中，有一个参数直接传递的std::string类型。将其修改调用string的c_str()方法，问题解决。 这个问题解决了，心里有了另外的问题，变长参数是如何实现的呢？ c中的变长参数实现C语言中提供了变长函数声明，使用省略号...(ellipses)表示参数是可变的。通过位于stdarg.h头文件中定义的三个宏va_start, va_end, va_args和一个类型va_list来实现。先看个例子。 123456789101112131415161718192021222324#include &lt;stdarg.h&gt;int test_sum(int num, ...) &#123; va_list list; va_start(list, num); int i = 0; int sum = 0; while (i &lt; num) &#123; int value = va_arg(list, int); sum += value; ++i; &#125; va_end(list); return sum;&#125;int main()&#123; int sum = 0; sum =test_sum(1, 1); sum =test_sum(3, 1, 2, 3); sum =test_sum(3, 1, 2); sum =test_sum(4, 1, 2, 3, 4);&#125; 其中test_sum定义中第一个形参为后面的参数个数，第二个形参为可变参数。之所以需要第一个形参，是因为在while循环中去通过va_arg去取得参数。那么问题来了，函数的参数是如何传递的呢？ 可参考我的另外一边文章: 什么是调用惯例。在C中通过cdecl方式,参数是从右至左的顺序入栈。以test_sum(3,1,2,3)调用为例，参数入栈后结果示意。注意，栈是高地址向低地址增长的。 address stack high_addr 3 2 1 3 low_addr(top) ret_addr 下面来看下几个宏定义的声明和定义。摘自MSDN123456789101112131415161718type va_arg( va_list arg_ptr, type);void va_copy( va_list dest, va_list src); // (ISO C99 and later)void va_end( va_list arg_ptr);void va_start( va_list arg_ptr, prev_param); // (ANSI C89 and later)void va_start( arg_ptr); // (deprecated Pre-ANSI C89 standardization version) 定义摘录自stdarg.h和vadefs.h。12345678910typedef char* va_list;#define va_start __crt_va_start#define va_arg __crt_va_arg#define va_end __crt_va_end#define va_copy(destination, source) ((destination) = (source))#define __crt_va_start_a(ap, v) ((void)(ap = (va_list)_ADDRESSOF(v) + _INTSIZEOF(v)))#define __crt_va_arg(ap, t) (*(t*)((ap += _INTSIZEOF(t)) - _INTSIZEOF(t)))#define __crt_va_end(ap) ((void)(ap = (va_list)0)) 从源码可以看出： va_list只是char*的别称而已。 va_start的实现有使用了_INTSIZEOF, _ADDRESSOF两个宏定义。先不管，望文生义结合va_start的声明，可以推测va_start是通过可变参数中前一个参数的地址得到第一个可变参数地址。 va_arg通过va_list指针获取下一个参数的地址，并转化为相应的type va_end 将va_list置为空。 接下来看下_INTSIZEOF, _ADDRESSOF两个宏定义。1234567#define _INTSIZEOF(n) ((sizeof(n) + sizeof(int) - 1) &amp; ~(sizeof(int) - 1))#ifdef __cplusplus #define _ADDRESSOF(v) (&amp;const_cast&lt;char&amp;&gt;(reinterpret_cast&lt;const volatile char&amp;&gt;(v)))#else #define _ADDRESSOF(v) (&amp;(v))#endif _ADDRESSOF很明显就是取地址 _INTSIZEOF是对int类型所占字节数进行对齐。 举个例子1234567void test_INTSIZEOF() &#123; int size = 0; size = _INTSIZEOF("hello"); //8 size = _INTSIZEOF("h"); //4 size = sizeof("hello"); //6 size = sizeof("h"); //2&#125; 字符串结尾的’\0’字符也会被记为一个字节长度。由例子很容易理解_INTSIZEOF宏的作用。那么问题又来了，为什么要做这个字节对齐处理呢？简单的说，因为参数在入栈的时候就是这样存放的，更详细的理解，请参考wiki: Data structure alignment 其实变长参数我们遇到最多的应该是printf了。在格式化一些输出时，printf是如何知道参数的个数呢？在上面的演示中，我们是手动传递了参数个数，作为第一个参数的。 答案就在于格式化字符中。例如&quot;%s age is %d&quot;,通过这个格式化字符串，可以知道需要两个参数, 类型分别是”%s”与”%d”。 c++中变长参数实现根据stackoverflow上的回答 The last, but not the least: variadic functions have no place in C++ world, even for assignments. c语言中对变长参数的实现在C++中是有更modern的实现的.所以我有对C++中的实现做了一番总结.主要参考了《C++ PRIMER 5TH Edition》。以下基于C++ 11 标准。 使用initializer_list对于可变参数是同一类型，可以使用C++11新增的一个类型initialize_list。举例如下：123456789101112131415#include &lt;initializer_list&gt;int sum_initializer_list(std::initializer_list&lt;int&gt; list) &#123; auto beg = list.begin(); auto sum = 0; for (; beg != list.end(); ++beg) &#123; sum += *beg; &#125; return sum;&#125;void test_sum_initilizer_list() &#123; sum_initializer_list(&#123;1,2,3&#125;); sum_initializer_list(&#123;1,2,3,4&#125;);&#125; 使用可变参数模板template&lt;typename… Args&gt;在C++中可变参数被称为参数包(parameter package), 存在两种：模板参数包，表示零个或多个模板参数；函数参数包，表示零个或多个函数参数。举例如下：123//Args 是模板参数包，args是函数参数包template&lt;typename T, typename... Args&gt;void foo(const T&amp; t, const Args&amp;... args); 可变参数函数通常是递归的。第一部调用处理包中的第一个实参，然后用剩余实参调用自身。举个例子：123456789101112131415template&lt;typename T&gt;void test_vaargs(const T&amp; t) &#123; std::cout &lt;&lt; t &lt;&lt; std::endl;&#125;template&lt;typename T, typename... args&gt;void test_vaargs(const T&amp; t, const args&amp;... param) &#123; std::cout &lt;&lt; "sizeof...(args): " &lt;&lt; sizeof...(args) &lt;&lt; std::endl; std::cout &lt;&lt; "sizeof...(param): " &lt;&lt;sizeof...(param) &lt;&lt; std::endl; std::cout &lt;&lt; "print: " &lt;&lt; t &lt;&lt; std::endl; test_vaargs(param...);&#125;//calltest_vaargs(1, 2, "robert"); 当我们需要知道包中有多少元素时，可以使用sizeof...运算符。对于一个参数包，在模板实例化的时候，是对包里的每一个元素进行扩展。包扩展（package expend）是对省略号前面的pattern进行扩展。比如上面的foo声明。 12345678//declarationtemplate&lt;typename T, typename... Args&gt;void foo(const T&amp; t, const Args&amp;... args);//teststd::string str("robert"); int a=1; double b=0.1;foo(a, b, str);foo(b, "robert", a); 编译器通过类型推断，分别实例化生成对应的声明：123//参数包const Args&amp;... 被扩展，可以理解为此时的pattern为const Args&amp;void foo(const int&amp;, const double&amp;, const std::string&amp;); //注意string类型推断为stringvoid foo(const double&amp;, const char[7]&amp;, const int&amp;); //字符串字面量类型推断为const char[len]&amp; 心得在troobleshooting的过程中还是要多注意细节，多观察一些预期的变量是否正确。当然了，c/c++的知识还要加强啊。]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[awesome-bits]]></title>
    <url>%2F2018%2F09%2F28%2Fawesome-bits%2F</url>
    <content type="text"><![CDATA[转载自github awesome-bits A curated list of awesome bitwise operations and tricks Maintainer - Keon KimPlease feel free to pull requests IntegersSet nth bit1x | (1&lt;&lt;n) Unset nth bit 1x &amp; ~(1&lt;&lt;n) Toggle nth bit1x ^ (1&lt;&lt;n) Round up to the next power of two12345678unsigned int v; //only works if v is 32 bitv--;v |= v &gt;&gt; 1;v |= v &gt;&gt; 2;v |= v &gt;&gt; 4;v |= v &gt;&gt; 8;v |= v &gt;&gt; 16;v++; Get the maximum integer1234int maxInt = ~(1 &lt;&lt; 31);int maxInt = (1 &lt;&lt; 31) - 1;int maxInt = (1 &lt;&lt; -1) - 1;int maxInt = -1u &gt;&gt; 1; Get the minimum integer12int minInt = 1 &lt;&lt; 31;int minInt = 1 &lt;&lt; -1; Get the maximum long1long maxLong = ((long)1 &lt;&lt; 127) - 1; Multiply by 21n &lt;&lt; 1; // n*2 Divide by 21n &gt;&gt; 1; // n/2 Multiply by the mth power of 21n &lt;&lt; m; Divide by the mth power of 21n &gt;&gt; m; Check Equality This is 35% faster in Javascript12(a^b) == 0; // a == b!(a^b) // use in an if Check if a number is odd1(n &amp; 1) == 1; Exchange (swap) two values1234567//version 1a ^= b;b ^= a;a ^= b;//version 2a = a ^ b ^ (b = a) Get the absolute value12345//version 1x &lt; 0 ? -x : x;//version 2(x ^ (x &gt;&gt; 31)) - (x &gt;&gt; 31); Get the max of two values1b &amp; ((a-b) &gt;&gt; 31) | a &amp; (~(a-b) &gt;&gt; 31); Get the min of two values1a &amp; ((a-b) &gt;&gt; 31) | b &amp; (~(a-b) &gt;&gt; 31); Check whether both numbers have the same sign1(x ^ y) &gt;= 0; Flip the sign12i = ~i + 1; // ori = (i ^ -1) + 1; // i = -i Calculate 2n11 &lt;&lt; n; Whether a number is power of 21n &gt; 0 &amp;&amp; (n &amp; (n - 1)) == 0; Modulo 2n against m1m &amp; ((1 &lt;&lt; n) - 1); Get the average12(x + y) &gt;&gt; 1;((x ^ y) &gt;&gt; 1) + (x &amp; y); Get the mth bit of n (from low to high)1(n &gt;&gt; (m-1)) &amp; 1; Set the mth bit of n to 0 (from low to high)1n &amp; ~(1 &lt;&lt; (m-1)); Check if nth bit is set12345if (x &amp; (1&lt;&lt;n)) &#123; n-th bit is set&#125; else &#123; n-th bit is not set&#125; Isolate (extract) the right-most 1 bit1x &amp; (-x) Isolate (extract) the right-most 0 bit1~x &amp; (x+1) Set the right-most 0 bit to 11x | (x+1) Set the right-most 1 bit to 01x &amp; (x-1) n + 11-~n n - 11~-n Get the negative value of a number12~n + 1;(n ^ -1) + 1; if (x == a) x = b; if (x == b) x = a;1x = a ^ b ^ x; Swap Adjacent bits1((n &amp; 10101010) &gt;&gt; 1) | ((n &amp; 01010101) &lt;&lt; 1) Different rightmost bit of numbers m &amp; n1(n^m)&amp;-(n^m) // returns 2^x where x is the position of the different bit (0 based) Common rightmost bit of numbers m &amp; n1~(n^m)&amp;(n^m)+1 // returns 2^x where x is the position of the common bit (0 based) FloatsThese are techniques inspired by the fast inverse square root method. Most of theseare original. Turn a float into a bit-array (unsigned uint32_t)12345#include &lt;stdint.h&gt;typedef union &#123;float flt; uint32_t bits&#125; lens_t;uint32_t f2i(float x) &#123; return ((lens_t) &#123;.flt = x&#125;).bits;&#125; Caveat: Type pruning via unions is undefined in C++; use std::memcpy instead. Turn a bit-array back into a float123float i2f(uint32_t x) &#123; return ((lens_t) &#123;.bits = x&#125;).flt;&#125; Approximate the bit-array of a positive float using frexp frexp gives the 2n decomposition of a number, so that man, exp = frexp(x) means that man 2exp = x and 0.5 &lt;= man &lt; 1.*12man, exp = frexp(x);return (uint32_t)((2 * man + exp + 125) * 0x800000); Caveat: This will have at most 2-16 relative error, since man + 125 clobbers the last 8 bits, saving the first 16 bits of your mantissa. Fast Inverse Square Root1return i2f(0x5f3759df - f2i(x) / 2); Caveat: We’re using the i2f and the f2i functions from above instead. See this Wikipedia article for reference. Fast nth Root of positive numbers via Infinite Series123456789float root(float x, int n) &#123;#DEFINE MAN_MASK 0x7fffff#DEFINE EXP_MASK 0x7f800000#DEFINE EXP_BIAS 0x3f800000 uint32_t bits = f2i(x); uint32_t man = bits &amp; MAN_MASK; uint32_t exp = (bits &amp; EXP_MASK) - EXP_BIAS; return i2f((man + man / n) | ((EXP_BIAS + exp / n) &amp; EXP_MASK));&#125; See this blog post regarding the derivation. Fast Arbitrary Power1return i2f((1 - exp) * (0x3f800000 - 0x5c416) + f2i(x) * exp) Caveat: The 0x5c416 bias is given to center the method. If you plug in exp = -0.5, this gives the 0x5f3759df magic constant of the fast inverse root method. See these set of slides for a derivation of this method. Fast Geometric Mean The geometric mean of a set of n numbers is the nth root of theirproduct. 123456789#include &lt;stddef.h&gt;float geometric_mean(float* list, size_t length) &#123; // Effectively, find the average of map(f2i, list) uint32_t accumulator = 0; for (size_t i = 0; i &lt; length; i++) &#123; accumulator += f2i(list[i]); &#125; return i2f(accumulator / n);&#125; See here for its derivation. Fast Natural Logarithm 123#DEFINE EPSILON 1.1920928955078125e-07#DEFINE LOG2 0.6931471805599453return (f2i(x) - (0x3f800000 - 0x66774)) * EPSILON * LOG2 Caveat: The bias term of 0x66774 is meant to center the method. We multiply by ln(2) at the end because the rest of the method computes the log2(x) function. See here for its derivation. Fast Natural Exp 1return i2f(0x3f800000 + (uint32_t)(x * (0x800000 + 0x38aa22))) Caveat: The bias term of 0x38aa22 here corresponds to a multiplicative scaling of the base. In particular, itcorresponds to z such that 2z = e See here for its derivation. StringsConvert letter to lowercase:123OR by space =&gt; (x | &apos; &apos;)Result is always lowercase even if letter is already lowercaseeg. (&apos;a&apos; | &apos; &apos;) =&gt; &apos;a&apos; ; (&apos;A&apos; | &apos; &apos;) =&gt; &apos;a&apos; Convert letter to uppercase:123AND by underline =&gt; (x &amp; &apos;_&apos;)Result is always uppercase even if letter is already uppercaseeg. (&apos;a&apos; &amp; &apos;_&apos;) =&gt; &apos;A&apos; ; (&apos;A&apos; &amp; &apos;_&apos;) =&gt; &apos;A&apos; Invert letter’s case:12XOR by space =&gt; (x ^ &apos; &apos;)eg. (&apos;a&apos; ^ &apos; &apos;) =&gt; &apos;A&apos; ; (&apos;A&apos; ^ &apos; &apos;) =&gt; &apos;a&apos; Letter’s position in alphabet:123AND by chr(31)/binary(&apos;11111&apos;)/(hex(&apos;1F&apos;) =&gt; (x &amp; &quot;\x1F&quot;)Result is in 1..26 range, letter case is not importanteg. (&apos;a&apos; &amp; &quot;\x1F&quot;) =&gt; 1 ; (&apos;B&apos; &amp; &quot;\x1F&quot;) =&gt; 2 Get letter’s position in alphabet (for Uppercase letters only):12AND by ? =&gt; (x &amp; &apos;?&apos;) or XOR by @ =&gt; (x ^ &apos;@&apos;)eg. (&apos;C&apos; &amp; &apos;?&apos;) =&gt; 3 ; (&apos;Z&apos; ^ &apos;@&apos;) =&gt; 26 Get letter’s position in alphabet (for lowercase letters only):12XOR by backtick/chr(96)/binary(&apos;1100000&apos;)/hex(&apos;60&apos;) =&gt; (x ^ &apos;`&apos;)eg. (&apos;d&apos; ^ &apos;`&apos;) =&gt; 4 ; (&apos;x&apos; ^ &apos;`&apos;) =&gt; 24 MiscellaneousFast color conversion from R5G5B5 to R8G8B8 pixel format using shifts123R8 = (R5 &lt;&lt; 3) | (R5 &gt;&gt; 2)G8 = (R5 &lt;&lt; 3) | (R5 &gt;&gt; 2)B8 = (R5 &lt;&lt; 3) | (R5 &gt;&gt; 2) Note: using anything other than the English letters will produce garbage results Additional Resources Bit Twiddling Hacks Floating Point Hacks Hacker’s Delight The Bit Twiddler]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lua: os.execute vs os.popen]]></title>
    <url>%2F2018%2F09%2F13%2Flua-os-execute-vs-os-popen%2F</url>
    <content type="text"><![CDATA[最近遇到一个lua上问题：在一个c++工程中(进程A)，执行lua脚本，由该脚本去启动一个另外的进程B。在lua脚本执行完毕时，在C++工程中调用lua_close来退出lua环境时，线程stuck在该函数中。 找到问题使用Process Explorer查看C++工程的进程，发现进程B属于进程A的子进程。所以问题很明显了，因为子进程B未退出，所以进程A无法退出，调用lua_close时lua 解析器等待子进程退出，造成stuck问题。 下面来看下lua reference(lua 5.1)中提供的启动外部程序的API 查看APIos.execute This function is equivalent to the C function system. It passes command to be executed by an operating system shell. It returns a status code, which is system-dependent. If command is absent, then it returns nonzero if a shell is available and zero otherwise. os.execute只是将command传递给shell。查看lua源码(lua 5.2) 12345678910static int os_execute (lua_State *L) &#123; const char *cmd = luaL_optstring(L, 1, NULL); int stat = system(cmd); if (cmd != NULL) return luaL_execresult(L, stat); else &#123; lua_pushboolean(L, stat); /* true if there is a shell */ return 1; &#125;&#125; 可以看到直接调用的c标准库中的system。 io.popen Starts program prog in a separated process and returns a file handle that you can use to read data from this program (if mode is &quot;r&quot;, the default) or to write data to this program (if mode is &quot;w&quot;). This function is system dependent and is not available on all platforms. 看功能说明可以知道，io.popen可以创建一个进程，并可以往该进程的IO读写数据。 io.popen源码如下： 12345678static int io_popen (lua_State *L) &#123; const char *filename = luaL_checkstring(L, 1); const char *mode = luaL_optstring(L, 2, "r"); LStream *p = newprefile(L); p-&gt;f = lua_popen(L, filename, mode); p-&gt;closef = &amp;io_pclose; return (p-&gt;f == NULL) ? luaL_fileresult(L, 0, filename) : 1;&#125; lua_popen是一个宏定义，最终调用c标准库的popen函数，该函数用来创建一个calling program与command的pipe，说白了就是创建一个子进程。 结论在lua脚本中将启用外部程序的的API由io.popen换成os.execute。]]></content>
  </entry>
  <entry>
    <title><![CDATA[call c function in lua]]></title>
    <url>%2F2018%2F09%2F11%2Fcall-c-function-in-lua%2F</url>
    <content type="text"><![CDATA[Code in here. This project use Lua5.2.4, visual studio 2017. You can find the lua binary file located in TestLua/luafolder. To create a C library and export function to lua. Follow this steps: Define your function with following signature 1typedef int (*lua_CFunction)(lua_State* L) example 1int myadd(lua_State* L); Construct a luaL_Reg array 1234const struct luaL_Reg mylib[] =&#123; &#123;"myadd", myadd&#125;, &#123;NULL, NULL&#125;&#125; and luaL_Reg is defined in lauxlib.h 1234typedef struct luaL_Reg &#123; const char *name; lua_CFunction func;&#125; luaL_Reg; So the first is the function name which will be used in lua, and the second is the function address in c library. Note that the last element in this array must be {NULL, NULL}. Define a luaopen_DLLName function 1234int luaopen_TestLua(lua_State *L)&#123; luaL_newlib(L, mylib); return 1;&#125; This function name should be match pattern luaopen_dllname, dllname is your dll’s name Final step, Use this c library in your lua code. 1234-- test.lualocal t = require "TestLua"print(t.myadd(1, 2)) when you run this test.lua script in lua environment, it should output correct answer. Remerber to use same lua exe version to run this script. Note that the module name is case sensitive because internally lua interpreter will call luaopen_Modulename function which exported by your c library. Another note, you should export luaopen_Modulename method and use extern &quot;C&quot;to modifier all function to make it follow the C standard if you are using c++.]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是调用惯例]]></title>
    <url>%2F2018%2F09%2F05%2Fwhat-is-calling-convention%2F</url>
    <content type="text"><![CDATA[调用惯例（Calling Convention）是指函数调用时发生的一些约定。wikipedia定义如下： a calling convention is an implementation-level (low-level) scheme for how subroutines receive parameters from their caller and how they return a result. Differences in various implementations include where parameters, return values, return addresses and scope links are placed, and how the tasks of preparing for a function call and restoring the environment afterward are divided between the caller and the callee. 经常在一些代码中看到： 12void __stdcall foo(int a, int b);void __cdelc bar(double a, double b); 或者在c#中利用P/Invoke一些native代码时： 12[DllImport("User32.dll", EntryPoint = "SetForegroundWindow", CallingConvention = CallingConvention.StdCall)]public static extern bool SetForegroundWindow(IntPtr hWnd); 代码中的__stdcall和__cdecl即调用惯例。在csharp中P/Invoke时默认的CallingConvention是StdCall。 具体指什么一般来说，调用惯例一般会规定以下的内容： 函数参数的传递顺序和方式 函数参数的传递可以有很多种方式，最常见的一种是通过栈传递。函数的调用方将参数压入栈中，函数自己再从栈中将参数取出。对于有多个函数参数的函数，调用惯例要规定函数调用将参数压栈的顺序：是从左到右还是从右到左。有些调用惯例还允许使用寄存器传递参数，以提高性能。 栈的维护方式 在函数将参数压栈之后，函数体会被调用，此后需要将被压入栈中的参数全部弹出，以使得栈在函数调用前后保持一致。这个弹出的工作可以由函数的调用方来完成，也可以由函数本身来完成。 cdecl由函数调用方来完成，stdcall由函数本身来完成。在WIN32 API中，除了变长的参数的函数之后，都是用的调用管理是stdcall。因为变长的函数参数，函数本身并不知道参数的个数，所以只能由函数调用方来处理出栈。 名字修饰(name-mangling)的策略 为了链接的时候对调用管理进行区分，调用惯例要对函数本身的名字进行修饰，不同的调用惯例有不同的名字修饰策略。 cdecl采用的名字修饰策略是： 下划线+函数名 stdcall: 下划线+函数名+@+参数的字节数，如函数int func(int a, double b)的修饰名为_func@12 《程序员的自我修养–链接，装载与库》一书中有详细的解释（这本书是对底层的一些概念解释的很清楚，推荐阅读）。摘录一图如下：]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos 配置Shadowsocks备忘]]></title>
    <url>%2F2018%2F08%2F28%2Finstall-shadowsocks-on-centos-and-enable-bbr%2F</url>
    <content type="text"><![CDATA[本文作为一个centos配置shadowsocks的备忘。 前言一年前买的vps快到期了，临到续费的时候想起来能否开启bbr，试过google cloud之后，开启bbr之前与之后的效果提升了十倍。按照网上的教程操作了一波，在开启bbr的时候，由于centos的glibc版本太低，需要升级，无奈在centos 6上升级不成功。本来是通过KCPTun工具的来加速，对比了bbr的加速效果，觉得开启bbr的效果更开启KCP效果差不多。索性直接将vps的系统重装了一遍。本文是在centos 7 64位版本的实验的。 一键安装脚本安装使用root登录，运行以下命令： 123wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.shchmod +x shadowsocks-all.sh./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log 安装过程会提示输入密码，端口等信息。 安装完毕之后，如果想修改参数，可以使用vim打开配置文件: 1vim /etc/shadowsocks/config.json 会看到刚才的配置信息: 12345678&#123; "server":"0.0.0.0", "server_port": your_port, "local_port":1080, "password":"your_passwd", "method":"rc4-md5", "timeout":300&#125; 对应修改即可。 卸载找到上一步安装的脚本路径： 1./shadowsocks-all.sh uninstall 启动脚本启动脚本后面的参数含义，从左至右依次为：启动，停止，重启，查看状态。 1/etc/init.d/shadowsocks start | stop | restart | status 开启bbr对于不同虚拟架构的vps，脚本不一样。因此首先需要知道vps是基于什么架构的。 12yum install virt-whatvirt-what 如果输出是KVM，则是KVM架构，如果是openvz，则是openvz架构。 去年貌似openvz还不支持开启bbr，正好今天搜到一篇文章，openvz架构的vps也可以开启bbr了。由于我的vps是openvz架构的，所以KVM的未作测试。 KVM安装 123wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.shchmod +x bbr.sh./bbr.sh 验证 12345uname -rsysctl net.ipv4.tcp_available_congestion_controlsysctl net.ipv4.tcp_congestion_controlsysctl net.core.default_qdisclsmod | grep bbr OpenVZ安装 123wget https://raw.githubusercontent.com/kuoruan/shell-scripts/master/ovz-bbr/ovz-bbr-installer.sh chmod +x ovz-bbr-installer.sh ./ovz-bbr-installer.sh 实测脚本执行完毕，bbr开启成功。如果你的vps是centos 6版本，会出现执行脚本提示glibc版本过低，可以升级glibc版本，但是我升级失败，建议vps安装centos 7版本。 验证方法跟上面一致。 1sysctl net.ipv4.tcp_available_congestion_control 返回值一般为：net.ipv4.tcp_available_congestion_control = bbr cubic reno 1sysctl net.ipv4.tcp_congestion_control 返回值一般为：net.ipv4.tcp_congestion_control = bbr 1sysctl net.core.default_qdisc 返回值一般为：net.core.default_qdisc = fq 1lsmod | grep bbr 返回值有 tcp_bbr 模块即说明bbr已启动。 参考链接 How to determine Linux guest VM virtualization technology Install Shadowsocks Enable Google BBR ok]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从BackgroundWorker说起]]></title>
    <url>%2F2018%2F08%2F13%2Fasync-operation-about-backgroundworker%2F</url>
    <content type="text"><![CDATA[BackgroundWorker用于在另一个线程里执行一些操作。以前经常在UI thread启动一个workder对象，去完成一个耗时操作。然后在其ProgressChanged事件的EventHandler中去更新UI. 在.net 中，创建UI control和access的线程必须是同一个线程，否则操作是非法的。在文档中可以查到在ProgressChanged的EventHandler中是可以安全的更新UI的。那么在BackgroundWorker中是如何做的呢？ 首先，BackgroundWorker的DoWork的EventHandler肯定需要在另外的线程中运行，而要想在安全的更新UI，必须要Invoke到UI thread。所以一开始我觉得应该是在BackgroundWorker中调用了Invoke操作。查看其reference code: 123456789101112131415161718192021222324252627private readonly WorkerThreadStartDelegate threadStart; private readonly SendOrPostCallback operationCompleted; private readonly SendOrPostCallback progressReporter; public BackgroundWorker() &#123; threadStart = new WorkerThreadStartDelegate(WorkerThreadStart); operationCompleted = new SendOrPostCallback(AsyncOperationCompleted); progressReporter = new SendOrPostCallback(ProgressReporter); &#125;public void RunWorkerAsync(object argument) &#123; if (isRunning) &#123; throw new InvalidOperationException(SR.GetString(SR.BackgroundWorker_WorkerAlreadyRunning)); &#125; isRunning = true; cancellationPending = false; asyncOperation = AsyncOperationManager.CreateOperation(null); threadStart.BeginInvoke(argument, null, null); &#125; 可以看到在BackgroundWorker中是通过delegate的BeginInvoke来实现异步操作的。所以Backgroundworker适用于执行一些轻量级的小任务。 上面代码中创建了一个AsyncOperation对象，在BackgroundWorker中ReportProgress就是使用该对象调用Post方法将progressReporter传递出去。progressReprorter会触发ProgressChanged事件。 123456789101112131415161718public void ReportProgress(int percentProgress, object userState) &#123; if (!WorkerReportsProgress) &#123; throw new InvalidOperationException(SR.GetString(SR.BackgroundWorker_WorkerDoesntReportProgress)); &#125; ProgressChangedEventArgs args = new ProgressChangedEventArgs(percentProgress, userState); if (asyncOperation != null) &#123; asyncOperation.Post(progressReporter, args); &#125; else &#123; progressReporter(args); &#125; &#125; 进入到AsyncOperationManager源代码中： 123456789101112public static AsyncOperation CreateOperation(object userSuppliedState) &#123; return AsyncOperation.CreateOperation(userSuppliedState, SynchronizationContext); &#125;public static SynchronizationContext SynchronizationContext &#123; get &#123; if (SynchronizationContext.Current == null) &#123; SynchronizationContext.SetSynchronizationContext(new SynchronizationContext()); &#125; return SynchronizationContext.Current; &#125; 这里面使用到了一个对象SynchronizationContext, 同步上下文对象。看起来上面的调用的Post方法就是调用SynchronizationContext对象的Post方法: 1234public virtual void Post(SendOrPostCallback d, Object state) &#123; ThreadPool.QueueUserWorkItem(new WaitCallback(d), state); &#125; 是直接利用线程池来执行progressReporter 这个callback。但是我们注意到这个方法是一个virtual方法，而且在AsyncOperation中获取SynchronizationContext对象先判断SynchronizationContext.Current是否为null，如果是则新建一个SynchronizationContext对象，这种情况下是直接调用virtual方法的，也即使用线程池来执行callback。否则使用SynchronizationContext.Current对象来执行Post。那么这个Current对象又是什么呢？ 查阅了一些资料，特别是MSDN上的这篇博客. SynchronizationContext is just an abstraction, one that represents a particular environment you want to do some work in. As an example of such an environment, Windows Forms apps have a UI thread (while it’s possible for there to be multiple, for the purposes of this discussion it doesn’t matter), which is where any work that needs to use UI controls needs to happen. For cases where you’re running code on a ThreadPool thread and you need to marshal work back to the UI so that this work can muck with UI controls, Windows Forms provides the Control.BeginInvoke method. You give a delegate to a Control’s BeginInvoke method, and that delegate will be invoked back on the thread with which that control is associated. SynchoronizationContext提供了具体上下文的抽象，提供了Post和Send方法接口，比如在一个worker thread里，你想update UI，则必须marshel到UI thread。 在windows form中我们使用control.BeginInvoke在wpf中我们使用Dispatcher.BeginInvoke 那么SynchronizationContext就是对这个操作做了统一的封装。提供了一个virtual的Post方法。 当实现类为WindowsFormSynchronizationContext （即在windowsfrom中）使用control.BeginInvoke 当实现类为DispatcherSynchronizationContext（即在wpf中）使用Dispatcher.BeginInvoke SynchronizationContext还提供一个同步的Send方法。在windows form中具体实现是： control.Invoke在wpf中具体实现是： Dispatcher.Invoke 我们找到WindowsFormSynchronizationContext的源代码中的Post方法： 1234567public override void Post(SendOrPostCallback d, Object state) &#123; Debug.Assert(controlToSendTo != null, &quot;Should always have the marshaling control by this point&quot;); if (controlToSendTo != null) &#123; controlToSendTo.BeginInvoke(d, new object[] &#123; state &#125;); &#125; &#125; 可以看到确实使用control.BeginInvoke来将操作marshel到UI thread。 关于SynchronizationContext，还可以参考这篇文章: It’s All About the SynchronizationContext]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>csharp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置git使用socks5代理]]></title>
    <url>%2F2018%2F08%2F08%2Fgit-over-proxy%2F</url>
    <content type="text"><![CDATA[最近github网站经常抽风（当然是你懂的的原因），网页上通过配置科学上网之后有所改善。但是在使用git clone时还是经常性失败。在网上找了一波解决方案，发现配置下git代理，很简单，效果立竿见影。 以下环境为windows 7，console是cmder，直接使用git bash也可以。首先你需要一个代理地址，建议bangwagong自己购买一个云主机，自建服务。本地使用ss做转发。以下127.0.0.1:1080即为本地1080监听地址。 配置HTTP proxy1git config --global http.https://github.com.proxy socks5://127.0.0.1:1080 配置之后可以查看下是否成功 12git config --global --get http.https://github.com.proxysocks5://127.0.0.1:1080 或者在编辑器中查看 1git config --global -e 配置SSH proxy上面配置了http的代理之后，我们使用http/https协议来clone repo的时候已经有效了，但是如果想在ssh也走代理的话，还需要以下配置。 在windows users 用户目录下生成config文件，如在C:\Users\your_user_name\.ssh 目录下，找到config文件，如果没有新建一个，写入如下内容： 12Host github.comProxyCommand connect -H 127.0.0.1:1080 %h 22 配置完毕之后，在clone一个repo试试，效果拔群啊。 参考链接 from github]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于git stash的使用小结]]></title>
    <url>%2F2018%2F08%2F04%2Ftry-not-to-use-git-stash%2F</url>
    <content type="text"><![CDATA[以前使用svn作为版本控制时，每个branch都在本地有一份代码，这样可以同时打开好多个分支。在一个分支加feature，可以很方便的另一个分支上修bug。在切换为git之后，默认所有branch都在本地只有一份copy，有的时候需要临时切换下分支，但不想提交还未完工的代码，会使用到git stash来暂存下代码。然后bug修改之后，再使用git stash pop将暂存的代码恢复过来。 但是在使用了几次git stach之后，经常会遇到一些问题：忘记pop或者pop到了错误的分支导致冲突。本文结合再v2ex上的一些回答，建议最好不要使用git stash，直接通过commit然后最后再通过git reset来回到原来的commit点，完成之后重新commit。 使用git stashstash暂时将你做的修改保存起来，然后恢复到未修改的状态。这样可以去做其他事，比如你已经修改了一些东西，但是现在还不能提交，但是要去修改其他功能 The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy git stash 将当前工作保存 git stash show -p stash@{1} 显示哪些文件被修改。如果不指定某个stash，则显示最近的一次stach的修改情况 git stash list 查看有哪些stash，分别位于哪个分支上 git stash pop 将暂存的修改恢复到本地中并删掉该stash，注意在git stash pop之前先确认下stash是在哪个分支的,使用git stash list来查看 git stash apply 与git stash pop的区别是，apply不会将stash删除 git stash clear 删除所有的stash entry， 不可恢复 git stash drop 删除某一个stash entry，如果不给出具体stash，则删除最新的一个 使用git commit假设遇到需要暂时保存的情况可以选择将修改记录直接commit，commit message可以写WIP commit（work in progress）。这样在完成其他工作之后，通过git reset –mixed 可以恢复到commit时的状态，然后完成feature，重新填写commit message 12345678//you are adding a feature, then a bug come in ,you have to fix buggit add .git commit -m "WIP commit: i will be back"...//after the bug, xxxxxxxxxxx is the WIP commit SHA-1git reset --mixed xxxxxxxxxxx//THEN you finish the feature, and remend the commit messagegit commit -m "i am done" git worktree如果需要同时checkout多个branch到本地，可以使用git worktree，这个命令与git clone多份代码的区别是，使用git worktree可以使得多个worktree之间有联系，比如可以直接将其他worktree中merge过来。 git worktree可以支持不同的worktree attach到同一个repo上,方便同时查看两个分支的代码 . A git repository can support multiple working trees, allowing you to check out more than one branch at a time. With git worktree add a new working tree is associated with the repository. This new working tree is called a “linked working tree“ as opposed to the “main working tree“ prepared by “git init” or “git clone”. A repository has one main working tree (if it’s not a bare repository) and zero or more linked working trees. When you are done with a linked working tree, remove it with git worktree remove. git worktree add ../new_directory feature_branch 添加worktree git worktree list 列出所有worktree git worktree move 移动worktree到新路径 git worktree remove [-f] 移除worktree，只有clean的worktree才可以被删除掉 git workflow网上推崇的workflow，具体参见这个blog]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cpp core guidelines]]></title>
    <url>%2F2018%2F07%2F13%2Fcpp-core-guidelines%2F</url>
    <content type="text"><![CDATA[在github上看到的一片文章，转载到此。 C++ Core GuidelinesApril 16, 2018 Editors: Bjarne Stroustrup Herb Sutter This is a living document under continuous improvement.Had it been an open-source (code) project, this would have been release 0.8.Copying, use, modification, and creation of derivative works from this project is licensed under an MIT-style license.Contributing to this project requires agreeing to a Contributor License. See the accompanying LICENSE file for details.We make this project available to “friendly users” to use, copy, modify, and derive from, hoping for constructive input. Comments and suggestions for improvements are most welcome.We plan to modify and extend this document as our understanding improves and the language and the set of available libraries improve.When commenting, please note the introduction that outlines our aims and general approach.The list of contributors is here. Problems: The sets of rules have not been completely checked for completeness, consistency, or enforceability. Triple question marks (???) mark known missing information Update reference sections; many pre-C++11 sources are too old. For a more-or-less up-to-date to-do list see: To-do: Unclassified proto-rules You can read an explanation of the scope and structure of this Guide or just jump straight in: In: Introduction P: Philosophy I: Interfaces F: Functions C: Classes and class hierarchies Enum: Enumerations R: Resource management ES: Expressions and statements Per: Performance CP: Concurrency and parallelism E: Error handling Con: Constants and immutability T: Templates and generic programming CPL: C-style programming SF: Source files SL: The Standard Library Supporting sections: A: Architectural ideas NR: Non-Rules and myths RF: References Pro: Profiles GSL: Guideline support library NL: Naming and layout rules FAQ: Answers to frequently asked questions Appendix A: Libraries Appendix B: Modernizing code Appendix C: Discussion Appendix D: Supporting tools Glossary To-do: Unclassified proto-rules You can sample rules for specific language features: assignment:regular types –prefer initialization –copy –move –other operations –default class:data –invariant –members –helpers –concrete types –ctors, =, and dtors –hierarchy –operators concept:rules –in generic programming –template arguments –semantics constructor:invariant –establish invariant –throw –default –not needed –explicit –delegating –virtual derived class:when to use –as interface –destructors –copy –getters and setters –multiple inheritance –overloading –slicing –dynamic_cast destructor:and constructors –when needed? –may not fail exception:errors –throw –for errors only –noexcept –minimize try –what if no exceptions? for:range-for and for –for and while –for-initializer –empty body –loop variable –loop variable type ??? function:naming –single operation –no throw –arguments –argument passing –multiple return values –pointers –lambdas inline:small functions –in headers initialization:always –prefer {} –lambdas –in-class initializers –class members –factory functions lambda expression:when to use operator:conventional –avoid conversion operators –and lambdas public, private, and protected:information hiding –consistency –protected static_assert:compile-time checking –and concepts struct:for organizing data –use if no invariant –no private members template:abstraction –containers –concepts unsigned:and signed –bit manipulation virtual:interfaces –not virtual –destructor –never fail You can look at design concepts used to express the rules: assertion: ??? error: ??? exception: exception guarantee (???) failure: ??? invariant: ??? leak: ??? library: ??? precondition: ??? postcondition: ??? resource: ??? AbstractThis document is a set of guidelines for using C++ well.The aim of this document is to help people to use modern C++ effectively.By “modern C++” we mean C++17, C++14, and C++11.In other words, what would you like your code to look like in 5 years’ time, given that you can start now? In 10 years’ time? The guidelines are focused on relatively high-level issues, such as interfaces, resource management, memory management, and concurrency.Such rules affect application architecture and library design.Following the rules will lead to code that is statically type safe, has no resource leaks, and catches many more programming logic errors than is common in code today.And it will run fast – you can afford to do things right. We are less concerned with low-level issues, such as naming conventions and indentation style.However, no topic that can help a programmer is out of bounds. Our initial set of rules emphasizes safety (of various forms) and simplicity.They may very well be too strict.We expect to have to introduce more exceptions to better accommodate real-world needs.We also need more rules. You will find some of the rules contrary to your expectations or even contrary to your experience.If we haven’t suggested you change your coding style in any way, we have failed!Please try to verify or disprove rules!In particular, we’d really like to have some of our rules backed up with measurements or better examples. You will find some of the rules obvious or even trivial.Please remember that one purpose of a guideline is to help someone who is less experienced or coming from a different background or language to get up to speed. Many of the rules are designed to be supported by an analysis tool.Violations of rules will be flagged with references (or links) to the relevant rule.We do not expect you to memorize all the rules before trying to write code.One way of thinking about these guidelines is as a specification for tools that happens to be readable by humans. The rules are meant for gradual introduction into a code base.We plan to build tools for that and hope others will too. Comments and suggestions for improvements are most welcome.We plan to modify and extend this document as our understanding improves and the language and the set of available libraries improve. In: IntroductionThis is a set of core guidelines for modern C++, C++17, C++14, and C++11, taking likely future enhancements and ISO Technical Specifications (TSs) into account.The aim is to help C++ programmers to write simpler, more efficient, more maintainable code. Introduction summary: In.target: Target readership In.aims: Aims In.not: Non-aims In.force: Enforcement In.struct: The structure of this document In.sec: Major sections In.target: Target readershipAll C++ programmers. This includes programmers who might consider C. In.aims: AimsThe purpose of this document is to help developers to adopt modern C++ (C++17, C++14, and C++11) and to achieve a more uniform style across code bases. We do not suffer the delusion that every one of these rules can be effectively applied to every code base. Upgrading old systems is hard. However, we do believe that a program that uses a rule is less error-prone and more maintainable than one that does not. Often, rules also lead to faster/easier initial development.As far as we can tell, these rules lead to code that performs as well or better than older, more conventional techniques; they are meant to follow the zero-overhead principle (“what you don’t use, you don’t pay for” or “when you use an abstraction mechanism appropriately, you get at least as good performance as if you had handcoded using lower-level language constructs”).Consider these rules ideals for new code, opportunities to exploit when working on older code, and try to approximate these ideals as closely as feasible.Remember: In.0: Don’t panic!Take the time to understand the implications of a guideline rule on your program. These guidelines are designed according to the “subset of superset” principle (Stroustrup05).They do not simply define a subset of C++ to be used (for reliability, safety, performance, or whatever).Instead, they strongly recommend the use of a few simple “extensions” (library components)that make the use of the most error-prone features of C++ redundant, so that they can be banned (in our set of rules). The rules emphasize static type safety and resource safety.For that reason, they emphasize possibilities for range checking, for avoiding dereferencing nullptr, for avoiding dangling pointers, and the systematic use of exceptions (via RAII).Partly to achieve that and partly to minimize obscure code as a source of errors, the rules also emphasize simplicity and the hiding of necessary complexity behind well-specified interfaces. Many of the rules are prescriptive.We are uncomfortable with rules that simply state “don’t do that!” without offering an alternative.One consequence of that is that some rules can be supported only by heuristics, rather than precise and mechanically verifiable checks.Other rules articulate general principles. For these more general rules, more detailed and specific rules provide partial checking. These guidelines address the core of C++ and its use.We expect that most large organizations, specific application areas, and even large projects will need further rules, possibly further restrictions, and further library support.For example, hard-real-time programmers typically can’t use free store (dynamic memory) freely and will be restricted in their choice of libraries.We encourage the development of such more specific rules as addenda to these core guidelines.Build your ideal small foundation library and use that, rather than lowering your level of programming to glorified assembly code. The rules are designed to allow gradual adoption. Some rules aim to increase various forms of safety while others aim to reduce the likelihood of accidents, many do both.The guidelines aimed at preventing accidents often ban perfectly legal C++.However, when there are two ways of expressing an idea and one has shown itself a common source of errors and the other has not, we try to guide programmers towards the latter. In.not: Non-aimsThe rules are not intended to be minimal or orthogonal.In particular, general rules can be simple, but unenforceable.Also, it is often hard to understand the implications of a general rule.More specialized rules are often easier to understand and to enforce, but without general rules, they would just be a long list of special cases.We provide rules aimed at helping novices as well as rules supporting expert use.Some rules can be completely enforced, but others are based on heuristics. These rules are not meant to be read serially, like a book.You can browse through them using the links.However, their main intended use is to be targets for tools.That is, a tool looks for violations and the tool returns links to violated rules.The rules then provide reasons, examples of potential consequences of the violation, and suggested remedies. These guidelines are not intended to be a substitute for a tutorial treatment of C++.If you need a tutorial for some given level of experience, see the references. This is not a guide on how to convert old C++ code to more modern code.It is meant to articulate ideas for new code in a concrete fashion.However, see the modernization section for some possible approaches to modernizing/rejuvenating/upgrading.Importantly, the rules support gradual adoption: It is typically infeasible to completely convert a large code base all at once. These guidelines are not meant to be complete or exact in every language-technical detail.For the final word on language definition issues, including every exception to general rules and every feature, see the ISO C++ standard. The rules are not intended to force you to write in an impoverished subset of C++.They are emphatically not meant to define a, say, Java-like subset of C++.They are not meant to define a single “one true C++” language.We value expressiveness and uncompromised performance. The rules are not value-neutral.They are meant to make code simpler and more correct/safer than most existing C++ code, without loss of performance.They are meant to inhibit perfectly valid C++ code that correlates with errors, spurious complexity, and poor performance. The rules are not perfect.A rule can do harm by prohibiting something that is useful in a given situation.A rule can do harm by failing to prohibit something that enables a serious error in a given situation.A rule can do a lot of harm by being vague, ambiguous, unenforceable, or by enabling every solution to a problem.It is impossible to completely meet the “do no harm” criteria.Instead, our aim is the less ambitious: “Do the most good for most programmers”;if you cannot live with a rule, object to it, ignore it, but don’t water it down until it becomes meaningless.Also, suggest an improvement. In.force: EnforcementRules with no enforcement are unmanageable for large code bases.Enforcement of all rules is possible only for a small weak set of rules or for a specific user community. But we want lots of rules, and we want rules that everybody can use. But different people have different needs. But people don’t like to read lots of rules. But people can’t remember many rules. So, we need subsetting to meet a variety of needs. But arbitrary subsetting leads to chaos. We want guidelines that help a lot of people, make code more uniform, and strongly encourage people to modernize their code.We want to encourage best practices, rather than leave all to individual choices and management pressures.The ideal is to use all rules; that gives the greatest benefits. This adds up to quite a few dilemmas.We try to resolve those using tools.Each rule has an Enforcement section listing ideas for enforcement.Enforcement might be done by code review, by static analysis, by compiler, or by run-time checks.Wherever possible, we prefer “mechanical” checking (humans are slow, inaccurate, and bore easily) and static checking.Run-time checks are suggested only rarely where no alternative exists; we do not want to introduce “distributed fat”.Where appropriate, we label a rule (in the Enforcement sections) with the name of groups of related rules (called “profiles”).A rule can be part of several profiles, or none.For a start, we have a few profiles corresponding to common needs (desires, ideals): type: No type violations (reinterpreting a T as a U through casts, unions, or varargs) bounds: No bounds violations (accessing beyond the range of an array) lifetime: No leaks (failing to delete or multiple delete) and no access to invalid objects (dereferencing nullptr, using a dangling reference). The profiles are intended to be used by tools, but also serve as an aid to the human reader.We do not limit our comment in the Enforcement sections to things we know how to enforce; some comments are mere wishes that might inspire some tool builder. Tools that implement these rules shall respect the following syntax to explicitly suppress a rule: [[gsl::suppress(tag)]] where “tag” is the anchor name of the item where the Enforcement rule appears (e.g., for C.134 it is “Rh-public”), thename of a profile group-of-rules (“type”, “bounds”, or “lifetime”),or a specific rule in a profile (type.4, or bounds.2). In.struct: The structure of this documentEach rule (guideline, suggestion) can have several parts: The rule itself – e.g., no naked new A rule reference number – e.g., C.7 (the 7th rule related to classes).Since the major sections are not inherently ordered, we use letters as the first part of a rule reference “number”.We leave gaps in the numbering to minimize “disruption” when we add or remove rules. Reasons (rationales) – because programmers find it hard to follow rules they don’t understand Examples – because rules are hard to understand in the abstract; can be positive or negative Alternatives – for “don’t do this” rules Exceptions – we prefer simple general rules. However, many rules apply widely, but not universally, so exceptions must be listed Enforcement – ideas about how the rule might be checked “mechanically” See alsos – references to related rules and/or further discussion (in this document or elsewhere) Notes (comments) – something that needs saying that doesn’t fit the other classifications Discussion – references to more extensive rationale and/or examples placed outside the main lists of rules Some rules are hard to check mechanically, but they all meet the minimal criteria that an expert programmer can spot many violations without too much trouble.We hope that “mechanical” tools will improve with time to approximate what such an expert programmer notices.Also, we assume that the rules will be refined over time to make them more precise and checkable. A rule is aimed at being simple, rather than carefully phrased to mention every alternative and special case.Such information is found in the Alternative paragraphs and the Discussion sections.If you don’t understand a rule or disagree with it, please visit its Discussion.If you feel that a discussion is missing or incomplete, enter an Issueexplaining your concerns and possibly a corresponding PR. This is not a language manual.It is meant to be helpful, rather than complete, fully accurate on technical details, or a guide to existing code.Recommended information sources can be found in the references. In.sec: Major sections In: Introduction P: Philosophy I: Interfaces F: Functions C: Classes and class hierarchies Enum: Enumerations R: Resource management ES: Expressions and statements Per: Performance CP: Concurrency and parallelism E: Error handling Con: Constants and immutability T: Templates and generic programming CPL: C-style programming SF: Source files SL: The Standard Library Supporting sections: A: Architectural ideas NR: Non-Rules and myths RF: References Pro: Profiles GSL: Guideline support library NL: Naming and layout rules FAQ: Answers to frequently asked questions Appendix A: Libraries Appendix B: Modernizing code Appendix C: Discussion Appendix D: Supporting tools Glossary To-do: Unclassified proto-rules These sections are not orthogonal. Each section (e.g., “P” for “Philosophy”) and each subsection (e.g., “C.hier” for “Class Hierarchies (OOP)”) have an abbreviation for ease of searching and reference.The main section abbreviations are also used in rule numbers (e.g., “C.11” for “Make concrete types regular”). P: PhilosophyThe rules in this section are very general. Philosophy rules summary: P.1: Express ideas directly in code P.2: Write in ISO Standard C++ P.3: Express intent P.4: Ideally, a program should be statically type safe P.5: Prefer compile-time checking to run-time checking P.6: What cannot be checked at compile time should be checkable at run time P.7: Catch run-time errors early P.8: Don’t leak any resources P.9: Don’t waste time or space P.10: Prefer immutable data to mutable data P.11: Encapsulate messy constructs, rather than spreading through the code P.12: Use supporting tools as appropriate P.13: Use support libraries as appropriate Philosophical rules are generally not mechanically checkable.However, individual rules reflecting these philosophical themes are.Without a philosophical basis, the more concrete/specific/checkable rules lack rationale. P.1: Express ideas directly in codeReasonCompilers don’t read comments (or design documents) and neither do many programmers (consistently).What is expressed in code has defined semantics and can (in principle) be checked by compilers and other tools. Exampleclass Date { // ... public: Month month() const; // do int month(); // don&apos;t // ... }; The first declaration of month is explicit about returning a Month and about not modifying the state of the Date object.The second version leaves the reader guessing and opens more possibilities for uncaught bugs. Example; badThis loop is a restricted form of std::find: void f(vector&lt;string&gt;&amp; v) { string val; cin &gt;&gt; val; // ... int index = -1; // bad, plus should use gsl::index for (int i = 0; i &lt; v.size(); ++i) { if (v[i] == val) { index = i; break; } } // ... } Example; goodA much clearer expression of intent would be: void f(vector&lt;string&gt;&amp; v) { string val; cin &gt;&gt; val; // ... auto p = find(begin(v), end(v), val); // better // ... } A well-designed library expresses intent (what is to be done, rather than just how something is being done) far better than direct use of language features. A C++ programmer should know the basics of the standard library, and use it where appropriate.Any programmer should know the basics of the foundation libraries of the project being worked on, and use them appropriately.Any programmer using these guidelines should know the guideline support library, and use it appropriately. Examplechange_speed(double s); // bad: what does s signify? // ... change_speed(2.3); A better approach is to be explicit about the meaning of the double (new speed or delta on old speed?) and the unit used: change_speed(Speed s); // better: the meaning of s is specified // ... change_speed(2.3); // error: no unit change_speed(23m / 10s); // meters per second We could have accepted a plain (unit-less) double as a delta, but that would have been error-prone.If we wanted both absolute speed and deltas, we would have defined a Delta type. EnforcementVery hard in general. use const consistently (check if member functions modify their object; check if functions modify arguments passed by pointer or reference) flag uses of casts (casts neuter the type system) detect code that mimics the standard library (hard) P.2: Write in ISO Standard C++ReasonThis is a set of guidelines for writing ISO Standard C++. NoteThere are environments where extensions are necessary, e.g., to access system resources.In such cases, localize the use of necessary extensions and control their use with non-core Coding Guidelines. If possible, build interfaces that encapsulate the extensions so they can be turned off or compiled away on systems that do not support those extensions. Extensions often do not have rigorously defined semantics. Even extensions thatare common and implemented by multiple compilers may have slightly differentbehaviors and edge case behavior as a direct result of not having a rigorousstandard definition. With sufficient use of any such extension, expectedportability will be impacted. NoteUsing valid ISO C++ does not guarantee portability (let alone correctness).Avoid dependence on undefined behavior (e.g., undefined order of evaluation)and be aware of constructs with implementation defined meaning (e.g., sizeof(int)). NoteThere are environments where restrictions on use of standard C++ language or library features are necessary, e.g., to avoid dynamic memory allocation as required by aircraft control software standards.In such cases, control their (dis)use with an extension of these Coding Guidelines customized to the specific environment. EnforcementUse an up-to-date C++ compiler (currently C++17, C++14, or C++11) with a set of options that do not accept extensions. P.3: Express intentReasonUnless the intent of some code is stated (e.g., in names or comments), it is impossible to tell whether the code does what it is supposed to do. Examplegsl::index i = 0; while (i &lt; v.size()) { // ... do something with v[i] ... } The intent of “just” looping over the elements of v is not expressed here. The implementation detail of an index is exposed (so that it might be misused), and i outlives the scope of the loop, which may or may not be intended. The reader cannot know from just this section of code. Better: for (const auto&amp; x : v) { /* do something with the value of x */ } Now, there is no explicit mention of the iteration mechanism, and the loop operates on a reference to const elements so that accidental modification cannot happen. If modification is desired, say so: for (auto&amp; x : v) { /* modify x */ } For more details about for-statements, see ES.71.Sometimes better still, use a named algorithm: for_each(v, [](int x) { /* do something with the value of x */ }); for_each(par, v, [](int x) { /* do something with the value of x */ }); The last variant makes it clear that we are not interested in the order in which the elements of v are handled. A programmer should be familiar with The guideline support library The ISO C++ Standard Library Whatever foundation libraries are used for the current project(s) NoteAlternative formulation: Say what should be done, rather than just how it should be done. NoteSome language constructs express intent better than others. ExampleIf two ints are meant to be the coordinates of a 2D point, say so: draw_line(int, int, int, int); // obscure draw_line(Point, Point); // clearer EnforcementLook for common patterns for which there are better alternatives simple for loops vs. range-for loops f(T*, int) interfaces vs. f(span&lt;T&gt;) interfaces loop variables in too large a scope naked new and delete functions with many parameters of built-in types There is a huge scope for cleverness and semi-automated program transformation. P.4: Ideally, a program should be statically type safeReasonIdeally, a program would be completely statically (compile-time) type safe.Unfortunately, that is not possible. Problem areas: unions casts array decay range errors narrowing conversions NoteThese areas are sources of serious problems (e.g., crashes and security violations).We try to provide alternative techniques. EnforcementWe can ban, restrain, or detect the individual problem categories separately, as required and feasible for individual programs.Always suggest an alternative.For example: unions – use variant (in C++17) casts – minimize their use; templates can help array decay – use span (from the GSL) range errors – use span narrowing conversions – minimize their use and use narrow or narrow_cast (from the GSL) where they are necessary P.5: Prefer compile-time checking to run-time checkingReasonCode clarity and performance.You don’t need to write error handlers for errors caught at compile time. Example// Int is an alias used for integers int bits = 0; // don&apos;t: avoidable code for (Int i = 1; i; i &lt;&lt;= 1) ++bits; if (bits &lt; 32) cerr &lt;&lt; &quot;Int too small\n&quot;; This example fails to achieve what it is trying to achieve (because overflow is undefined) and should be replaced with a simple static_assert: // Int is an alias used for integers static_assert(sizeof(Int) &gt;= 4); // do: compile-time check Or better still just use the type system and replace Int with int32_t. Examplevoid read(int* p, int n); // read max n integers into *p int a[100]; read(a, 1000); // bad, off the end better void read(span&lt;int&gt; r); // read into the range of integers r int a[100]; read(a); // better: let the compiler figure out the number of elements Alternative formulation: Don’t postpone to run time what can be done well at compile time. Enforcement Look for pointer arguments. Look for run-time checks for range violations. P.6: What cannot be checked at compile time should be checkable at run timeReasonLeaving hard-to-detect errors in a program is asking for crashes and bad results. NoteIdeally, we catch all errors (that are not errors in the programmer’s logic) at either compile time or run time. It is impossible to catch all errors at compile time and often not affordable to catch all remaining errors at run time. However, we should endeavor to write programs that in principle can be checked, given sufficient resources (analysis programs, run-time checks, machine resources, time). Example, bad// separately compiled, possibly dynamically loaded extern void f(int* p); void g(int n) { // bad: the number of elements is not passed to f() f(new int[n]); } Here, a crucial bit of information (the number of elements) has been so thoroughly “obscured” that static analysis is probably rendered infeasible and dynamic checking can be very difficult when f() is part of an ABI so that we cannot “instrument” that pointer. We could embed helpful information into the free store, but that requires global changes to a system and maybe to the compiler. What we have here is a design that makes error detection very hard. Example, badWe can of course pass the number of elements along with the pointer: // separately compiled, possibly dynamically loaded extern void f2(int* p, int n); void g2(int n) { f2(new int[n], m); // bad: a wrong number of elements can be passed to f() } Passing the number of elements as an argument is better (and far more common) than just passing the pointer and relying on some (unstated) convention for knowing or discovering the number of elements. However (as shown), a simple typo can introduce a serious error. The connection between the two arguments of f2() is conventional, rather than explicit. Also, it is implicit that f2() is supposed to delete its argument (or did the caller make a second mistake?). Example, badThe standard library resource management pointers fail to pass the size when they point to an object: // separately compiled, possibly dynamically loaded // NB: this assumes the calling code is ABI-compatible, using a // compatible C++ compiler and the same stdlib implementation extern void f3(unique_ptr&lt;int[]&gt;, int n); void g3(int n) { f3(make_unique&lt;int[]&gt;(n), m); // bad: pass ownership and size separately } ExampleWe need to pass the pointer and the number of elements as an integral object: extern void f4(vector&lt;int&gt;&amp;); // separately compiled, possibly dynamically loaded extern void f4(span&lt;int&gt;); // separately compiled, possibly dynamically loaded // NB: this assumes the calling code is ABI-compatible, using a // compatible C++ compiler and the same stdlib implementation void g3(int n) { vector&lt;int&gt; v(n); f4(v); // pass a reference, retain ownership f4(span&lt;int&gt;{v}); // pass a view, retain ownership } This design carries the number of elements along as an integral part of an object, so that errors are unlikely and dynamic (run-time) checking is always feasible, if not always affordable. ExampleHow do we transfer both ownership and all information needed for validating use? vector&lt;int&gt; f5(int n) // OK: move { vector&lt;int&gt; v(n); // ... initialize v ... return v; } unique_ptr&lt;int[]&gt; f6(int n) // bad: loses n { auto p = make_unique&lt;int[]&gt;(n); // ... initialize *p ... return p; } owner&lt;int*&gt; f7(int n) // bad: loses n and we might forget to delete { owner&lt;int*&gt; p = new int[n]; // ... initialize *p ... return p; } Example ??? show how possible checks are avoided by interfaces that pass polymorphic base classes around, when they actually know what they need?Or strings as “free-style” options Enforcement Flag (pointer, count)-style interfaces (this will flag a lot of examples that can’t be fixed for compatibility reasons) ??? P.7: Catch run-time errors earlyReasonAvoid “mysterious” crashes.Avoid errors leading to (possibly unrecognized) wrong results. Examplevoid increment1(int* p, int n) // bad: error-prone { for (int i = 0; i &lt; n; ++i) ++p[i]; } void use1(int m) { const int n = 10; int a[n] = {}; // ... increment1(a, m); // maybe typo, maybe m &lt;= n is supposed // but assume that m == 20 // ... } Here we made a small error in use1 that will lead to corrupted data or a crash.The (pointer, count)-style interface leaves increment1() with no realistic way of defending itself against out-of-range errors.If we could check subscripts for out of range access, then the error would not be discovered until p[10] was accessed.We could check earlier and improve the code: void increment2(span&lt;int&gt; p) { for (int&amp; x : p) ++x; } void use2(int m) { const int n = 10; int a[n] = {}; // ... increment2({a, m}); // maybe typo, maybe m &lt;= n is supposed // ... } Now, m &lt;= n can be checked at the point of call (early) rather than later.If all we had was a typo so that we meant to use n as the bound, the code could be further simplified (eliminating the possibility of an error): void use3(int m) { const int n = 10; int a[n] = {}; // ... increment2(a); // the number of elements of a need not be repeated // ... } Example, badDon’t repeatedly check the same value. Don’t pass structured data as strings: Date read_date(istream&amp; is); // read date from istream Date extract_date(const string&amp; s); // extract date from string void user1(const string&amp; date) // manipulate date { auto d = extract_date(date); // ... } void user2() { Date d = read_date(cin); // ... user1(d.to_string()); // ... } The date is validated twice (by the Date constructor) and passed as a character string (unstructured data). ExampleExcess checking can be costly.There are cases where checking early is dumb because you may not ever need the value, or may only need part of the value that is more easily checked than the whole. Similarly, don’t add validity checks that change the asymptotic behavior of your interface (e.g., don’t add a O(n) check to an interface with an average complexity of O(1)). class Jet { // Physics says: e * e &lt; x * x + y * y + z * z float x; float y; float z; float e; public: Jet(float x, float y, float z, float e) :x(x), y(y), z(z), e(e) { // Should I check here that the values are physically meaningful? } float m() const { // Should I handle the degenerate case here? return sqrt(x * x + y * y + z * z - e * e); } ??? }; The physical law for a jet (e * e &lt; x * x + y * y + z * z) is not an invariant because of the possibility for measurement errors. ??? Enforcement Look at pointers and arrays: Do range-checking early and not repeatedly Look at conversions: Eliminate or mark narrowing conversions Look for unchecked values coming from input Look for structured data (objects of classes with invariants) being converted into strings ??? P.8: Don’t leak any resourcesReasonEven a slow growth in resources will, over time, exhaust the availability of those resources.This is particularly important for long-running programs, but is an essential piece of responsible programming behavior. Example, badvoid f(char* name) { FILE* input = fopen(name, &quot;r&quot;); // ... if (something) return; // bad: if something == true, a file handle is leaked // ... fclose(input); } Prefer RAII: void f(char* name) { ifstream input {name}; // ... if (something) return; // OK: no leak // ... } See also: The resource management section NoteA leak is colloquially “anything that isn’t cleaned up.”The more important classification is “anything that can no longer be cleaned up.”For example, allocating an object on the heap and then losing the last pointer that points to that allocation.This rule should not be taken as requiring that allocations within long-lived objects must be returned during program shutdown.For example, relying on system guaranteed cleanup such as file closing and memory deallocation upon process shutdown can simplify code.However, relying on abstractions that implicitly clean up can be as simple, and often safer. NoteEnforcing the lifetime safety profile eliminates leaks.When combined with resource safety provided by RAII, it eliminates the need for “garbage collection” (by generating no garbage).Combine this with enforcement of the type and bounds profiles and you get complete type- and resource-safety, guaranteed by tools. Enforcement Look at pointers: Classify them into non-owners (the default) and owners.Where feasible, replace owners with standard-library resource handles (as in the example above).Alternatively, mark an owner as such using owner from the GSL. Look for naked new and delete Look for known resource allocating functions returning raw pointers (such as fopen, malloc, and strdup) P.9: Don’t waste time or spaceReasonThis is C++. NoteTime and space that you spend well to achieve a goal (e.g., speed of development, resource safety, or simplification of testing) is not wasted.“Another benefit of striving for efficiency is that the process forces you to understand the problem in more depth.” - Alex Stepanov Example, badstruct X { char ch; int i; string s; char ch2; X&amp; operator=(const X&amp; a); X(const X&amp;); }; X waste(const char* p) { if (!p) throw Nullptr_error{}; int n = strlen(p); auto buf = new char[n]; if (!buf) throw Allocation_error{}; for (int i = 0; i &lt; n; ++i) buf[i] = p[i]; // ... manipulate buffer ... X x; x.ch = &apos;a&apos;; x.s = string(n); // give x.s space for *p for (gsl::index i = 0; i &lt; x.s.size(); ++i) x.s[i] = buf[i]; // copy buf into x.s delete[] buf; return x; } void driver() { X x = waste(&quot;Typical argument&quot;); // ... } Yes, this is a caricature, but we have seen every individual mistake in production code, and worse.Note that the layout of X guarantees that at least 6 bytes (and most likely more) are wasted.The spurious definition of copy operations disables move semantics so that the return operation is slow(please note that the Return Value Optimization, RVO, is not guaranteed here).The use of new and delete for buf is redundant; if we really needed a local string, we should use a local string.There are several more performance bugs and gratuitous complication. Example, badvoid lower(zstring s) { for (int i = 0; i &lt; strlen(s); ++i) s[i] = tolower(s[i]); } Yes, this is an example from production code.We leave it to the reader to figure out what’s wasted. NoteAn individual example of waste is rarely significant, and where it is significant, it is typically easily eliminated by an expert.However, waste spread liberally across a code base can easily be significant and experts are not always as available as we would like.The aim of this rule (and the more specific rules that support it) is to eliminate most waste related to the use of C++ before it happens.After that, we can look at waste related to algorithms and requirements, but that is beyond the scope of these guidelines. EnforcementMany more specific rules aim at the overall goals of simplicity and elimination of gratuitous waste. P.10: Prefer immutable data to mutable dataReasonIt is easier to reason about constants than about variables.Something immutable cannot change unexpectedly.Sometimes immutability enables better optimization.You can’t have a data race on a constant. See Con: Constants and immutability P.11: Encapsulate messy constructs, rather than spreading through the codeReasonMessy code is more likely to hide bugs and harder to write.A good interface is easier and safer to use.Messy, low-level code breeds more such code. Exampleint sz = 100; int* p = (int*) malloc(sizeof(int) * sz); int count = 0; // ... for (;;) { // ... read an int into x, exit loop if end of file is reached ... // ... check that x is valid ... if (count == sz) p = (int*) realloc(p, sizeof(int) * sz * 2); p[count++] = x; // ... } This is low-level, verbose, and error-prone.For example, we “forgot” to test for memory exhaustion.Instead, we could use vector: vector&lt;int&gt; v; v.reserve(100); // ... for (int x; cin &gt;&gt; x; ) { // ... check that x is valid ... v.push_back(x); } NoteThe standards library and the GSL are examples of this philosophy.For example, instead of messing with the arrays, unions, cast, tricky lifetime issues, gsl::owner, etc.,that are needed to implement key abstractions, such as vector, span, lock_guard, and future, we use the librariesdesigned and implemented by people with more time and expertise than we usually have.Similarly, we can and should design and implement more specialized libraries, rather than leaving the users (often ourselves)with the challenge of repeatedly getting low-level code well.This is a variant of the subset of superset principle that underlies these guidelines. Enforcement Look for “messy code” such as complex pointer manipulation and casting outside the implementation of abstractions. P.12: Use supporting tools as appropriateReasonThere are many things that are done better “by machine”.Computers don’t tire or get bored by repetitive tasks.We typically have better things to do than repeatedly do routine tasks. ExampleRun a static analyzer to verify that your code follows the guidelines you want it to follow. NoteSee Static analysis tools Concurrency tools Testing tools There are many other kinds of tools, such as source code repositories, build tools, etc.,but those are beyond the scope of these guidelines. NoteBe careful not to become dependent on over-elaborate or over-specialized tool chains.Those can make your otherwise portable code non-portable. P.13: Use support libraries as appropriateReasonUsing a well-designed, well-documented, and well-supported library saves time and effort;its quality and documentation are likely to be greater than what you could doif the majority of your time must be spent on an implementation.The cost (time, effort, money, etc.) of a library can be shared over many users.A widely used library is more likely to be kept up-to-date and ported to new systems than an individual application.Knowledge of a widely-used library can save time on other/future projects.So, if a suitable library exists for your application domain, use it. Examplestd::sort(begin(v), end(v), std::greater&lt;&gt;()); Unless you are an expert in sorting algorithms and have plenty of time,this is more likely to be correct and to run faster than anything you write for a specific application.You need a reason not to use the standard library (or whatever foundational libraries your application uses) rather than a reason to use it. NoteBy default use The ISO C++ Standard Library The Guidelines Support Library NoteIf no well-designed, well-documented, and well-supported library exists for an important domain,maybe you should design and implement it, and then use it. I: InterfacesAn interface is a contract between two parts of a program. Precisely stating what is expected of a supplier of a service and a user of that service is essential.Having good (easy-to-understand, encouraging efficient use, not error-prone, supporting testing, etc.) interfaces is probably the most important single aspect of code organization. Interface rule summary: I.1: Make interfaces explicit I.2: Avoid non-const global variables I.3: Avoid singletons I.4: Make interfaces precisely and strongly typed I.5: State preconditions (if any) I.6: Prefer Expects() for expressing preconditions I.7: State postconditions I.8: Prefer Ensures() for expressing postconditions I.9: If an interface is a template, document its parameters using concepts I.10: Use exceptions to signal a failure to perform a required task I.11: Never transfer ownership by a raw pointer (T*) or reference (T&amp;) I.12: Declare a pointer that must not be null as not_null I.13: Do not pass an array as a single pointer I.22: Avoid complex initialization of global objects I.23: Keep the number of function arguments low I.24: Avoid adjacent unrelated parameters of the same type I.25: Prefer abstract classes as interfaces to class hierarchies I.26: If you want a cross-compiler ABI, use a C-style subset I.27: For stable library ABI, consider the Pimpl idiom I.30: Encapsulate rule violations See also: F: Functions C.concrete: Concrete types C.hier: Class hierarchies C.over: Overloading and overloaded operators C.con: Containers and other resource handles E: Error handling T: Templates and generic programming I.1: Make interfaces explicitReasonCorrectness. Assumptions not stated in an interface are easily overlooked and hard to test. Example, badControlling the behavior of a function through a global (namespace scope) variable (a call mode) is implicit and potentially confusing. For example: int round(double d) { return (round_up) ? ceil(d) : d; // don&apos;t: &quot;invisible&quot; dependency } It will not be obvious to a caller that the meaning of two calls of round(7.2) might give different results. ExceptionSometimes we control the details of a set of operations by an environment variable, e.g., normal vs. verbose output or debug vs. optimized.The use of a non-local control is potentially confusing, but controls only implementation details of otherwise fixed semantics. Example, badReporting through non-local variables (e.g., errno) is easily ignored. For example: // don&apos;t: no test of printf&apos;s return value fprintf(connection, &quot;logging: %d %d %d\n&quot;, x, y, s); What if the connection goes down so that no logging output is produced? See I.???. Alternative: Throw an exception. An exception cannot be ignored. Alternative formulation: Avoid passing information across an interface through non-local or implicit state.Note that non-const member functions pass information to other member functions through their object’s state. Alternative formulation: An interface should be a function or a set of functions.Functions can be template functions and sets of functions can be classes or class templates. Enforcement (Simple) A function should not make control-flow decisions based on the values of variables declared at namespace scope. (Simple) A function should not write to variables declared at namespace scope. I.2: Avoid non-const global variablesReasonNon-const global variables hide dependencies and make the dependencies subject to unpredictable changes. Examplestruct Data { // ... lots of stuff ... } data; // non-const data void compute() // don&apos;t { // ... use data ... } void output() // don&apos;t { // ... use data ... } Who else might modify data? NoteGlobal constants are useful. NoteThe rule against global variables applies to namespace scope variables as well. Alternative: If you use global (more generally namespace scope) data to avoid copying, consider passing the data as an object by reference to const.Another solution is to define the data as the state of some object and the operations as member functions. Warning: Beware of data races: If one thread can access nonlocal data (or data passed by reference) while another thread executes the callee, we can have a data race.Every pointer or reference to mutable data is a potential data race. NoteYou cannot have a race condition on immutable data. References: See the rules for calling functions. NoteThe rule is “avoid”, not “don’t use.” Of course there will be (rare) exceptions, such as cin, cout, and cerr. Enforcement(Simple) Report all non-const variables declared at namespace scope. I.3: Avoid singletonsReasonSingletons are basically complicated global objects in disguise. Exampleclass Singleton { // ... lots of stuff to ensure that only one Singleton object is created, // that it is initialized properly, etc. }; There are many variants of the singleton idea.That’s part of the problem. NoteIf you don’t want a global object to change, declare it const or constexpr. ExceptionYou can use the simplest “singleton” (so simple that it is often not considered a singleton) to get initialization on first use, if any: X&amp; myX() { static X my_x {3}; return my_x; } This is one of the most effective solutions to problems related to initialization order.In a multi-threaded environment, the initialization of the static object does not introduce a race condition(unless you carelessly access a shared object from within its constructor). Note that the initialization of a local static does not imply a race condition.However, if the destruction of X involves an operation that needs to be synchronized we must use a less simple solution.For example: X&amp; myX() { static auto p = new X {3}; return *p; // potential leak } Now someone must delete that object in some suitably thread-safe way.That’s error-prone, so we don’t use that technique unless myX is in multi-threaded code, that X object needs to be destroyed (e.g., because it releases a resource), and X‘s destructor’s code needs to be synchronized. If you, as many do, define a singleton as a class for which only one object is created, functions like myX are not singletons, and this useful technique is not an exception to the no-singleton rule. EnforcementVery hard in general. Look for classes with names that include singleton. Look for classes for which only a single object is created (by counting objects or by examining constructors). If a class X has a public static function that contains a function-local static of the class’ type X and returns a pointer or reference to it, ban that. I.4: Make interfaces precisely and strongly typedReasonTypes are the simplest and best documentation, have well-defined meaning, and are guaranteed to be checked at compile time.Also, precisely typed code is often optimized better. Example, don’tConsider: void pass(void* data); // void* is suspicious Now the callee must cast the data pointer (back) to a correct type to use it. That is error-prone and often verbose.Avoid void*, especially in interfaces.Consider using a variant or a pointer to base instead. Alternative: Often, a template parameter can eliminate the void* turning it into a T* or T&amp;.For generic code these Ts can be general or concept constrained template parameters. Example, badConsider: void draw_rect(int, int, int, int); // great opportunities for mistakes draw_rect(p.x, p.y, 10, 20); // what does 10, 20 mean? An int can carry arbitrary forms of information, so we must guess about the meaning of the four ints.Most likely, the first two are an x,y coordinate pair, but what are the last two?Comments and parameter names can help, but we could be explicit: void draw_rectangle(Point top_left, Point bottom_right); void draw_rectangle(Point top_left, Size height_width); draw_rectangle(p, Point{10, 20}); // two corners draw_rectangle(p, Size{10, 20}); // one corner and a (height, width) pair Obviously, we cannot catch all errors through the static type system(e.g., the fact that a first argument is supposed to be a top-left point is left to convention (naming and comments)). Example, badIn the following example, it is not clear from the interface what time_to_blink means: Seconds? Milliseconds? void blink_led(int time_to_blink) // bad -- the unit is ambiguous { // ... // do something with time_to_blink // ... } void use() { blink_led(2); } Example, goodstd::chrono::duration types (C++11) helps making the unit of time duration explicit. void blink_led(milliseconds time_to_blink) // good -- the unit is explicit { // ... // do something with time_to_blink // ... } void use() { blink_led(1500ms); } The function can also be written in such a way that it will accept any time duration unit. template&lt;class rep, class period&gt; void blink_led(duration&lt;rep, period&gt; time_to_blink) // good -- accepts any unit { // assuming that millisecond is the smallest relevant unit auto milliseconds_to_blink = duration_cast&lt;milliseconds&gt;(time_to_blink); // ... // do something with milliseconds_to_blink // ... } void use() { blink_led(2s); blink_led(1500ms); } Enforcement (Simple) Report the use of void* as a parameter or return type. (Hard to do well) Look for member functions with many built-in type arguments. I.5: State preconditions (if any)ReasonArguments have meaning that may constrain their proper use in the callee. ExampleConsider: double sqrt(double x); Here x must be nonnegative. The type system cannot (easily and naturally) express that, so we must use other means. For example: double sqrt(double x); // x must be nonnegative Some preconditions can be expressed as assertions. For example: double sqrt(double x) { Expects(x &gt;= 0); /* ... */ } Ideally, that Expects(x &gt;= 0) should be part of the interface of sqrt() but that’s not easily done. For now, we place it in the definition (function body). References: Expects() is described in GSL. NotePrefer a formal specification of requirements, such as Expects(p);.If that is infeasible, use English text in comments, such as // the sequence [p:q) is ordered using &lt;. NoteMost member functions have as a precondition that some class invariant holds.That invariant is established by a constructor and must be reestablished upon exit by every member function called from outside the class.We don’t need to mention it for each member function. Enforcement(Not enforceable) See also: The rules for passing pointers. ??? I.6: Prefer Expects() for expressing preconditionsReasonTo make it clear that the condition is a precondition and to enable tool use. Exampleint area(int height, int width) { Expects(height &gt; 0 &amp;&amp; width &gt; 0); // good if (height &lt;= 0 || width &lt;= 0) my_error(); // obscure // ... } NotePreconditions can be stated in many ways, including comments, if-statements, and assert().This can make them hard to distinguish from ordinary code, hard to update, hard to manipulate by tools, and may have the wrong semantics (do you always want to abort in debug mode and check nothing in productions runs?). NotePreconditions should be part of the interface rather than part of the implementation,but we don’t yet have the language facilities to do that.Once language support becomes available (e.g., see the contract proposal) we will adopt the standard version of preconditions, postconditions, and assertions. NoteExpects() can also be used to check a condition in the middle of an algorithm. NoteNo, using unsigned is not a good way to sidestep the problem of ensuring that a value is nonnegative. Enforcement(Not enforceable) Finding the variety of ways preconditions can be asserted is not feasible. Warning about those that can be easily identified (assert()) has questionable value in the absence of a language facility. I.7: State postconditionsReasonTo detect misunderstandings about the result and possibly catch erroneous implementations. Example, badConsider: int area(int height, int width) { return height * width; } // bad Here, we (incautiously) left out the precondition specification, so it is not explicit that height and width must be positive.We also left out the postcondition specification, so it is not obvious that the algorithm (height * width) is wrong for areas larger than the largest integer.Overflow can happen.Consider using: int area(int height, int width) { auto res = height * width; Ensures(res &gt; 0); return res; } Example, badConsider a famous security bug: void f() // problematic { char buffer[MAX]; // ... memset(buffer, 0, sizeof(buffer)); } There was no postcondition stating that the buffer should be cleared and the optimizer eliminated the apparently redundant memset() call: void f() // better { char buffer[MAX]; // ... memset(buffer, 0, sizeof(buffer)); Ensures(buffer[0] == 0); } NotePostconditions are often informally stated in a comment that states the purpose of a function; Ensures() can be used to make this more systematic, visible, and checkable. NotePostconditions are especially important when they relate to something that is not directly reflected in a returned result, such as a state of a data structure used. ExampleConsider a function that manipulates a Record, using a mutex to avoid race conditions: mutex m; void manipulate(Record&amp; r) // don&apos;t { m.lock(); // ... no m.unlock() ... } Here, we “forgot” to state that the mutex should be released, so we don’t know if the failure to ensure release of the mutex was a bug or a feature.Stating the postcondition would have made it clear: void manipulate(Record&amp; r) // postcondition: m is unlocked upon exit { m.lock(); // ... no m.unlock() ... } The bug is now obvious (but only to a human reading comments). Better still, use RAII to ensure that the postcondition (“the lock must be released”) is enforced in code: void manipulate(Record&amp; r) // best { lock_guard&lt;mutex&gt; _ {m}; // ... } NoteIdeally, postconditions are stated in the interface/declaration so that users can easily see them.Only postconditions related to the users can be stated in the interface.Postconditions related only to internal state belongs in the definition/implementation. Enforcement(Not enforceable) This is a philosophical guideline that is infeasible to checkdirectly in the general case. Domain specific checkers (like lock-holdingcheckers) exist for many toolchains. I.8: Prefer Ensures() for expressing postconditionsReasonTo make it clear that the condition is a postcondition and to enable tool use. Examplevoid f() { char buffer[MAX]; // ... memset(buffer, 0, MAX); Ensures(buffer[0] == 0); } NotePostconditions can be stated in many ways, including comments, if-statements, and assert().This can make them hard to distinguish from ordinary code, hard to update, hard to manipulate by tools, and may have the wrong semantics. Alternative: Postconditions of the form “this resource must be released” are best expressed by RAII. NoteIdeally, that Ensures should be part of the interface, but that’s not easily done.For now, we place it in the definition (function body).Once language support becomes available (e.g., see the contract proposal) we will adopt the standard version of preconditions, postconditions, and assertions. Enforcement(Not enforceable) Finding the variety of ways postconditions can be asserted is not feasible. Warning about those that can be easily identified (assert()) has questionable value in the absence of a language facility. I.9: If an interface is a template, document its parameters using conceptsReasonMake the interface precisely specified and compile-time checkable in the (not so distant) future. ExampleUse the ISO Concepts TS style of requirements specification. For example: template&lt;typename Iter, typename Val&gt; // requires InputIterator&lt;Iter&gt; &amp;&amp; EqualityComparable&lt;ValueType&lt;Iter&gt;&gt;, Val&gt; Iter find(Iter first, Iter last, Val v) { // ... } NoteSoon (maybe in 2018), most compilers will be able to check requires clauses once the // is removed.Concepts are supported in GCC 6.1 and later. See also: Generic programming and concepts. Enforcement(Not yet enforceable) A language facility is under specification. When the language facility is available, warn if any non-variadic template parameter is not constrained by a concept (in its declaration or mentioned in a requires clause). I.10: Use exceptions to signal a failure to perform a required taskReasonIt should not be possible to ignore an error because that could leave the system or a computation in an undefined (or unexpected) state.This is a major source of errors. Exampleint printf(const char* ...); // bad: return negative number if output fails template &lt;class F, class ...Args&gt; // good: throw system_error if unable to start the new thread explicit thread(F&amp;&amp; f, Args&amp;&amp;... args); NoteWhat is an error? An error means that the function cannot achieve its advertised purpose (including establishing postconditions).Calling code that ignores an error could lead to wrong results or undefined systems state.For example, not being able to connect to a remote server is not by itself an error:the server can refuse a connection for all kinds of reasons, so the natural thing is to return a result that the caller should always check.However, if failing to make a connection is considered an error, then a failure should throw an exception. ExceptionMany traditional interface functions (e.g., UNIX signal handlers) use error codes (e.g., errno) to report what are really status codes, rather than errors. You don’t have a good alternative to using such, so calling these does not violate the rule. AlternativeIf you can’t use exceptions (e.g., because your code is full of old-style raw-pointer use or because there are hard-real-time constraints), consider using a style that returns a pair of values: int val; int error_code; tie(val, error_code) = do_something(); if (error_code) { // ... handle the error or exit ... } // ... use val ... This style unfortunately leads to uninitialized variables.A facility structured bindings to deal with that will become available in C++17. auto [val, error_code] = do_something(); if (error_code) { // ... handle the error or exit ... } // ... use val ... NoteWe don’t consider “performance” a valid reason not to use exceptions. Often, explicit error checking and handling consume as much time and space as exception handling. Often, cleaner code yields better performance with exceptions (simplifying the tracing of paths through the program and their optimization). A good rule for performance critical code is to move checking outside the critical part of the code (checking). In the longer term, more regular code gets better optimized. Always carefully measure before making performance claims. See also: I.5 and I.7 for reporting precondition and postcondition violations. Enforcement (Not enforceable) This is a philosophical guideline that is infeasible to check directly. Look for errno. I.11: Never transfer ownership by a raw pointer (T*) or reference (T&amp;)ReasonIf there is any doubt whether the caller or the callee owns an object, leaks or premature destruction will occur. ExampleConsider: X* compute(args) // don&apos;t { X* res = new X{}; // ... return res; } Who deletes the returned X? The problem would be harder to spot if compute returned a reference.Consider returning the result by value (use move semantics if the result is large): vector&lt;double&gt; compute(args) // good { vector&lt;double&gt; res(10000); // ... return res; } Alternative: Pass ownership using a “smart pointer”, such as unique_ptr (for exclusive ownership) and shared_ptr (for shared ownership).However, that is less elegant and often less efficient than returning the object itself,so use smart pointers only if reference semantics are needed. Alternative: Sometimes older code can’t be modified because of ABI compatibility requirements or lack of resources.In that case, mark owning pointers using owner from the guideline support library: owner&lt;X*&gt; compute(args) // It is now clear that ownership is transferred { owner&lt;X*&gt; res = new X{}; // ... return res; } This tells analysis tools that res is an owner.That is, its value must be deleted or transferred to another owner, as is done here by the return. owner is used similarly in the implementation of resource handles. NoteEvery object passed as a raw pointer (or iterator) is assumed to be owned by thecaller, so that its lifetime is handled by the caller. Viewed another way:ownership transferring APIs are relatively rare compared to pointer-passing APIs,so the default is “no ownership transfer.” See also: Argument passing, use of smart pointer arguments, and value return. Enforcement (Simple) Warn on delete of a raw pointer that is not an owner&lt;T&gt;. Suggest use of standard-library resource handle or use of owner&lt;T&gt;. (Simple) Warn on failure to either reset or explicitly delete an owner pointer on every code path. (Simple) Warn if the return value of new or a function call with an owner return value is assigned to a raw pointer or non-owner reference. I.12: Declare a pointer that must not be null as not_nullReasonTo help avoid dereferencing nullptr errors.To improve performance by avoiding redundant checks for nullptr. Exampleint length(const char* p); // it is not clear whether length(nullptr) is valid length(nullptr); // OK? int length(not_null&lt;const char*&gt; p); // better: we can assume that p cannot be nullptr int length(const char* p); // we must assume that p can be nullptr By stating the intent in source, implementers and tools can provide better diagnostics, such as finding some classes of errors through static analysis, and perform optimizations, such as removing branches and null tests. Notenot_null is defined in the guideline support library. NoteThe assumption that the pointer to char pointed to a C-style string (a zero-terminated string of characters) was still implicit, and a potential source of confusion and errors. Use czstring in preference to const char*. // we can assume that p cannot be nullptr // we can assume that p points to a zero-terminated array of characters int length(not_null&lt;zstring&gt; p); Note: length() is, of course, std::strlen() in disguise. Enforcement (Simple) ((Foundation)) If a function checks a pointer parameter against nullptr before access, on all control-flow paths, then warn it should be declared not_null. (Complex) If a function with pointer return value ensures it is not nullptr on all return paths, then warn the return type should be declared not_null. I.13: Do not pass an array as a single pointerReason (pointer, size)-style interfaces are error-prone. Also, a plain pointer (to array) must rely on some convention to allow the callee to determine the size. ExampleConsider: void copy_n(const T* p, T* q, int n); // copy from [p:p+n) to [q:q+n) What if there are fewer than n elements in the array pointed to by q? Then, we overwrite some probably unrelated memory.What if there are fewer than n elements in the array pointed to by p? Then, we read some probably unrelated memory.Either is undefined behavior and a potentially very nasty bug. AlternativeConsider using explicit spans: void copy(span&lt;const T&gt; r, span&lt;T&gt; r2); // copy r to r2 Example, badConsider: void draw(Shape* p, int n); // poor interface; poor code Circle arr[10]; // ... draw(arr, 10); Passing 10 as the n argument may be a mistake: the most common convention is to assume [0:n) but that is nowhere stated. Worse is that the call of draw() compiled at all: there was an implicit conversion from array to pointer (array decay) and then another implicit conversion from Circle to Shape. There is no way that draw() can safely iterate through that array: it has no way of knowing the size of the elements. Alternative: Use a support class that ensures that the number of elements is correct and prevents dangerous implicit conversions. For example: void draw2(span&lt;Circle&gt;); Circle arr[10]; // ... draw2(span&lt;Circle&gt;(arr)); // deduce the number of elements draw2(arr); // deduce the element type and array size void draw3(span&lt;Shape&gt;); draw3(arr); // error: cannot convert Circle[10] to span&lt;Shape&gt; This draw2() passes the same amount of information to draw(), but makes the fact that it is supposed to be a range of Circles explicit. See ???. ExceptionUse zstring and czstring to represent a C-style, zero-terminated strings.But when doing so, use string_span from the GSL to prevent range errors. Enforcement (Simple) ((Bounds)) Warn for any expression that would rely on implicit conversion of an array type to a pointer type. Allow exception for zstring/czstring pointer types. (Simple) ((Bounds)) Warn for any arithmetic operation on an expression of pointer type that results in a value of pointer type. Allow exception for zstring/czstring pointer types. I.22: Avoid complex initialization of global objectsReasonComplex initialization can lead to undefined order of execution. Example// file1.c extern const X x; const Y y = f(x); // read x; write y // file2.c extern const Y y; const X x = g(y); // read y; write x Since x and y are in different translation units the order of calls to f() and g() is undefined;one will access an uninitialized const.This shows that the order-of-initialization problem for global (namespace scope) objects is not limited to global variables. NoteOrder of initialization problems become particularly difficult to handle in concurrent code.It is usually best to avoid global (namespace scope) objects altogether. Enforcement Flag initializers of globals that call non-constexpr functions Flag initializers of globals that access extern objects I.23: Keep the number of function arguments lowReasonHaving many arguments opens opportunities for confusion. Passing lots of arguments is often costly compared to alternatives. DiscussionThe two most common reasons why functions have too many parameters are: Missing an abstraction.There is an abstraction missing, so that a compound value is beingpassed as individual elements instead of as a single object that enforces an invariant.This not only expands the parameter list, but it leads to errors because the component valuesare no longer protected by an enforced invariant. Violating “one function, one responsibility.”The function is trying to do more than one job and should probably be refactored. ExampleThe standard-library merge() is at the limit of what we can comfortably handle: template&lt;class InputIterator1, class InputIterator2, class OutputIterator, class Compare&gt; OutputIterator merge(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result, Compare comp); Note that this is because of problem 1 above – missing abstraction. Instead of passing a range (abstraction), STL passed iterator pairs (unencapsulated component values). Here, we have four template arguments and six function arguments.To simplify the most frequent and simplest uses, the comparison argument can be defaulted to &lt;: template&lt;class InputIterator1, class InputIterator2, class OutputIterator&gt; OutputIterator merge(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result); This doesn’t reduce the total complexity, but it reduces the surface complexity presented to many users.To really reduce the number of arguments, we need to bundle the arguments into higher-level abstractions: template&lt;class InputRange1, class InputRange2, class OutputIterator&gt; OutputIterator merge(InputRange1 r1, InputRange2 r2, OutputIterator result); Grouping arguments into “bundles” is a general technique to reduce the number of arguments and to increase the opportunities for checking. Alternatively, we could use concepts (as defined by the ISO TS) to define the notion of three types that must be usable for merging: Mergeable{In1, In2, Out} OutputIterator merge(In1 r1, In2 r2, Out result); ExampleThe safety Profiles recommend replacing void f(int* some_ints, int some_ints_length); // BAD: C style, unsafe with void f(gsl::span&lt;int&gt; some_ints); // GOOD: safe, bounds-checked Here, using an abstraction has safety and robustness benefits, and naturally also reduces the number of parameters. NoteHow many parameters are too many? Try to use fewer than four (4) parameters.There are functions that are best expressed with four individual parameters, but not many. Alternative: Use better abstraction: Group arguments into meaningful objects and pass the objects (by value or by reference). Alternative: Use default arguments or overloads to allow the most common forms of calls to be done with fewer arguments. Enforcement Warn when a function declares two iterators (including pointers) of the same type instead of a range or a view. (Not enforceable) This is a philosophical guideline that is infeasible to check directly. I.24: Avoid adjacent unrelated parameters of the same typeReasonAdjacent arguments of the same type are easily swapped by mistake. Example, badConsider: void copy_n(T* p, T* q, int n); // copy from [p:p + n) to [q:q + n) This is a nasty variant of a K&amp;R C-style interface. It is easy to reverse the “to” and “from” arguments. Use const for the “from” argument: void copy_n(const T* p, T* q, int n); // copy from [p:p + n) to [q:q + n) ExceptionIf the order of the parameters is not important, there is no problem: int max(int a, int b); AlternativeDon’t pass arrays as pointers, pass an object representing a range (e.g., a span): void copy_n(span&lt;const T&gt; p, span&lt;T&gt; q); // copy from p to q AlternativeDefine a struct as the parameter type and name the fields for those parameters accordingly: struct SystemParams { string config_file; string output_path; seconds timeout; }; void initialize(SystemParams p); This tends to make invocations of this clear to future readers, as the parametersare often filled in by name at the call site. Enforcement(Simple) Warn if two consecutive parameters share the same type. I.25: Prefer abstract classes as interfaces to class hierarchiesReasonAbstract classes are more likely to be stable than base classes with state. Example, badYou just knew that Shape would turn up somewhere :-) class Shape { // bad: interface class loaded with data public: Point center() const { return c; } virtual void draw() const; virtual void rotate(int); // ... private: Point c; vector&lt;Point&gt; outline; Color col; }; This will force every derived class to compute a center – even if that’s non-trivial and the center is never used. Similarly, not every Shape has a Color, and many Shapes are best represented without an outline defined as a sequence of Points. Abstract classes were invented to discourage users from writing such classes: class Shape { // better: Shape is a pure interface public: virtual Point center() const = 0; // pure virtual functions virtual void draw() const = 0; virtual void rotate(int) = 0; // ... // ... no data members ... // ... virtual ~Shape() = default; }; Enforcement(Simple) Warn if a pointer/reference to a class C is assigned to a pointer/reference to a base of C and the base class contains data members. I.26: If you want a cross-compiler ABI, use a C-style subsetReasonDifferent compilers implement different binary layouts for classes, exception handling, function names, and other implementation details. ExceptionYou can carefully craft an interface using a few carefully selected higher-level C++ types. See ???. ExceptionCommon ABIs are emerging on some platforms freeing you from the more draconian restrictions. NoteIf you use a single compiler, you can use full C++ in interfaces. That may require recompilation after an upgrade to a new compiler version. Enforcement(Not enforceable) It is difficult to reliably identify where an interface forms part of an ABI. I.27: For stable library ABI, consider the Pimpl idiomReasonBecause private data members participate in class layout and private member functions participate in overload resolution, changes to thoseimplementation details require recompilation of all users of a class that uses them. A non-polymorphic interface class holding a pointer toimplementation (Pimpl) can isolate the users of a class from changes in its implementation at the cost of an indirection. Exampleinterface (widget.h) class widget { class impl; std::unique_ptr&lt;impl&gt; pimpl; public: void draw(); // public API that will be forwarded to the implementation widget(int); // defined in the implementation file ~widget(); // defined in the implementation file, where impl is a complete type widget(widget&amp;&amp;) = default; widget(const widget&amp;) = delete; widget&amp; operator=(widget&amp;&amp;); // defined in the implementation file widget&amp; operator=(const widget&amp;) = delete; }; implementation (widget.cpp) class widget::impl { int n; // private data public: void draw(const widget&amp; w) { /* ... */ } impl(int n) : n(n) {} }; void widget::draw() { pimpl-&gt;draw(*this); } widget::widget(int n) : pimpl{std::make_unique&lt;impl&gt;(n)} {} widget::~widget() = default; widget&amp; widget::operator=(widget&amp;&amp;) = default; NotesSee GOTW #100 and cppreference for the trade-offs and additional implementation details associated with this idiom. Enforcement(Not enforceable) It is difficult to reliably identify where an interface forms part of an ABI. I.30: Encapsulate rule violationsReasonTo keep code simple and safe.Sometimes, ugly, unsafe, or error-prone techniques are necessary for logical or performance reasons.If so, keep them local, rather than “infecting” interfaces so that larger groups of programmers have to be aware of thesubtleties.Implementation complexity should, if at all possible, not leak through interfaces into user code. ExampleConsider a program that, depending on some form of input (e.g., arguments to main), should consume inputfrom a file, from the command line, or from standard input.We might write bool owned; owner&lt;istream*&gt; inp; switch (source) { case std_in: owned = false; inp = &amp;cin; break; case command_line: owned = true; inp = new istringstream{argv[2]}; break; case file: owned = true; inp = new ifstream{argv[2]}; break; } istream&amp; in = *inp; This violated the rule against uninitialized variables,the rule against ignoring ownership,and the rule against magic constants.In particular, someone has to remember to somewhere write if (owned) delete inp; We could handle this particular example by using unique_ptr with a special deleter that does nothing for cin,but that’s complicated for novices (who can easily encounter this problem) and the example is an example of a more generalproblem where a property that we would like to consider static (here, ownership) needs infrequently be addressedat run time.The common, most frequent, and safest examples can be handled statically, so we don’t want to add cost and complexity to those.But we must also cope with the uncommon, less-safe, and necessarily more expensive cases.Such examples are discussed in [Str15]. So, we write a class class Istream { [[gsl::suppress(lifetime)]] public: enum Opt { from_line = 1 }; Istream() { } Istream(zstring p) :owned{true}, inp{new ifstream{p}} {} // read from file Istream(zstring p, Opt) :owned{true}, inp{new istringstream{p}} {} // read from command line ~Istream() { if (owned) delete inp; } operator istream&amp; () { return *inp; } private: bool owned = false; istream* inp = &amp;cin; }; Now, the dynamic nature of istream ownership has been encapsulated.Presumably, a bit of checking for potential errors would be added in real code. Enforcement Hard, it is hard to decide what rule-breaking code is essential Flag rule suppression that enable rule-violations to cross interfaces F: FunctionsA function specifies an action or a computation that takes the system from one consistent state to the next. It is the fundamental building block of programs. It should be possible to name a function meaningfully, to specify the requirements of its argument, and clearly state the relationship between the arguments and the result. An implementation is not a specification. Try to think about what a function does as well as about how it does it.Functions are the most critical part in most interfaces, so see the interface rules. Function rule summary: Function definition rules: F.1: “Package” meaningful operations as carefully named functions F.2: A function should perform a single logical operation F.3: Keep functions short and simple F.4: If a function may have to be evaluated at compile time, declare it constexpr F.5: If a function is very small and time-critical, declare it inline F.6: If your function may not throw, declare it noexcept F.7: For general use, take T* or T&amp; arguments rather than smart pointers F.8: Prefer pure functions F.9: Unused parameters should be unnamed Parameter passing expression rules: F.15: Prefer simple and conventional ways of passing information F.16: For “in” parameters, pass cheaply-copied types by value and others by reference to const F.17: For “in-out” parameters, pass by reference to non-const F.18: For “will-move-from” parameters, pass by X&amp;&amp; and std::move the parameter F.19: For “forward” parameters, pass by TP&amp;&amp; and only std::forward the parameter F.20: For “out” output values, prefer return values to output parameters F.21: To return multiple “out” values, prefer returning a struct or tuple F.60: Prefer T* over T&amp; when “no argument” is a valid option Parameter passing semantic rules: F.22: Use T* or owner&lt;T*&gt; to designate a single object F.23: Use a not_null&lt;T&gt; to indicate that “null” is not a valid value F.24: Use a span&lt;T&gt; or a span_p&lt;T&gt; to designate a half-open sequence F.25: Use a zstring or a not_null&lt;zstring&gt; to designate a C-style string F.26: Use a unique_ptr&lt;T&gt; to transfer ownership where a pointer is needed F.27: Use a shared_ptr&lt;T&gt; to share ownership Value return semantic rules: F.42: Return a T* to indicate a position (only) F.43: Never (directly or indirectly) return a pointer or a reference to a local object F.44: Return a T&amp; when copy is undesirable and “returning no object” isn’t needed F.45: Don’t return a T&amp;&amp; F.46: int is the return type for main() F.47: Return T&amp; from assignment operators F.48: Don’t return std::move(local) Other function rules: F.50: Use a lambda when a function won’t do (to capture local variables, or to write a local function) F.51: Where there is a choice, prefer default arguments over overloading F.52: Prefer capturing by reference in lambdas that will be used locally, including passed to algorithms F.53: Avoid capturing by reference in lambdas that will be used nonlocally, including returned, stored on the heap, or passed to another thread F.54: If you capture this, capture all variables explicitly (no default capture) F.55: Don’t use va_arg arguments Functions have strong similarities to lambdas and function objects. See also: C.lambdas: Function objects and lambdas F.def: Function definitionsA function definition is a function declaration that also specifies the function’s implementation, the function body. F.1: “Package” meaningful operations as carefully named functionsReasonFactoring out common code makes code more readable, more likely to be reused, and limit errors from complex code.If something is a well-specified action, separate it out from its surrounding code and give it a name. Example, don’tvoid read_and_print(istream&amp; is) // read and print an int { int x; if (is &gt;&gt; x) cout &lt;&lt; &quot;the int is &quot; &lt;&lt; x &lt;&lt; &apos;\n&apos;; else cerr &lt;&lt; &quot;no int on input\n&quot;; } Almost everything is wrong with read_and_print.It reads, it writes (to a fixed ostream), it writes error messages (to a fixed ostream), it handles only ints.There is nothing to reuse, logically separate operations are intermingled and local variables are in scope after the end of their logical use.For a tiny example, this looks OK, but if the input operation, the output operation, and the error handling had been more complicated the tangledmess could become hard to understand. NoteIf you write a non-trivial lambda that potentially can be used in more than one place, give it a name by assigning it to a (usually non-local) variable. Examplesort(a, b, [](T x, T y) { return x.rank() &lt; y.rank() &amp;&amp; x.value() &lt; y.value(); }); Naming that lambda breaks up the expression into its logical parts and provides a strong hint to the meaning of the lambda. auto lessT = [](T x, T y) { return x.rank() &lt; y.rank() &amp;&amp; x.value() &lt; y.value(); }; sort(a, b, lessT); find_if(a, b, lessT); The shortest code is not always the best for performance or maintainability. ExceptionLoop bodies, including lambdas used as loop bodies, rarely need to be named.However, large loop bodies (e.g., dozens of lines or dozens of pages) can be a problem.The rule Keep functions short and simple implies “Keep loop bodies short.”Similarly, lambdas used as callback arguments are sometimes non-trivial, yet unlikely to be reusable. Enforcement See Keep functions short and simple Flag identical and very similar lambdas used in different places. F.2: A function should perform a single logical operationReasonA function that performs a single operation is simpler to understand, test, and reuse. ExampleConsider: void read_and_print() // bad { int x; cin &gt;&gt; x; // check for errors cout &lt;&lt; x &lt;&lt; &quot;\n&quot;; } This is a monolith that is tied to a specific input and will never find another (different) use. Instead, break functions up into suitable logical parts and parameterize: int read(istream&amp; is) // better { int x; is &gt;&gt; x; // check for errors return x; } void print(ostream&amp; os, int x) { os &lt;&lt; x &lt;&lt; &quot;\n&quot;; } These can now be combined where needed: void read_and_print() { auto x = read(cin); print(cout, x); } If there was a need, we could further templatize read() and print() on the data type, the I/O mechanism, the response to errors, etc. Example: auto read = [](auto&amp; input, auto&amp; value) // better { input &gt;&gt; value; // check for errors }; auto print(auto&amp; output, const auto&amp; value) { output &lt;&lt; value &lt;&lt; &quot;\n&quot;; } Enforcement Consider functions with more than one “out” parameter suspicious. Use return values instead, including tuple for multiple return values. Consider “large” functions that don’t fit on one editor screen suspicious. Consider factoring such a function into smaller well-named suboperations. Consider functions with 7 or more parameters suspicious. F.3: Keep functions short and simpleReasonLarge functions are hard to read, more likely to contain complex code, and more likely to have variables in larger than minimal scopes.Functions with complex control structures are more likely to be long and more likely to hide logical errors ExampleConsider: double simple_func(double val, int flag1, int flag2) // simple_func: takes a value and calculates the expected ASIC output, // given the two mode flags. { double intermediate; if (flag1 &gt; 0) { intermediate = func1(val); if (flag2 % 2) intermediate = sqrt(intermediate); } else if (flag1 == -1) { intermediate = func1(-val); if (flag2 % 2) intermediate = sqrt(-intermediate); flag1 = -flag1; } if (abs(flag2) &gt; 10) { intermediate = func2(intermediate); } switch (flag2 / 10) { case 1: if (flag1 == -1) return finalize(intermediate, 1.171); break; case 2: return finalize(intermediate, 13.1); default: break; } return finalize(intermediate, 0.); } This is too complex (and long).How would you know if all possible alternatives have been correctly handled?Yes, it breaks other rules also. We can refactor: double func1_muon(double val, int flag) { // ??? } double funct1_tau(double val, int flag1, int flag2) { // ??? } double simple_func(double val, int flag1, int flag2) // simple_func: takes a value and calculates the expected ASIC output, // given the two mode flags. { if (flag1 &gt; 0) return func1_muon(val, flag2); if (flag1 == -1) // handled by func1_tau: flag1 = -flag1; return func1_tau(-val, flag1, flag2); return 0.; } Note“It doesn’t fit on a screen” is often a good practical definition of “far too large.”One-to-five-line functions should be considered normal. NoteBreak large functions up into smaller cohesive and named functions.Small simple functions are easily inlined where the cost of a function call is significant. Enforcement Flag functions that do not “fit on a screen.”How big is a screen? Try 60 lines by 140 characters; that’s roughly the maximum that’s comfortable for a book page. Flag functions that are too complex. How complex is too complex?You could use cyclomatic complexity. Try “more than 10 logical path through.” Count a simple switch as one path. F.4: If a function may have to be evaluated at compile time, declare it constexprReason constexpr is needed to tell the compiler to allow compile-time evaluation. ExampleThe (in)famous factorial: constexpr int fac(int n) { constexpr int max_exp = 17; // constexpr enables max_exp to be used in Expects Expects(0 &lt;= n &amp;&amp; n &lt; max_exp); // prevent silliness and overflow int x = 1; for (int i = 2; i &lt;= n; ++i) x *= i; return x; } This is C++14.For C++11, use a recursive formulation of fac(). Noteconstexpr does not guarantee compile-time evaluation;it just guarantees that the function can be evaluated at compile time for constant expression arguments if the programmer requires it or the compiler decides to do so to optimize. constexpr int min(int x, int y) { return x &lt; y ? x : y; } void test(int v) { int m1 = min(-1, 2); // probably compile-time evaluation constexpr int m2 = min(-1, 2); // compile-time evaluation int m3 = min(-1, v); // run-time evaluation constexpr int m4 = min(-1, v); // error: cannot evaluate at compile time } Noteconstexpr functions are pure: they can have no side effects. int dcount = 0; constexpr int double(int v) { ++dcount; // error: attempted side effect from constexpr function return v + v; } This is usually a very good thing. When given a non-constant argument, a constexpr function can throw.If you consider exiting by throwing a side effect, a constexpr function isn’t completely pure;if not, this is not an issue.??? A question for the committee: can a constructor for an exception thrown by a constexpr function modify state?“No” would be a nice answer that matches most practice. NoteDon’t try to make all functions constexpr.Most computation is best done at run time. NoteAny API that may eventually depend on high-level run-time configuration orbusiness logic should not be made constexpr. Such customization can not beevaluated by the compiler, and any constexpr functions that depended uponthat API would have to be refactored or drop constexpr. EnforcementImpossible and unnecessary.The compiler gives an error if a non-constexpr function is called where a constant is required. F.5: If a function is very small and time-critical, declare it inlineReasonSome optimizers are good at inlining without hints from the programmer, but don’t rely on it.Measure! Over the last 40 years or so, we have been promised compilers that can inline better than humans without hints from humans.We are still waiting.Specifying inline encourages the compiler to do a better job. Exampleinline string cat(const string&amp; s, const string&amp; s2) { return s + s2; } ExceptionDo not put an inline function in what is meant to be a stable interface unless you are certain that it will not change.An inline function is part of the ABI. Noteconstexpr implies inline. NoteMember functions defined in-class are inline by default. ExceptionTemplate functions (incl. template member functions) are normally defined in headers and therefore inline. EnforcementFlag inline functions that are more than three statements and could have been declared out of line (such as class member functions). F.6: If your function may not throw, declare it noexceptReasonIf an exception is not supposed to be thrown, the program cannot be assumed to cope with the error and should be terminated as soon as possible. Declaring a function noexcept helps optimizers by reducing the number of alternative execution paths. It also speeds up the exit after failure. ExamplePut noexcept on every function written completely in C or in any other language without exceptions.The C++ Standard Library does that implicitly for all functions in the C Standard Library. Noteconstexpr functions can throw when evaluated at run time, so you may need noexcept for some of those. ExampleYou can use noexcept even on functions that can throw: vector&lt;string&gt; collect(istream&amp; is) noexcept { vector&lt;string&gt; res; for (string s; is &gt;&gt; s;) res.push_back(s); return res; } If collect() runs out of memory, the program crashes.Unless the program is crafted to survive memory exhaustion, that may be just the right thing to do;terminate() may generate suitable error log information (but after memory runs out it is hard to do anything clever). NoteYou must be aware of the execution environment that your code is running whendeciding whether to tag a function noexcept, especially because of the issueof throwing and allocation. Code that is intended to be perfectly general (likethe standard library and other utility code of that sort) needs to supportenvironments where a bad_alloc exception may be handled meaningfully.However, most programs and execution environments cannot meaningfullyhandle a failure to allocate, and aborting the program is the cleanest andsimplest response to an allocation failure in those cases. If you know thatyour application code cannot respond to an allocation failure, it may beappropriate to add noexcept even on functions that allocate. Put another way: In most programs, most functions can throw (e.g., because theyuse new, call functions that do, or use library functions that reports failureby throwing), so don’t just sprinkle noexcept all over the place withoutconsidering whether the possible exceptions can be handled. noexcept is most useful (and most clearly correct) for frequently used,low-level functions. NoteDestructors, swap functions, move operations, and default constructors should never throw. Enforcement Flag functions that are not noexcept, yet cannot throw. Flag throwing swap, move, destructors, and default constructors. F.7: For general use, take T* or T&amp; arguments rather than smart pointersReasonPassing a smart pointer transfers or shares ownership and should only be used when ownership semantics are intended (see R.30).Passing by smart pointer restricts the use of a function to callers that use smart pointers.Passing a shared smart pointer (e.g., std::shared_ptr) implies a run-time cost. Example// accepts any int* void f(int*); // can only accept ints for which you want to transfer ownership void g(unique_ptr&lt;int&gt;); // can only accept ints for which you are willing to share ownership void g(shared_ptr&lt;int&gt;); // doesn&apos;t change ownership, but requires a particular ownership of the caller void h(const unique_ptr&lt;int&gt;&amp;); // accepts any int void h(int&amp;); Example, bad// callee void f(shared_ptr&lt;widget&gt;&amp; w) { // ... use(*w); // only use of w -- the lifetime is not used at all // ... }; See further in R.30. NoteWe can catch dangling pointers statically, so we don’t need to rely on resource management to avoid violations from dangling pointers. See also: Prefer T* over T&amp; when “no argument” is a valid option Smart pointer rule summary EnforcementFlag a parameter of a smart pointer type (a type that overloads operator-&gt; or operator*) for which the ownership semantics are not used;that is copyable but never copied/moved from or movable but never moved and that is never modified or passed along to another function that could do so. F.8: Prefer pure functionsReasonPure functions are easier to reason about, sometimes easier to optimize (and even parallelize), and sometimes can be memoized. Exampletemplate&lt;class T&gt; auto square(T t) { return t * t; } Noteconstexpr functions are pure. When given a non-constant argument, a constexpr function can throw.If you consider exiting by throwing a side effect, a constexpr function isn’t completely pure;if not, this is not an issue.??? A question for the committee: can a constructor for an exception thrown by a constexpr function modify state?“No” would be a nice answer that matches most practice. EnforcementNot possible. F.9: Unused parameters should be unnamedReasonReadability.Suppression of unused parameter warnings. ExampleX* find(map&lt;Blob&gt;&amp; m, const string&amp; s, Hint); // once upon a time, a hint was used NoteAllowing parameters to be unnamed was introduced in the early 1980 to address this problem. EnforcementFlag named unused parameters. F.call: Parameter passingThere are a variety of ways to pass parameters to a function and to return values. F.15: Prefer simple and conventional ways of passing informationReasonUsing “unusual and clever” techniques causes surprises, slows understanding by other programmers, and encourages bugs.If you really feel the need for an optimization beyond the common techniques, measure to ensure that it really is an improvement, and document/comment because the improvement may not be portable. The following tables summarize the advice in the following Guidelines, F.16-21. Normal parameter passing: Advanced parameter passing: Use the advanced techniques only after demonstrating need, and document that need in a comment. F.16: For “in” parameters, pass cheaply-copied types by value and others by reference to constReasonBoth let the caller know that a function will not modify the argument, and both allow initialization by rvalues. What is “cheap to copy” depends on the machine architecture, but two or three words (doubles, pointers, references) are usually best passed by value.When copying is cheap, nothing beats the simplicity and safety of copying, and for small objects (up to two or three words) it is also faster than passing by reference because it does not require an extra indirection to access from the function. Examplevoid f1(const string&amp; s); // OK: pass by reference to const; always cheap void f2(string s); // bad: potentially expensive void f3(int x); // OK: Unbeatable void f4(const int&amp; x); // bad: overhead on access in f4() For advanced uses (only), where you really need to optimize for rvalues passed to “input-only” parameters: If the function is going to unconditionally move from the argument, take it by &amp;&amp;. See F.18. If the function is going to keep a copy of the argument, in addition to passing by const&amp; (for lvalues),add an overload that passes the parameter by &amp;&amp; (for rvalues) and in the body std::moves it to its destination. Essentially this overloads a “will-move-from”; see F.18. In special cases, such as multiple “input + copy” parameters, consider using perfect forwarding. See F.19. Exampleint multiply(int, int); // just input ints, pass by value // suffix is input-only but not as cheap as an int, pass by const&amp; string&amp; concatenate(string&amp;, const string&amp; suffix); void sink(unique_ptr&lt;widget&gt;); // input only, and moves ownership of the widget Avoid “esoteric techniques” such as: Passing arguments as T&amp;&amp; “for efficiency”.Most rumors about performance advantages from passing by &amp;&amp; are false or brittle (but see F.18 and F.19). Returning const T&amp; from assignments and similar operations (see F.47.) ExampleAssuming that Matrix has move operations (possibly by keeping its elements in a std::vector): Matrix operator+(const Matrix&amp; a, const Matrix&amp; b) { Matrix res; // ... fill res with the sum ... return res; } Matrix x = m1 + m2; // move constructor y = m3 + m3; // move assignment NotesThe return value optimization doesn’t handle the assignment case, but the move assignment does. A reference may be assumed to refer to a valid object (language rule).There is no (legitimate) “null reference.”If you need the notion of an optional value, use a pointer, std::optional, or a special value used to denote “no value.” Enforcement (Simple) ((Foundation)) Warn when a parameter being passed by value has a size greater than 4 * sizeof(int).Suggest using a reference to const instead. (Simple) ((Foundation)) Warn when a const parameter being passed by reference has a size less than 3 * sizeof(int). Suggest passing by value instead. (Simple) ((Foundation)) Warn when a const parameter being passed by reference is moved. F.17: For “in-out” parameters, pass by reference to non-constReasonThis makes it clear to callers that the object is assumed to be modified. Examplevoid update(Record&amp; r); // assume that update writes to r NoteA T&amp; argument can pass information into a function as well as out of it.Thus T&amp; could be an in-out-parameter. That can in itself be a problem and a source of errors: void f(string&amp; s) { s = &quot;New York&quot;; // non-obvious error } void g() { string buffer = &quot;.................................&quot;; f(buffer); // ... } Here, the writer of g() is supplying a buffer for f() to fill, but f() simply replaces it (at a somewhat higher cost than a simple copy of the characters).A bad logic error can happen if the writer of g() incorrectly assumes the size of the buffer. Enforcement (Moderate) ((Foundation)) Warn about functions regarding reference to non-const parameters that do not write to them. (Simple) ((Foundation)) Warn when a non-const parameter being passed by reference is moved. F.18: For “will-move-from” parameters, pass by X&amp;&amp; and std::move the parameterReasonIt’s efficient and eliminates bugs at the call site: X&amp;&amp; binds to rvalues, which requires an explicit std::move at the call site if passing an lvalue. Examplevoid sink(vector&lt;int&gt;&amp;&amp; v) { // sink takes ownership of whatever the argument owned // usually there might be const accesses of v here store_somewhere(std::move(v)); // usually no more use of v here; it is moved-from } Note that the std::move(v) makes it possible for store_somewhere() to leave v in a moved-from state.That could be dangerous. ExceptionUnique owner types that are move-only and cheap-to-move, such as unique_ptr, can also be passed by value which is simpler to write and achieves the same effect. Passing by value does generate one extra (cheap) move operation, but prefer simplicity and clarity first. For example: template &lt;class T&gt; void sink(std::unique_ptr&lt;T&gt; p) { // use p ... possibly std::move(p) onward somewhere else } // p gets destroyed Enforcement Flag all X&amp;&amp; parameters (where X is not a template type parameter name) where the function body uses them without std::move. Flag access to moved-from objects. Don’t conditionally move from objects F.19: For “forward” parameters, pass by TP&amp;&amp; and only std::forward the parameterReasonIf the object is to be passed onward to other code and not directly used by this function, we want to make this function agnostic to the argument const-ness and rvalue-ness. In that case, and only that case, make the parameter TP&amp;&amp; where TP is a template type parameter – it both ignores and preserves const-ness and rvalue-ness. Therefore any code that uses a TP&amp;&amp; is implicitly declaring that it itself doesn’t care about the variable’s const-ness and rvalue-ness (because it is ignored), but that intends to pass the value onward to other code that does care about const-ness and rvalue-ness (because it is preserved). When used as a parameter TP&amp;&amp; is safe because any temporary objects passed from the caller will live for the duration of the function call. A parameter of type TP&amp;&amp; should essentially always be passed onward via std::forward in the body of the function. Exampletemplate &lt;class F, class... Args&gt; inline auto invoke(F f, Args&amp;&amp;... args) { return f(forward&lt;Args&gt;(args)...); } ??? calls ??? Enforcement Flag a function that takes a TP&amp;&amp; parameter (where TP is a template type parameter name) and does anything with it other than std::forwarding it exactly once on every static path. F.20: For “out” output values, prefer return values to output parametersReasonA return value is self-documenting, whereas a &amp; could be either in-out or out-only and is liable to be misused. This includes large objects like standard containers that use implicit move operations for performance and to avoid explicit memory management. If you have multiple values to return, use a tuple or similar multi-member type. Example// OK: return pointers to elements with the value x vector&lt;const int*&gt; find_all(const vector&lt;int&gt;&amp;, int x); // Bad: place pointers to elements with value x in-out void find_all(const vector&lt;int&gt;&amp;, vector&lt;const int*&gt;&amp; out, int x); NoteA struct of many (individually cheap-to-move) elements may be in aggregate expensive to move. It is not recommended to return a const value.Such older advice is now obsolete; it does not add value, and it interferes with move semantics. const vector&lt;int&gt; fct(); // bad: that &quot;const&quot; is more trouble than it is worth vector&lt;int&gt; g(const vector&lt;int&gt;&amp; vx) { // ... fct() = vx; // prevented by the &quot;const&quot; // ... return fct(); // expensive copy: move semantics suppressed by the &quot;const&quot; } The argument for adding const to a return value is that it prevents (very rare) accidental access to a temporary.The argument against is prevents (very frequent) use of move semantics. Exceptions For non-value types, such as types in an inheritance hierarchy, return the object by unique_ptr or shared_ptr. If a type is expensive to move (e.g., array&lt;BigPOD&gt;), consider allocating it on the free store and return a handle (e.g., unique_ptr), or passing it in a reference to non-const target object to fill (to be used as an out-parameter). To reuse an object that carries capacity (e.g., std::string, std::vector) across multiple calls to the function in an inner loop: treat it as an in/out parameter and pass by reference. Examplestruct Package { // exceptional case: expensive-to-move object char header[16]; char load[2024 - 16]; }; Package fill(); // Bad: large return value void fill(Package&amp;); // OK int val(); // OK void val(int&amp;); // Bad: Is val reading its argument Enforcement Flag reference to non-const parameters that are not read before being written to and are a type that could be cheaply returned; they should be “out” return values. Flag returning a const value. To fix: Remove const to return a non-const value instead. F.21: To return multiple “out” values, prefer returning a struct or tupleReasonA return value is self-documenting as an “output-only” value.Note that C++ does have multiple return values, by convention of using a tuple (including pair),possibly with the extra convenience of tie at the call site.Prefer using a named struct where there are semantics to the returned value. Otherwise, a nameless tuple is useful in generic code. Example// BAD: output-only parameter documented in a comment int f(const string&amp; input, /*output only*/ string&amp; output_data) { // ... output_data = something(); return status; } // GOOD: self-documenting tuple&lt;int, string&gt; f(const string&amp; input) { // ... return make_tuple(status, something()); } C++98’s standard library already used this style, because a pair is like a two-element tuple.For example, given a set&lt;string&gt; my_set, consider: // C++98 result = my_set.insert(&quot;Hello&quot;); if (result.second) do_something_with(result.first); // workaround With C++11 we can write this, putting the results directly in existing local variables: Sometype iter; // default initialize if we haven&apos;t already Someothertype success; // used these variables for some other purpose tie(iter, success) = my_set.insert(&quot;Hello&quot;); // normal return value if (success) do_something_with(iter); With C++17 we should be able to use “structured bindings” to declare and initialize the multiple variables: if (auto [ iter, success ] = my_set.insert(&quot;Hello&quot;); success) do_something_with(iter); ExceptionSometimes, we need to pass an object to a function to manipulate its state.In such cases, passing the object by reference T&amp; is usually the right technique.Explicitly passing an in-out parameter back out again as a return value is often not necessary.For example: istream&amp; operator&gt;&gt;(istream&amp; is, string&amp; s); // much like std::operator&gt;&gt;() for (string s; cin &gt;&gt; s; ) { // do something with line } Here, both s and cin are used as in-out parameters.We pass cin by (non-const) reference to be able to manipulate its state.We pass s to avoid repeated allocations.By reusing s (passed by reference), we allocate new memory only when we need to expand s‘s capacity.This technique is sometimes called the “caller-allocated out” pattern and is particularly useful for types,such as string and vector, that needs to do free store allocations. To compare, if we passed out all values as return values, we would something like this: pair&lt;istream&amp;, string&gt; get_string(istream&amp; is); // not recommended { string s; is &gt;&gt; s; return {is, s}; } for (auto p = get_string(cin); p.first; ) { // do something with p.second } We consider that significantly less elegant with significantly less performance. For a truly strict reading of this rule (F.21), the exception isn’t really an exception because it relies on in-out parameters,rather than the plain out parameters mentioned in the rule.However, we prefer to be explicit, rather than subtle. NoteIn many cases, it may be useful to return a specific, user-defined type.For example: struct Distance { int value; int unit = 1; // 1 means meters }; Distance d1 = measure(obj1); // access d1.value and d1.unit auto d2 = measure(obj2); // access d2.value and d2.unit auto [value, unit] = measure(obj3); // access value and unit; somewhat redundant // to people who know measure() auto [x, y] = measure(obj4); // don&apos;t; it&apos;s likely to be confusing The overly-generic pair and tuple should be used only when the value returned represents to independent entities rather than an abstraction. Another example, use a specific type along the lines of variant&lt;T, error_code&gt;, rather than using the generic tuple. Enforcement Output parameters should be replaced by return values.An output parameter is one that the function writes to, invokes a non-const member function, or passes on as a non-const. F.22: Use T* or owner&lt;T*&gt; to designate a single objectReasonReadability: it makes the meaning of a plain pointer clear.Enables significant tool support. NoteIn traditional C and C++ code, plain T* is used for many weakly-related purposes, such as: Identify a (single) object (not to be deleted by this function) Point to an object allocated on the free store (and delete it later) Hold the nullptr Identify a C-style string (zero-terminated array of characters) Identify an array with a length specified separately Identify a location in an array This makes it hard to understand what the code does and is supposed to do.It complicates checking and tool support. Examplevoid use(int* p, int n, char* s, int* q) { p[n - 1] = 666; // Bad: we don&apos;t know if p points to n elements; // assume it does not or use span&lt;int&gt; cout &lt;&lt; s; // Bad: we don&apos;t know if that s points to a zero-terminated array of char; // assume it does not or use zstring delete q; // Bad: we don&apos;t know if *q is allocated on the free store; // assume it does not or use owner } better void use2(span&lt;int&gt; p, zstring s, owner&lt;int*&gt; q) { p[p.size() - 1] = 666; // OK, a range error can be caught cout &lt;&lt; s; // OK delete q; // OK } Noteowner&lt;T*&gt; represents ownership, zstring represents a C-style string. Also: Assume that a T* obtained from a smart pointer to T (e.g., unique_ptr&lt;T&gt;) points to a single element. See also: Support library See also: Do not pass an array as a single pointer Enforcement (Simple) ((Bounds)) Warn for any arithmetic operation on an expression of pointer type that results in a value of pointer type. F.23: Use a not_null&lt;T&gt; to indicate that “null” is not a valid valueReasonClarity. A function with a not_null&lt;T&gt; parameter makes it clear that the caller of the function is responsible for any nullptr checks that may be necessary.Similarly, a function with a return value of not_null&lt;T&gt; makes it clear that the caller of the function does not need to check for nullptr. Examplenot_null&lt;T*&gt; makes it obvious to a reader (human or machine) that a test for nullptr is not necessary before dereference.Additionally, when debugging, owner&lt;T*&gt; and not_null&lt;T&gt; can be instrumented to check for correctness. Consider: int length(Record* p); When I call length(p) should I check if p is nullptr first? Should the implementation of length() check if p is nullptr? // it is the caller&apos;s job to make sure p != nullptr int length(not_null&lt;Record*&gt; p); // the implementor of length() must assume that p == nullptr is possible int length(Record* p); NoteA not_null&lt;T*&gt; is assumed not to be the nullptr; a T* may be the nullptr; both can be represented in memory as a T* (so no run-time overhead is implied). Notenot_null is not just for built-in pointers. It works for unique_ptr, shared_ptr, and other pointer-like types. Enforcement (Simple) Warn if a raw pointer is dereferenced without being tested against nullptr (or equivalent) within a function, suggest it is declared not_null instead. (Simple) Error if a raw pointer is sometimes dereferenced after first being tested against nullptr (or equivalent) within the function and sometimes is not. (Simple) Warn if a not_null pointer is tested against nullptr within a function. F.24: Use a span&lt;T&gt; or a span_p&lt;T&gt; to designate a half-open sequenceReasonInformal/non-explicit ranges are a source of errors. ExampleX* find(span&lt;X&gt; r, const X&amp; v); // find v in r vector&lt;X&gt; vec; // ... auto p = find({vec.begin(), vec.end()}, X{}); // find X{} in vec NoteRanges are extremely common in C++ code. Typically, they are implicit and their correct use is very hard to ensure.In particular, given a pair of arguments (p, n) designating an array [p:p+n),it is in general impossible to know if there really are n elements to access following *p.span&lt;T&gt; and span_p&lt;T&gt; are simple helper classes designating a [p:q) range and a range starting with p and ending with the first element for which a predicate is true, respectively. ExampleA span represents a range of elements, but how do we manipulate elements of that range? void f(span&lt;int&gt; s) { // range traversal (guaranteed correct) for (int x : s) cout &lt;&lt; x &lt;&lt; &apos;\n&apos;; // C-style traversal (potentially checked) for (gsl::index i = 0; i &lt; s.size(); ++i) cout &lt;&lt; s[i] &lt;&lt; &apos;\n&apos;; // random access (potentially checked) s[7] = 9; // extract pointers (potentially checked) std::sort(&amp;s[0], &amp;s[s.size() / 2]); } NoteA span&lt;T&gt; object does not own its elements and is so small that it can be passed by value. Passing a span object as an argument is exactly as efficient as passing a pair of pointer arguments or passing a pointer and an integer count. See also: Support library Enforcement(Complex) Warn where accesses to pointer parameters are bounded by other parameters that are integral types and suggest they could use span instead. F.25: Use a zstring or a not_null&lt;zstring&gt; to designate a C-style stringReasonC-style strings are ubiquitous. They are defined by convention: zero-terminated arrays of characters.We must distinguish C-style strings from a pointer to a single character or an old-fashioned pointer to an array of characters. ExampleConsider: int length(const char* p); When I call length(s) should I check if s is nullptr first? Should the implementation of length() check if p is nullptr? // the implementor of length() must assume that p == nullptr is possible int length(zstring p); // it is the caller&apos;s job to make sure p != nullptr int length(not_null&lt;zstring&gt; p); Notezstring do not represent ownership. See also: Support library F.26: Use a unique_ptr&lt;T&gt; to transfer ownership where a pointer is neededReasonUsing unique_ptr is the cheapest way to pass a pointer safely. See also: C.50 regarding when to return a shared_ptr from a factory. Exampleunique_ptr&lt;Shape&gt; get_shape(istream&amp; is) // assemble shape from input stream { auto kind = read_header(is); // read header and identify the next shape on input switch (kind) { case kCircle: return make_unique&lt;Circle&gt;(is); case kTriangle: return make_unique&lt;Triangle&gt;(is); // ... } } NoteYou need to pass a pointer rather than an object if what you are transferring is an object from a class hierarchy that is to be used through an interface (base class). Enforcement(Simple) Warn if a function returns a locally allocated raw pointer. Suggest using either unique_ptr or shared_ptr instead. F.27: Use a shared_ptr&lt;T&gt; to share ownershipReasonUsing std::shared_ptr is the standard way to represent shared ownership. That is, the last owner deletes the object. Exampleshared_ptr&lt;const Image&gt; im { read_image(somewhere) }; std::thread t0 {shade, args0, top_left, im}; std::thread t1 {shade, args1, top_right, im}; std::thread t2 {shade, args2, bottom_left, im}; std::thread t3 {shade, args3, bottom_right, im}; // detach threads // last thread to finish deletes the image NotePrefer a unique_ptr over a shared_ptr if there is never more than one owner at a time.shared_ptr is for shared ownership. Note that pervasive use of shared_ptr has a cost (atomic operations on the shared_ptr‘s reference count have a measurable aggregate cost). AlternativeHave a single object own the shared object (e.g. a scoped object) and destroy that (preferably implicitly) when all users have completed. Enforcement(Not enforceable) This is a too complex pattern to reliably detect. F.60: Prefer T* over T&amp; when “no argument” is a valid optionReasonA pointer (T*) can be a nullptr and a reference (T&amp;) cannot, there is no valid “null reference”.Sometimes having nullptr as an alternative to indicated “no object” is useful, but if it is not, a reference is notationally simpler and might yield better code. Examplestring zstring_to_string(zstring p) // zstring is a char*; that is a C-style string { if (!p) return string{}; // p might be nullptr; remember to check return string{p}; } void print(const vector&lt;int&gt;&amp; r) { // r refers to a vector&lt;int&gt;; no check needed } NoteIt is possible, but not valid C++ to construct a reference that is essentially a nullptr (e.g., T* p = nullptr; T&amp; r = (T&amp;)*p;).That error is very uncommon. NoteIf you prefer the pointer notation (-&gt; and/or * vs. .), not_null&lt;T*&gt; provides the same guarantee as T&amp;. Enforcement Flag ??? F.42: Return a T* to indicate a position (only)ReasonThat’s what pointers are good for.Returning a T* to transfer ownership is a misuse. ExampleNode* find(Node* t, const string&amp; s) // find s in a binary tree of Nodes { if (!t || t-&gt;name == s) return t; if ((auto p = find(t-&gt;left, s))) return p; if ((auto p = find(t-&gt;right, s))) return p; return nullptr; } If it isn’t the nullptr, the pointer returned by find indicates a Node holding s.Importantly, that does not imply a transfer of ownership of the pointed-to object to the caller. NotePositions can also be transferred by iterators, indices, and references.A reference is often a superior alternative to a pointer if there is no need to use nullptr or if the object referred to should not change. NoteDo not return a pointer to something that is not in the caller’s scope; see F.43. See also: discussion of dangling pointer prevention Enforcement Flag delete, std::free(), etc. applied to a plain T*.Only owners should be deleted. Flag new, malloc(), etc. assigned to a plain T*.Only owners should be responsible for deletion. F.43: Never (directly or indirectly) return a pointer or a reference to a local objectReasonTo avoid the crashes and data corruption that can result from the use of such a dangling pointer. Example, badAfter the return from a function its local objects no longer exist: int* f() { int fx = 9; return &amp;fx; // BAD } void g(int* p) // looks innocent enough { int gx; cout &lt;&lt; &quot;*p == &quot; &lt;&lt; *p &lt;&lt; &apos;\n&apos;; *p = 999; cout &lt;&lt; &quot;gx == &quot; &lt;&lt; gx &lt;&lt; &apos;\n&apos;; } void h() { int* p = f(); int z = *p; // read from abandoned stack frame (bad) g(p); // pass pointer to abandoned stack frame to function (bad) } Here on one popular implementation I got the output: *p == 999 gx == 999 I expected that because the call of g() reuses the stack space abandoned by the call of f() so *p refers to the space now occupied by gx. Imagine what would happen if fx and gx were of different types. Imagine what would happen if fx or gx was a type with an invariant. Imagine what would happen if more that dangling pointer was passed around among a larger set of functions. Imagine what a cracker could do with that dangling pointer. Fortunately, most (all?) modern compilers catch and warn against this simple case. NoteThis applies to references as well: int&amp; f() { int x = 7; // ... return x; // Bad: returns reference to object that is about to be destroyed } NoteThis applies only to non-static local variables.All static variables are (as their name indicates) statically allocated, so that pointers to them cannot dangle. Example, badNot all examples of leaking a pointer to a local variable are that obvious: int* glob; // global variables are bad in so many ways template&lt;class T&gt; void steal(T x) { glob = x(); // BAD } void f() { int i = 99; steal([&amp;] { return &amp;i; }); } int main() { f(); cout &lt;&lt; *glob &lt;&lt; &apos;\n&apos;; } Here I managed to read the location abandoned by the call of f.The pointer stored in glob could be used much later and cause trouble in unpredictable ways. NoteThe address of a local variable can be “returned”/leaked by a return statement, by a T&amp; out-parameter, as a member of a returned object, as an element of a returned array, and more. NoteSimilar examples can be constructed “leaking” a pointer from an inner scope to an outer one;such examples are handled equivalently to leaks of pointers out of a function. A slightly different variant of the problem is placing pointers in a container that outlives the objects pointed to. See also: Another way of getting dangling pointers is pointer invalidation.It can be detected/prevented with similar techniques. Enforcement Compilers tend to catch return of reference to locals and could in many cases catch return of pointers to locals. Static analysis can catch many common patterns of the use of pointers indicating positions (thus eliminating dangling pointers) F.44: Return a T&amp; when copy is undesirable and “returning no object” isn’t neededReasonThe language guarantees that a T&amp; refers to an object, so that testing for nullptr isn’t necessary. See also: The return of a reference must not imply transfer of ownership:discussion of dangling pointer prevention and discussion of ownership. Exampleclass Car { array&lt;wheel, 4&gt; w; // ... public: wheel&amp; get_wheel(int i) { Expects(i &lt; w.size()); return w[i]; } // ... }; void use() { Car c; wheel&amp; w0 = c.get_wheel(0); // w0 has the same lifetime as c } EnforcementFlag functions where no return expression could yield nullptr F.45: Don’t return a T&amp;&amp;ReasonIt’s asking to return a reference to a destroyed temporary object. A &amp;&amp; is a magnet for temporary objects. This is fine when the reference to the temporary is being passed “downward” to a callee, because the temporary is guaranteed to outlive the function call (see F.18 and F.19). However, it’s not fine when passing such a reference “upward” to a larger caller scope. See also ???. For passthrough functions that pass in parameters (by ordinary reference or by perfect forwarding) and want to return values, use simple auto return type deduction (not auto&amp;&amp;). Example, badIf F returns by value, this function returns a reference to a temporary. template&lt;class F&gt; auto&amp;&amp; wrapper(F f) { log_call(typeid(f)); // or whatever instrumentation return f(); } Example, goodBetter: template&lt;class F&gt; auto wrapper(F f) { log_call(typeid(f)); // or whatever instrumentation return f(); } Exceptionstd::move and std::forward do return &amp;&amp;, but they are just casts – used by convention only in expression contexts where a reference to a temporary object is passed along within the same expression before the temporary is destroyed. We don’t know of any other good examples of returning &amp;&amp;. EnforcementFlag any use of &amp;&amp; as a return type, except in std::move and std::forward. F.46: int is the return type for main()ReasonIt’s a language rule, but violated through “language extensions” so often that it is worth mentioning.Declaring main (the one global main of a program) void limits portability. Examplevoid main() { /* ... */ }; // bad, not C++ int main() { std::cout &lt;&lt; &quot;This is the way to do it\n&quot;; } NoteWe mention this only because of the persistence of this error in the community. Enforcement The compiler should do it If the compiler doesn’t do it, let tools flag it F.47: Return T&amp; from assignment operatorsReasonThe convention for operator overloads (especially on value types) is foroperator=(const T&amp;) to perform the assignment and then return (non-const)*this. This ensures consistency with standard-library types and follows theprinciple of “do as the ints do.” NoteHistorically there was some guidance to make the assignment operator return const T&amp;.This was primarily to avoid code of the form (a = b) = c – such code is not common enough to warrant violating consistency with standard types. Exampleclass Foo { public: ... Foo&amp; operator=(const Foo&amp; rhs) { // Copy members. ... return *this; } }; EnforcementThis should be enforced by tooling by checking the return type (and returnvalue) of any assignment operator. F.48: Don’t return std::move(local)ReasonWith guaranteed copy elision, it is now almost always a pessimization to expressly use std::move in a return statement. Example; badS f() { S result; return std::move(result); } Example; goodS f() { S result; return result; } EnforcementThis should be enforced by tooling by checking the return expression . F.50: Use a lambda when a function won’t do (to capture local variables, or to write a local function)ReasonFunctions can’t capture local variables or be declared at local scope; if you need those things, prefer a lambda where possible, and a handwritten function object where not. On the other hand, lambdas and function objects don’t overload; if you need to overload, prefer a function (the workarounds to make lambdas overload are ornate). If either will work, prefer writing a function; use the simplest tool necessary. Example// writing a function that should only take an int or a string // -- overloading is natural void f(int); void f(const string&amp;); // writing a function object that needs to capture local state and appear // at statement or expression scope -- a lambda is natural vector&lt;work&gt; v = lots_of_work(); for (int tasknum = 0; tasknum &lt; max; ++tasknum) { pool.run([=, &amp;v]{ /* ... ... process 1 / max - th of v, the tasknum - th chunk ... */ }); } pool.join(); ExceptionGeneric lambdas offer a concise way to write function templates and so can be useful even when a normal function template would do equally well with a little more syntax. This advantage will probably disappear in the future once all functions gain the ability to have Concept parameters. Enforcement Warn on use of a named non-generic lambda (e.g., auto x = [](int i){ /*...*/; };) that captures nothing and appears at global scope. Write an ordinary function instead. F.51: Where there is a choice, prefer default arguments over overloadingReasonDefault arguments simply provide alternative interfaces to a single implementation.There is no guarantee that a set of overloaded functions all implement the same semantics.The use of default arguments can avoid code replication. NoteThere is a choice between using default argument and overloading when the alternatives are from a set of arguments of the same types.For example: void print(const string&amp; s, format f = {}); as opposed to void print(const string&amp; s); // use default format void print(const string&amp; s, format f); There is not a choice when a set of functions are used to do a semantically equivalent operation to a set of types. For example: void print(const char&amp;); void print(int); void print(zstring); See alsoDefault arguments for virtual functions Enforcement??? F.52: Prefer capturing by reference in lambdas that will be used locally, including passed to algorithmsReasonFor efficiency and correctness, you nearly always want to capture by reference when using the lambda locally. This includes when writing or calling parallel algorithms that are local because they join before returning. DiscussionThe efficiency consideration is that most types are cheaper to pass by reference than by value. The correctness consideration is that many calls want to perform side effects on the original object at the call site (see example below). Passing by value prevents this. NoteUnfortunately, there is no simple way to capture by reference to const to get the efficiency for a local call but also prevent side effects. ExampleHere, a large object (a network message) is passed to an iterative algorithm, and is it not efficient or correct to copy the message (which may not be copyable): std::for_each(begin(sockets), end(sockets), [&amp;message](auto&amp; socket) { socket.send(message); }); ExampleThis is a simple three-stage parallel pipeline. Each stage object encapsulates a worker thread and a queue, has a process function to enqueue work, and in its destructor automatically blocks waiting for the queue to empty before ending the thread. void send_packets(buffers&amp; bufs) { stage encryptor([] (buffer&amp; b){ encrypt(b); }); stage compressor([&amp;](buffer&amp; b){ compress(b); encryptor.process(b); }); stage decorator([&amp;](buffer&amp; b){ decorate(b); compressor.process(b); }); for (auto&amp; b : bufs) { decorator.process(b); } } // automatically blocks waiting for pipeline to finish EnforcementFlag a lambda that captures by reference, but is used other than locally within the function scope or passed to a function by reference. (Note: This rule is an approximation, but does flag passing by pointer as those are more likely to be stored by the callee, writing to a heap location accessed via a parameter, returning the lambda, etc. The Lifetime rules will also provide general rules that flag escaping pointers and references including via lambdas.) F.53: Avoid capturing by reference in lambdas that will be used nonlocally, including returned, stored on the heap, or passed to another threadReasonPointers and references to locals shouldn’t outlive their scope. Lambdas that capture by reference are just another place to store a reference to a local object, and shouldn’t do so if they (or a copy) outlive the scope. Example, badint local = 42; // Want a reference to local. // Note, that after program exits this scope, // local no longer exists, therefore // process() call will have undefined behavior! thread_pool.queue_work([&amp;]{ process(local); }); Example, goodint local = 42; // Want a copy of local. // Since a copy of local is made, it will // always be available for the call. thread_pool.queue_work([=]{ process(local); }); Enforcement (Simple) Warn when capture-list contains a reference to a locally declared variable (Complex) Flag when capture-list contains a reference to a locally declared variable and the lambda is passed to a non-const and non-local context F.54: If you capture this, capture all variables explicitly (no default capture)ReasonIt’s confusing. Writing [=] in a member function appears to capture by value, but actually captures data members by reference because it actually captures the invisible this pointer by value. If you meant to do that, write this explicitly. Exampleclass My_class { int x = 0; // ... void f() { int i = 0; // ... auto lambda = [=]{ use(i, x); }; // BAD: &quot;looks like&quot; copy/value capture // [&amp;] has identical semantics and copies the this pointer under the current rules // [=,this] and [&amp;,this] are not much better, and confusing x = 42; lambda(); // calls use(0, 42); x = 43; lambda(); // calls use(0, 43); // ... auto lambda2 = [i, this]{ use(i, x); }; // ok, most explicit and least confusing // ... } }; NoteThis is under active discussion in standardization, and may be addressed in a future version of the standard by adding a new capture mode or possibly adjusting the meaning of [=]. For now, just be explicit. Enforcement Flag any lambda capture-list that specifies a default capture and also captures this (whether explicitly or via default capture) F.55: Don’t use va_arg argumentsReasonReading from a va_arg assumes that the correct type was actually passed.Passing to varargs assumes the correct type will be read.This is fragile because it cannot generally be enforced to be safe in the language and so relies on programmer discipline to get it right. Exampleint sum(...) { // ... while (/*...*/) result += va_arg(list, int); // BAD, assumes it will be passed ints // ... } sum(3, 2); // ok sum(3.14159, 2.71828); // BAD, undefined template&lt;class ...Args&gt; auto sum(Args... args) { // GOOD, and much more flexible return (... + args); // note: C++17 &quot;fold expression&quot; } sum(3, 2); // ok: 5 sum(3.14159, 2.71828); // ok: ~5.85987 Alternatives overloading variadic templates variant arguments initializer_list (homogeneous) NoteDeclaring a ... parameter is sometimes useful for techniques that don’t involve actual argument passing, notably to declare “take-anything” functions so as to disable “everything else” in an overload set or express a catchall case in a template metaprogram. Enforcement Issue a diagnostic for using va_list, va_start, or va_arg. Issue a diagnostic for passing an argument to a vararg parameter of a function that does not offer an overload for a more specific type in the position of the vararg. To fix: Use a different function, or [[suppress(types)]]. C: Classes and class hierarchiesA class is a user-defined type, for which a programmer can define the representation, operations, and interfaces.Class hierarchies are used to organize related classes into hierarchical structures. Class rule summary: C.1: Organize related data into structures (structs or classes) C.2: Use class if the class has an invariant; use struct if the data members can vary independently C.3: Represent the distinction between an interface and an implementation using a class C.4: Make a function a member only if it needs direct access to the representation of a class C.5: Place helper functions in the same namespace as the class they support C.7: Don’t define a class or enum and declare a variable of its type in the same statement C.8: Use class rather than struct if any member is non-public C.9: Minimize exposure of members Subsections: C.concrete: Concrete types C.ctor: Constructors, assignments, and destructors C.con: Containers and other resource handles C.lambdas: Function objects and lambdas C.hier: Class hierarchies (OOP) C.over: Overloading and overloaded operators C.union: Unions C.1: Organize related data into structures (structs or classes)ReasonEase of comprehension.If data is related (for fundamental reasons), that fact should be reflected in code. Examplevoid draw(int x, int y, int x2, int y2); // BAD: unnecessary implicit relationships void draw(Point from, Point to); // better NoteA simple class without virtual functions implies no space or time overhead. NoteFrom a language perspective class and struct differ only in the default visibility of their members. EnforcementProbably impossible. Maybe a heuristic looking for data items used together is possible. C.2: Use class if the class has an invariant; use struct if the data members can vary independentlyReasonReadability.Ease of comprehension.The use of class alerts the programmer to the need for an invariant.This is a useful convention. NoteAn invariant is a logical condition for the members of an object that a constructor must establish for the public member functions to assume.After the invariant is established (typically by a constructor) every member function can be called for the object.An invariant can be stated informally (e.g., in a comment) or more formally using Expects. If all data members can vary independently of each other, no invariant is possible. Examplestruct Pair { // the members can vary independently string name; int volume; }; but: class Date { public: // validate that {yy, mm, dd} is a valid date and initialize Date(int yy, Month mm, char dd); // ... private: int y; Month m; char d; // day }; NoteIf a class has any private data, a user cannot completely initialize an object without the use of a constructor.Hence, the class definer will provide a constructor and must specify its meaning.This effectively means the definer need to define an invariant. See also: define a class with private data as class Prefer to place the interface first in a class minimize exposure of members Avoid protected data EnforcementLook for structs with all data private and classes with public members. C.3: Represent the distinction between an interface and an implementation using a classReasonAn explicit distinction between interface and implementation improves readability and simplifies maintenance. Exampleclass Date { // ... some representation ... public: Date(); // validate that {yy, mm, dd} is a valid date and initialize Date(int yy, Month mm, char dd); int day() const; Month month() const; // ... }; For example, we can now change the representation of a Date without affecting its users (recompilation is likely, though). NoteUsing a class in this way to represent the distinction between interface and implementation is of course not the only way.For example, we can use a set of declarations of freestanding functions in a namespace, an abstract base class, or a template function with concepts to represent an interface.The most important issue is to explicitly distinguish between an interface and its implementation “details.”Ideally, and typically, an interface is far more stable than its implementation(s). Enforcement??? C.4: Make a function a member only if it needs direct access to the representation of a classReasonLess coupling than with member functions, fewer functions that can cause trouble by modifying object state, reduces the number of functions that needs to be modified after a change in representation. Exampleclass Date { // ... relatively small interface ... }; // helper functions: Date next_weekday(Date); bool operator==(Date, Date); The “helper functions” have no need for direct access to the representation of a Date. NoteThis rule becomes even better if C++ gets “uniform function call”. ExceptionThe language requires virtual functions to be members, and not all virtual functions directly access data.In particular, members of an abstract class rarely do. Note multi-methods. ExceptionThe language requires operators =, (), [], and -&gt; to be members. ExceptionAn overload set may have some members that do not directly access private data: class Foobar { public: void foo(long x) { /* manipulate private data */ } void foo(double x) { foo(std::lround(x)); } // ... private: // ... }; Similarly, a set of functions may be designed to be used in a chain: x.scale(0.5).rotate(45).set_color(Color::red); Typically, some but not all of such functions directly access private data. Enforcement Look for non-virtual member functions that do not touch data members directly.The snag is that many member functions that do not need to touch data members directly do. Ignore virtual functions. Ignore functions that are part of an overload set out of which at least one function accesses private members. Ignore functions returning this. C.5: Place helper functions in the same namespace as the class they supportReasonA helper function is a function (usually supplied by the writer of a class) that does not need direct access to the representation of the class, yet is seen as part of the useful interface to the class.Placing them in the same namespace as the class makes their relationship to the class obvious and allows them to be found by argument dependent lookup. Examplenamespace Chrono { // here we keep time-related services class Time { /* ... */ }; class Date { /* ... */ }; // helper functions: bool operator==(Date, Date); Date next_weekday(Date); // ... } NoteThis is especially important for overloaded operators. Enforcement Flag global functions taking argument types from a single namespace. C.7: Don’t define a class or enum and declare a variable of its type in the same statementReasonMixing a type definition and the definition of another entity in the same declaration is confusing and unnecessary. Example; badstruct Data { /*...*/ } data{ /*...*/ }; Example; goodstruct Data { /*...*/ }; Data data{ /*...*/ }; Enforcement Flag if the } of a class or enumeration definition is not followed by a ;. The ; is missing. C.8: Use class rather than struct if any member is non-publicReasonReadability.To make it clear that something is being hidden/abstracted.This is a useful convention. Example, badstruct Date { int d, m; Date(int i, Month m); // ... lots of functions ... private: int y; // year }; There is nothing wrong with this code as far as the C++ language rules are concerned,but nearly everything is wrong from a design perspective.The private data is hidden far from the public data.The data is split in different parts of the class declaration.Different parts of the data have different access.All of this decreases readability and complicates maintenance. NotePrefer to place the interface first in a class, see NL.16. EnforcementFlag classes declared with struct if there is a private or protected member. C.9: Minimize exposure of membersReasonEncapsulation.Information hiding.Minimize the chance of unintended access.This simplifies maintenance. Exampletemplate&lt;typename T, typename U&gt; struct pair { T a; U b; // ... }; Whatever we do in the //-part, an arbitrary user of a pair can arbitrarily and independently change its a and b.In a large code base, we cannot easily find which code does what to the members of pair.This may be exactly what we want, but if we want to enforce a relation among members, we need to make them privateand enforce that relation (invariant) through constructors and member functions.For example: class Distance { public: // ... double meters() const { return magnitude*unit; } void set_unit(double u) { // ... check that u is a factor of 10 ... // ... change magnitude appropriately ... unit = u; } // ... private: double magnitude; double unit; // 1 is meters, 1000 is kilometers, 0.001 is millimeters, etc. }; NoteIf the set of direct users of a set of variables cannot be easily determined, the type or usage of that set cannot be (easily) changed/improved.For public and protected data, that’s usually the case. ExampleA class can provide two interfaces to its users.One for derived classes (protected) and one for general users (public).For example, a derived class might be allowed to skip a run-time check because it has already guaranteed correctness: class Foo { public: int bar(int x) { check(x); return do_bar(x); } // ... protected: int do_bar(int x); // do some operation on the data // ... private: // ... data ... }; class Dir : public Foo { //... int mem(int x, int y) { /* ... do something ... */ return do_bar(x + y); // OK: derived class can bypass check } }; void user(Foo&amp; x) { int r1 = x.bar(1); // OK, will check int r2 = x.do_bar(2); // error: would bypass check // ... } Noteprotected data is a bad idea. NotePrefer the order public members before protected members before private members see. Enforcement Flag protected data. Flag mixtures of public and private data C.concrete: Concrete typesOne ideal for a class is to be a regular type.That means roughly “behaves like an int.” A concrete type is the simplest kind of class.A value of regular type can be copied and the result of a copy is an independent object with the same value as the original.If a concrete type has both = and ==, a = b should result in a == b being true.Concrete classes without assignment and equality can be defined, but they are (and should be) rare.The C++ built-in types are regular, and so are standard-library classes, such as string, vector, and map.Concrete types are also often referred to as value types to distinguish them from types used as part of a hierarchy. Concrete type rule summary: C.10: Prefer concrete types over class hierarchies C.11: Make concrete types regular C.10: Prefer concrete types over class hierarchiesReasonA concrete type is fundamentally simpler than a hierarchy:easier to design, easier to implement, easier to use, easier to reason about, smaller, and faster.You need a reason (use cases) for using a hierarchy. Exampleclass Point1 { int x, y; // ... operations ... // ... no virtual functions ... }; class Point2 { int x, y; // ... operations, some virtual ... virtual ~Point2(); }; void use() { Point1 p11 {1, 2}; // make an object on the stack Point1 p12 {p11}; // a copy auto p21 = make_unique&lt;Point2&gt;(1, 2); // make an object on the free store auto p22 = p21.clone(); // make a copy // ... } If a class can be part of a hierarchy, we (in real code if not necessarily in small examples) must manipulate its objects through pointers or references.That implies more memory overhead, more allocations and deallocations, and more run-time overhead to perform the resulting indirections. NoteConcrete types can be stack-allocated and be members of other classes. NoteThe use of indirection is fundamental for run-time polymorphic interfaces.The allocation/deallocation overhead is not (that’s just the most common case).We can use a base class as the interface of a scoped object of a derived class.This is done where dynamic allocation is prohibited (e.g. hard-real-time) and to provide a stable interface to some kinds of plug-ins. Enforcement??? C.11: Make concrete types regularReasonRegular types are easier to understand and reason about than types that are not regular (irregularities requires extra effort to understand and use). Examplestruct Bundle { string name; vector&lt;Record&gt; vr; }; bool operator==(const Bundle&amp; a, const Bundle&amp; b) { return a.name == b.name &amp;&amp; a.vr == b.vr; } Bundle b1 { &quot;my bundle&quot;, {r1, r2, r3}}; Bundle b2 = b1; if (!(b1 == b2)) error(&quot;impossible!&quot;); b2.name = &quot;the other bundle&quot;; if (b1 == b2) error(&quot;No!&quot;); In particular, if a concrete type has an assignment also give it an equals operator so that a = b implies a == b. Enforcement??? C.ctor: Constructors, assignments, and destructorsThese functions control the lifecycle of objects: creation, copy, move, and destruction.Define constructors to guarantee and simplify initialization of classes. These are default operations: a default constructor: X() a copy constructor: X(const X&amp;) a copy assignment: operator=(const X&amp;) a move constructor: X(X&amp;&amp;) a move assignment: operator=(X&amp;&amp;) a destructor: ~X() By default, the compiler defines each of these operations if it is used, but the default can be suppressed. The default operations are a set of related operations that together implement the lifecycle semantics of an object.By default, C++ treats classes as value-like types, but not all types are value-like. Set of default operations rules: C.20: If you can avoid defining any default operations, do C.21: If you define or =delete any default operation, define or =delete them all C.22: Make default operations consistent Destructor rules: C.30: Define a destructor if a class needs an explicit action at object destruction C.31: All resources acquired by a class must be released by the class’s destructor C.32: If a class has a raw pointer (T*) or reference (T&amp;), consider whether it might be owning C.33: If a class has an owning pointer member, define or =delete a destructor C.35: A base class with a virtual function needs a virtual destructor C.36: A destructor may not fail C.37: Make destructors noexcept Constructor rules: C.40: Define a constructor if a class has an invariant C.41: A constructor should create a fully initialized object C.42: If a constructor cannot construct a valid object, throw an exception C.43: Ensure that a copyable (value type) class has a default constructor C.44: Prefer default constructors to be simple and non-throwing C.45: Don’t define a default constructor that only initializes data members; use member initializers instead C.46: By default, declare single-argument constructors explicit C.47: Define and initialize member variables in the order of member declaration C.48: Prefer in-class initializers to member initializers in constructors for constant initializers C.49: Prefer initialization to assignment in constructors C.50: Use a factory function if you need “virtual behavior” during initialization C.51: Use delegating constructors to represent common actions for all constructors of a class C.52: Use inheriting constructors to import constructors into a derived class that does not need further explicit initialization Copy and move rules: C.60: Make copy assignment non-virtual, take the parameter by const&amp;, and return by non-const&amp; C.61: A copy operation should copy C.62: Make copy assignment safe for self-assignment C.63: Make move assignment non-virtual, take the parameter by &amp;&amp;, and return by non-const&amp; C.64: A move operation should move and leave its source in a valid state C.65: Make move assignment safe for self-assignment C.66: Make move operations noexcept C.67: A base class should suppress copying, and provide a virtual clone instead if “copying” is desired Other default operations rules: C.80: Use =default if you have to be explicit about using the default semantics C.81: Use =delete when you want to disable default behavior (without wanting an alternative) C.82: Don’t call virtual functions in constructors and destructors C.83: For value-like types, consider providing a noexcept swap function C.84: A swap may not fail C.85: Make swap noexcept C.86: Make == symmetric with respect of operand types and noexcept C.87: Beware of == on base classes C.89: Make a hash noexcept C.defop: Default OperationsBy default, the language supplies the default operations with their default semantics.However, a programmer can disable or replace these defaults. C.20: If you can avoid defining default operations, doReasonIt’s the simplest and gives the cleanest semantics. Examplestruct Named_map { public: // ... no default operations declared ... private: string name; map&lt;int, int&gt; rep; }; Named_map nm; // default construct Named_map nm2 {nm}; // copy construct Since std::map and string have all the special functions, no further work is needed. NoteThis is known as “the rule of zero”. Enforcement(Not enforceable) While not enforceable, a good static analyzer can detect patterns that indicate a possible improvement to meet this rule.For example, a class with a (pointer, size) pair of member and a destructor that deletes the pointer could probably be converted to a vector. C.21: If you define or =delete any default operation, define or =delete them allReasonThe special member functions are the default constructor, copy constructor,copy assignment operator, move constructor, move assignment operator, anddestructor. The semantics of the special functions are closely related, so if one needs to be declared, the odds are that others need consideration too. Declaring any special member function except a default constructor,even as =default or =delete, will suppress the implicit declarationof a move constructor and move assignment operator.Declaring a move constructor or move assignment operator, even as=default or =delete, will cause an implicitly generated copy constructoror implicitly generated copy assignment operator to be defined as deleted.So as soon as any of the special functions is declared, the others shouldall be declared to avoid unwanted effects like turning all potential movesinto more expensive copies, or making a class move-only. Example, badstruct M2 { // bad: incomplete set of default operations public: // ... // ... no copy or move operations ... ~M2() { delete[] rep; } private: pair&lt;int, int&gt;* rep; // zero-terminated set of pairs }; void use() { M2 x; M2 y; // ... x = y; // the default assignment // ... } Given that “special attention” was needed for the destructor (here, to deallocate), the likelihood that copy and move assignment (both will implicitly destroy an object) are correct is low (here, we would get double deletion). NoteThis is known as “the rule of five” or “the rule of six”, depending on whether you count the default constructor. NoteIf you want a default implementation of a default operation (while defining another), write =default to show you’re doing so intentionally for that function.If you don’t want a default operation, suppress it with =delete. Example, goodWhen a destructor needs to be declared just to make it virtual, it can bedefined as defaulted. To avoid suppressing the implicit move operationsthey must also be declared, and then to avoid the class becoming move-only(and not copyable) the copy operations must be declared: class AbstractBase { public: virtual ~AbstractBase() = default; AbstractBase(const AbstractBase&amp;) = default; AbstractBase&amp; operator=(const AbstractBase&amp;) = default; AbstractBase(AbstractBase&amp;&amp;) = default; AbstractBase&amp; operator=(AbstractBase&amp;&amp;) = default; }; Alternatively to prevent slicing as per C.67,the copy and move operations can all be deleted: class ClonableBase { public: virtual unique_ptr&lt;ClonableBase&gt; clone() const; virtual ~ClonableBase() = default; ClonableBase(const ClonableBase&amp;) = delete; ClonableBase&amp; operator=(const ClonableBase&amp;) = delete; ClonableBase(ClonableBase&amp;&amp;) = delete; ClonableBase&amp; operator=(ClonableBase&amp;&amp;) = delete; }; Defining only the move operations or only the copy operations would have thesame effect here, but stating the intent explicitly for each special membermakes it more obvious to the reader. NoteCompilers enforce much of this rule and ideally warn about any violation. NoteRelying on an implicitly generated copy operation in a class with a destructor is deprecated. Enforcement(Simple) A class should have a declaration (even a =delete one) for either all or none of the special functions. C.22: Make default operations consistentReasonThe default operations are conceptually a matched set. Their semantics are interrelated.Users will be surprised if copy/move construction and copy/move assignment do logically different things. Users will be surprised if constructors and destructors do not provide a consistent view of resource management. Users will be surprised if copy and move don’t reflect the way constructors and destructors work. Example, badclass Silly { // BAD: Inconsistent copy operations class Impl { // ... }; shared_ptr&lt;Impl&gt; p; public: Silly(const Silly&amp; a) : p{a.p} { *p = *a.p; } // deep copy Silly&amp; operator=(const Silly&amp; a) { p = a.p; } // shallow copy // ... }; These operations disagree about copy semantics. This will lead to confusion and bugs. Enforcement (Complex) A copy/move constructor and the corresponding copy/move assignment operator should write to the same member variables at the same level of dereference. (Complex) Any member variables written in a copy/move constructor should also be initialized by all other constructors. (Complex) If a copy/move constructor performs a deep copy of a member variable, then the destructor should modify the member variable. (Complex) If a destructor is modifying a member variable, that member variable should be written in any copy/move constructors or assignment operators. C.dtor: Destructors“Does this class need a destructor?” is a surprisingly powerful design question.For most classes the answer is “no” either because the class holds no resources or because destruction is handled by the rule of zero;that is, its members can take care of themselves as concerns destruction.If the answer is “yes”, much of the design of the class follows (see the rule of five). C.30: Define a destructor if a class needs an explicit action at object destructionReasonA destructor is implicitly invoked at the end of an object’s lifetime.If the default destructor is sufficient, use it.Only define a non-default destructor if a class needs to execute code that is not already part of its members’ destructors. Exampletemplate&lt;typename A&gt; struct final_action { // slightly simplified A act; final_action(A a) :act{a} {} ~final_action() { act(); } }; template&lt;typename A&gt; final_action&lt;A&gt; finally(A act) // deduce action type { return final_action&lt;A&gt;{act}; } void test() { auto act = finally([]{ cout &lt;&lt; &quot;Exit test\n&quot;; }); // establish exit action // ... if (something) return; // act done here // ... } // act done here The whole purpose of final_action is to get a piece of code (usually a lambda) executed upon destruction. NoteThere are two general categories of classes that need a user-defined destructor: A class with a resource that is not already represented as a class with a destructor, e.g., a vector or a transaction class. A class that exists primarily to execute an action upon destruction, such as a tracer or final_action. Example, badclass Foo { // bad; use the default destructor public: // ... ~Foo() { s = &quot;&quot;; i = 0; vi.clear(); } // clean up private: string s; int i; vector&lt;int&gt; vi; }; The default destructor does it better, more efficiently, and can’t get it wrong. NoteIf the default destructor is needed, but its generation has been suppressed (e.g., by defining a move constructor), use =default. EnforcementLook for likely “implicit resources”, such as pointers and references. Look for classes with destructors even though all their data members have destructors. C.31: All resources acquired by a class must be released by the class’s destructorReasonPrevention of resource leaks, especially in error cases. NoteFor resources represented as classes with a complete set of default operations, this happens automatically. Exampleclass X { ifstream f; // may own a file // ... no default operations defined or =deleted ... }; X‘s ifstream implicitly closes any file it may have open upon destruction of its X. Example, badclass X2 { // bad FILE* f; // may own a file // ... no default operations defined or =deleted ... }; X2 may leak a file handle. NoteWhat about a sockets that won’t close? A destructor, close, or cleanup operation should never fail.If it does nevertheless, we have a problem that has no really good solution.For starters, the writer of a destructor does not know why the destructor is called and cannot “refuse to act” by throwing an exception.See discussion.To make the problem worse, many “close/release” operations are not retryable.Many have tried to solve this problem, but no general solution is known.If at all possible, consider failure to close/cleanup a fundamental design error and terminate. NoteA class can hold pointers and references to objects that it does not own.Obviously, such objects should not be deleted by the class’s destructor.For example: Preprocessor pp { /* ... */ }; Parser p { pp, /* ... */ }; Type_checker tc { p, /* ... */ }; Here p refers to pp but does not own it. Enforcement (Simple) If a class has pointer or reference member variables that are owners(e.g., deemed owners by using gsl::owner), then they should be referenced in its destructor. (Hard) Determine if pointer or reference member variables are owners when there is no explicit statement of ownership(e.g., look into the constructors). C.32: If a class has a raw pointer (T*) or reference (T&amp;), consider whether it might be owningReasonThere is a lot of code that is non-specific about ownership. Example??? NoteIf the T* or T&amp; is owning, mark it owning. If the T* is not owning, consider marking it ptr.This will aid documentation and analysis. EnforcementLook at the initialization of raw member pointers and member references and see if an allocation is used. C.33: If a class has an owning pointer member, define a destructorReasonAn owned object must be deleted upon destruction of the object that owns it. ExampleA pointer member may represent a resource.A T* should not do so, but in older code, that’s common.Consider a T* a possible owner and therefore suspect. template&lt;typename T&gt; class Smart_ptr { T* p; // BAD: vague about ownership of *p // ... public: // ... no user-defined default operations ... }; void use(Smart_ptr&lt;int&gt; p1) { // error: p2.p leaked (if not nullptr and not owned by some other code) auto p2 = p1; } Note that if you define a destructor, you must define or delete all default operations: template&lt;typename T&gt; class Smart_ptr2 { T* p; // BAD: vague about ownership of *p // ... public: // ... no user-defined copy operations ... ~Smart_ptr2() { delete p; } // p is an owner! }; void use(Smart_ptr2&lt;int&gt; p1) { auto p2 = p1; // error: double deletion } The default copy operation will just copy the p1.p into p2.p leading to a double destruction of p1.p. Be explicit about ownership: template&lt;typename T&gt; class Smart_ptr3 { owner&lt;T*&gt; p; // OK: explicit about ownership of *p // ... public: // ... // ... copy and move operations ... ~Smart_ptr3() { delete p; } }; void use(Smart_ptr3&lt;int&gt; p1) { auto p2 = p1; // error: double deletion } NoteOften the simplest way to get a destructor is to replace the pointer with a smart pointer (e.g., std::unique_ptr) and let the compiler arrange for proper destruction to be done implicitly. NoteWhy not just require all owning pointers to be “smart pointers”?That would sometimes require non-trivial code changes and may affect ABIs. Enforcement A class with a pointer data member is suspect. A class with an owner&lt;T&gt; should define its default operations. C.35: A base class destructor should be either public and virtual, or protected and nonvirtualReasonTo prevent undefined behavior.If the destructor is public, then calling code can attempt to destroy a derived class object through a base class pointer, and the result is undefined if the base class’s destructor is non-virtual.If the destructor is protected, then calling code cannot destroy through a base class pointer and the destructor does not need to be virtual; it does need to be protected, not private, so that derived destructors can invoke it.In general, the writer of a base class does not know the appropriate action to be done upon destruction. DiscussionSee this in the Discussion section. Example, badstruct Base { // BAD: no virtual destructor virtual void f(); }; struct D : Base { string s {&quot;a resource needing cleanup&quot;}; ~D() { /* ... do some cleanup ... */ } // ... }; void use() { unique_ptr&lt;Base&gt; p = make_unique&lt;D&gt;(); // ... } // p&apos;s destruction calls ~Base(), not ~D(), which leaks D::s and possibly more NoteA virtual function defines an interface to derived classes that can be used without looking at the derived classes.If the interface allows destroying, it should be safe to do so. NoteA destructor must be nonprivate or it will prevent using the type : class X { ~X(); // private destructor // ... }; void use() { X a; // error: cannot destroy auto p = make_unique&lt;X&gt;(); // error: cannot destroy } ExceptionWe can imagine one case where you could want a protected virtual destructor: When an object of a derived type (and only of such a type) should be allowed to destroy another object (not itself) through a pointer to base. We haven’t seen such a case in practice, though. Enforcement A class with any virtual functions should have a destructor that is either public and virtual or else protected and nonvirtual. C.36: A destructor may not failReasonIn general we do not know how to write error-free code if a destructor should fail.The standard library requires that all classes it deals with have destructors that do not exit by throwing. Exampleclass X { public: ~X() noexcept; // ... }; X::~X() noexcept { // ... if (cannot_release_a_resource) terminate(); // ... } NoteMany have tried to devise a fool-proof scheme for dealing with failure in destructors.None have succeeded to come up with a general scheme.This can be a real practical problem: For example, what about a socket that won’t close?The writer of a destructor does not know why the destructor is called and cannot “refuse to act” by throwing an exception.See discussion.To make the problem worse, many “close/release” operations are not retryable.If at all possible, consider failure to close/cleanup a fundamental design error and terminate. NoteDeclare a destructor noexcept. That will ensure that it either completes normally or terminate the program. NoteIf a resource cannot be released and the program may not fail, try to signal the failure to the rest of the system somehow(maybe even by modifying some global state and hope something will notice and be able to take care of the problem).Be fully aware that this technique is special-purpose and error-prone.Consider the “my connection will not close” example.Probably there is a problem at the other end of the connection and only a piece of code responsible for both ends of the connection can properly handle the problem.The destructor could send a message (somehow) to the responsible part of the system, consider that to have closed the connection, and return normally. NoteIf a destructor uses operations that may fail, it can catch exceptions and in some cases still complete successfully(e.g., by using a different clean-up mechanism from the one that threw an exception). Enforcement(Simple) A destructor should be declared noexcept if it could throw. C.37: Make destructors noexceptReason A destructor may not fail. If a destructor tries to exit with an exception, it’s a bad design error and the program had better terminate. NoteA destructor (either user-defined or compiler-generated) is implicitly declared noexcept (independently of what code is in its body) if all of the members of its class have noexcept destructors. By explicitly marking destructors noexcept, an author guards against the destructor becoming implicitly noexcept(false) through the addition or modification of a class member. Enforcement(Simple) A destructor should be declared noexcept if it could throw. C.ctor: ConstructorsA constructor defines how an object is initialized (constructed). C.40: Define a constructor if a class has an invariantReasonThat’s what constructors are for. Exampleclass Date { // a Date represents a valid date // in the January 1, 1900 to December 31, 2100 range Date(int dd, int mm, int yy) :d{dd}, m{mm}, y{yy} { if (!is_valid(d, m, y)) throw Bad_date{}; // enforce invariant } // ... private: int d, m, y; }; It is often a good idea to express the invariant as an Ensures on the constructor. NoteA constructor can be used for convenience even if a class does not have an invariant. For example: struct Rec { string s; int i {0}; Rec(const string&amp; ss) : s{ss} {} Rec(int ii) :i{ii} {} }; Rec r1 {7}; Rec r2 {&quot;Foo bar&quot;}; NoteThe C++11 initializer list rule eliminates the need for many constructors. For example: struct Rec2{ string s; int i; Rec2(const string&amp; ss, int ii = 0) :s{ss}, i{ii} {} // redundant }; Rec2 r1 {&quot;Foo&quot;, 7}; Rec2 r2 {&quot;Bar&quot;}; The Rec2 constructor is redundant.Also, the default for int would be better done as a member initializer. See also: construct valid object and constructor throws. Enforcement Flag classes with user-defined copy operations but no constructor (a user-defined copy is a good indicator that the class has an invariant) C.41: A constructor should create a fully initialized objectReasonA constructor establishes the invariant for a class. A user of a class should be able to assume that a constructed object is usable. Example, badclass X1 { FILE* f; // call init() before any other function // ... public: X1() {} void init(); // initialize f void read(); // read from f // ... }; void f() { X1 file; file.read(); // crash or bad read! // ... file.init(); // too late // ... } Compilers do not read comments. ExceptionIf a valid object cannot conveniently be constructed by a constructor, use a factory function. Enforcement (Simple) Every constructor should initialize every member variable (either explicitly, via a delegating ctor call or via default construction). (Unknown) If a constructor has an Ensures contract, try to see if it holds as a postcondition. NoteIf a constructor acquires a resource (to create a valid object), that resource should be released by the destructor.The idiom of having constructors acquire resources and destructors release them is called RAII (“Resource Acquisition Is Initialization”). C.42: If a constructor cannot construct a valid object, throw an exceptionReasonLeaving behind an invalid object is asking for trouble. Exampleclass X2 { FILE* f; // ... public: X2(const string&amp; name) :f{fopen(name.c_str(), &quot;r&quot;)} { if (!f) throw runtime_error{&quot;could not open&quot; + name}; // ... } void read(); // read from f // ... }; void f() { X2 file {&quot;Zeno&quot;}; // throws if file isn&apos;t open file.read(); // fine // ... } Example, badclass X3 { // bad: the constructor leaves a non-valid object behind FILE* f; // call is_valid() before any other function bool valid; // ... public: X3(const string&amp; name) :f{fopen(name.c_str(), &quot;r&quot;)}, valid{false} { if (f) valid = true; // ... } bool is_valid() { return valid; } void read(); // read from f // ... }; void f() { X3 file {&quot;Heraclides&quot;}; file.read(); // crash or bad read! // ... if (file.is_valid()) { file.read(); // ... } else { // ... handle error ... } // ... } NoteFor a variable definition (e.g., on the stack or as a member of another object) there is no explicit function call from which an error code could be returned.Leaving behind an invalid object and relying on users to consistently check an is_valid() function before use is tedious, error-prone, and inefficient. ExceptionThere are domains, such as some hard-real-time systems (think airplane controls) where (without additional tool support) exception handling is not sufficiently predictable from a timing perspective.There the is_valid() technique must be used. In such cases, check is_valid() consistently and immediately to simulate RAII. AlternativeIf you feel tempted to use some “post-constructor initialization” or “two-stage initialization” idiom, try not to do that.If you really have to, look at factory functions. NoteOne reason people have used init() functions rather than doing the initialization work in a constructor has been to avoid code replication.Delegating constructors and default member initialization do that better.Another reason has been to delay initialization until an object is needed; the solution to that is often not to declare a variable until it can be properly initialized Enforcement??? C.43: Ensure that a copyable (value type) class has a default constructorReasonMany language and library facilities rely on default constructors to initialize their elements, e.g. T a[10] and std::vector&lt;T&gt; v(10).A default constructor often simplifies the task of defining a suitable moved-from state for a type that is also copyable. NoteA value type is a class that is copyable (and usually also comparable).It is closely related to the notion of Regular type from EoP and the Palo Alto TR. Exampleclass Date { // BAD: no default constructor public: Date(int dd, int mm, int yyyy); // ... }; vector&lt;Date&gt; vd1(1000); // default Date needed here vector&lt;Date&gt; vd2(1000, Date{Month::October, 7, 1885}); // alternative The default constructor is only auto-generated if there is no user-declared constructor, hence it’s impossible to initialize the vector vd1 in the example above.The absence of a default value can cause surprises for users and complicate its use, so if one can be reasonably defined, it should be. Date is chosen to encourage thought:There is no “natural” default date (the big bang is too far back in time to be useful for most people), so this example is non-trivial.{0, 0, 0} is not a valid date in most calendar systems, so choosing that would be introducing something like floating-point’s NaN.However, most realistic Date classes have a “first date” (e.g. January 1, 1970 is popular), so making that the default is usually trivial. class Date { public: Date(int dd, int mm, int yyyy); Date() = default; // [See also](#Rc-default) // ... private: int dd = 1; int mm = 1; int yyyy = 1970; // ... }; vector&lt;Date&gt; vd1(1000); NoteA class with members that all have default constructors implicitly gets a default constructor: struct X { string s; vector&lt;int&gt; v; }; X x; // means X{{}, {}}; that is the empty string and the empty vector Beware that built-in types are not properly default constructed: struct X { string s; int i; }; void f() { X x; // x.s is initialized to the empty string; x.i is uninitialized cout &lt;&lt; x.s &lt;&lt; &apos; &apos; &lt;&lt; x.i &lt;&lt; &apos;\n&apos;; ++x.i; } Statically allocated objects of built-in types are by default initialized to 0, but local built-in variables are not.Beware that your compiler may default initialize local built-in variables, whereas an optimized build will not.Thus, code like the example above may appear to work, but it relies on undefined behavior.Assuming that you want initialization, an explicit default initialization can help: struct X { string s; int i {}; // default initialize (to 0) }; NotesClasses that don’t have a reasonable default construction are usually not copyable either, so they don’t fall under this guideline. For example, a base class is not a value type (base classes should not be copyable) and so does not necessarily need a default constructor: // Shape is an abstract base class, not a copyable value type. // It may or may not need a default constructor. struct Shape { virtual void draw() = 0; virtual void rotate(int) = 0; // =delete copy/move functions // ... }; A class that must acquire a caller-provided resource during construction often cannot have a default constructor, but it does not fall under this guideline because such a class is usually not copyable anyway: // std::lock_guard is not a copyable value type. // It does not have a default constructor. lock_guard g {mx}; // guard the mutex mx lock_guard g2; // error: guarding nothing A class that has a “special state” that must be handled separately from other states by member functions or users causes extra work(and most likely more errors). Such a type can naturally use the special state as a default constructed value, whether or not it is copyable: // std::ofstream is not a copyable value type. // It does happen to have a default constructor // that goes along with a special &quot;not open&quot; state. ofstream out {&quot;Foobar&quot;}; // ... out &lt;&lt; log(time, transaction); Similar special-state types that are copyable, such as copyable smart pointers that have the special state “==nullptr”, should use the special state as their default constructed value. However, it is preferable to have a default constructor default to a meaningful state such as std::strings &quot;&quot; and std::vectors {}. Enforcement Flag classes that are copyable by = without a default constructor Flag classes that are comparable with == but not copyable C.44: Prefer default constructors to be simple and non-throwingReasonBeing able to set a value to “the default” without operations that might fail simplifies error handling and reasoning about move operations. Example, problematictemplate&lt;typename T&gt; // elem points to space-elem element allocated using new class Vector0 { public: Vector0() :Vector0{0} {} Vector0(int n) :elem{new T[n]}, space{elem + n}, last{elem} {} // ... private: own&lt;T*&gt; elem; T* space; T* last; }; This is nice and general, but setting a Vector0 to empty after an error involves an allocation, which may fail.Also, having a default Vector represented as {new T[0], 0, 0} seems wasteful.For example, Vector0&lt;int&gt; v[100] costs 100 allocations. Exampletemplate&lt;typename T&gt; // elem is nullptr or elem points to space-elem element allocated using new class Vector1 { public: // sets the representation to {nullptr, nullptr, nullptr}; doesn&apos;t throw Vector1() noexcept {} Vector1(int n) :elem{new T[n]}, space{elem + n}, last{elem} {} // ... private: own&lt;T*&gt; elem = nullptr; T* space = nullptr; T* last = nullptr; }; Using {nullptr, nullptr, nullptr} makes Vector1{} cheap, but a special case and implies run-time checks.Setting a Vector1 to empty after detecting an error is trivial. Enforcement Flag throwing default constructors C.45: Don’t define a default constructor that only initializes data members; use in-class member initializers insteadReasonUsing in-class member initializers lets the compiler generate the function for you. The compiler-generated function can be more efficient. Example, badclass X1 { // BAD: doesn&apos;t use member initializers string s; int i; public: X1() :s{&quot;default&quot;}, i{1} { } // ... }; Exampleclass X2 { string s = &quot;default&quot;; int i = 1; public: // use compiler-generated default constructor // ... }; Enforcement(Simple) A default constructor should do more than just initialize member variables with constants. C.46: By default, declare single-argument constructors explicitReasonTo avoid unintended conversions. Example, badclass String { // ... public: String(int); // BAD // ... }; String s = 10; // surprise: string of size 10 ExceptionIf you really want an implicit conversion from the constructor argument type to the class type, don’t use explicit: class Complex { // ... public: Complex(double d); // OK: we want a conversion from d to {d, 0} // ... }; Complex z = 10.7; // unsurprising conversion See also: Discussion of implicit conversions NoteCopy and move constructors should not be made explicit because they do not perform conversions. Explicit copy/move constructors make passing and returning by value difficult. Enforcement(Simple) Single-argument constructors should be declared explicit. Good single argument non-explicit constructors are rare in most code based. Warn for all that are not on a “positive list”. C.47: Define and initialize member variables in the order of member declarationReasonTo minimize confusion and errors. That is the order in which the initialization happens (independent of the order of member initializers). Example, badclass Foo { int m1; int m2; public: Foo(int x) :m2{x}, m1{++x} { } // BAD: misleading initializer order // ... }; Foo x(1); // surprise: x.m1 == x.m2 == 2 Enforcement(Simple) A member initializer list should mention the members in the same order they are declared. See also: Discussion C.48: Prefer in-class initializers to member initializers in constructors for constant initializersReasonMakes it explicit that the same value is expected to be used in all constructors. Avoids repetition. Avoids maintenance problems. It leads to the shortest and most efficient code. Example, badclass X { // BAD int i; string s; int j; public: X() :i{666}, s{&quot;qqq&quot;} { } // j is uninitialized X(int ii) :i{ii} {} // s is &quot;&quot; and j is uninitialized // ... }; How would a maintainer know whether j was deliberately uninitialized (probably a poor idea anyway) and whether it was intentional to give s the default value &quot;&quot; in one case and qqq in another (almost certainly a bug)? The problem with j (forgetting to initialize a member) often happens when a new member is added to an existing class. Exampleclass X2 { int i {666}; string s {&quot;qqq&quot;}; int j {0}; public: X2() = default; // all members are initialized to their defaults X2(int ii) :i{ii} {} // s and j initialized to their defaults // ... }; Alternative: We can get part of the benefits from default arguments to constructors, and that is not uncommon in older code. However, that is less explicit, causes more arguments to be passed, and is repetitive when there is more than one constructor: class X3 { // BAD: inexplicit, argument passing overhead int i; string s; int j; public: X3(int ii = 666, const string&amp; ss = &quot;qqq&quot;, int jj = 0) :i{ii}, s{ss}, j{jj} { } // all members are initialized to their defaults // ... }; Enforcement (Simple) Every constructor should initialize every member variable (either explicitly, via a delegating ctor call or via default construction). (Simple) Default arguments to constructors suggest an in-class initializer may be more appropriate. C.49: Prefer initialization to assignment in constructorsReasonAn initialization explicitly states that initialization, rather than assignment, is done and can be more elegant and efficient. Prevents “use before set” errors. Example, goodclass A { // Good string s1; public: A() : s1{&quot;Hello, &quot;} { } // GOOD: directly construct // ... }; Example, badclass B { // BAD string s1; public: B() { s1 = &quot;Hello, &quot;; } // BAD: default constructor followed by assignment // ... }; class C { // UGLY, aka very bad int* p; public: C() { cout &lt;&lt; *p; p = new int{10}; } // accidental use before initialized // ... }; C.50: Use a factory function if you need “virtual behavior” during initializationReasonIf the state of a base class object must depend on the state of a derived part of the object, we need to use a virtual function (or equivalent) while minimizing the window of opportunity to misuse an imperfectly constructed object. NoteThe return type of the factory should normally be unique_ptr by default; if some uses are shared, the caller can move the unique_ptr into a shared_ptr. However, if the factory author knows that all uses of the returned object will be shared uses, return shared_ptr and use make_shared in the body to save an allocation. Example, badclass B { public: B() { // ... f(); // BAD: virtual call in constructor // ... } virtual void f() = 0; // ... }; Exampleclass B { protected: B() { /* ... */ } // create an imperfectly initialized object virtual void PostInitialize() // to be called right after construction { // ... f(); // GOOD: virtual dispatch is safe // ... } public: virtual void f() = 0; template&lt;class T&gt; static shared_ptr&lt;T&gt; Create() // interface for creating shared objects { auto p = make_shared&lt;T&gt;(); p-&gt;PostInitialize(); return p; } }; class D : public B { /* ... */ }; // some derived class shared_ptr&lt;D&gt; p = D::Create&lt;D&gt;(); // creating a D object By making the constructor protected we avoid an incompletely constructed object escaping into the wild.By providing the factory function Create(), we make construction (on the free store) convenient. NoteConventional factory functions allocate on the free store, rather than on the stack or in an enclosing object. See also: Discussion C.51: Use delegating constructors to represent common actions for all constructors of a classReasonTo avoid repetition and accidental differences. Example, badclass Date { // BAD: repetitive int d; Month m; int y; public: Date(int ii, Month mm, year yy) :i{ii}, m{mm}, y{yy} { if (!valid(i, m, y)) throw Bad_date{}; } Date(int ii, Month mm) :i{ii}, m{mm} y{current_year()} { if (!valid(i, m, y)) throw Bad_date{}; } // ... }; The common action gets tedious to write and may accidentally not be common. Exampleclass Date2 { int d; Month m; int y; public: Date2(int ii, Month mm, year yy) :i{ii}, m{mm}, y{yy} { if (!valid(i, m, y)) throw Bad_date{}; } Date2(int ii, Month mm) :Date2{ii, mm, current_year()} {} // ... }; See also: If the “repeated action” is a simple initialization, consider an in-class member initializer. Enforcement(Moderate) Look for similar constructor bodies. C.52: Use inheriting constructors to import constructors into a derived class that does not need further explicit initializationReasonIf you need those constructors for a derived class, re-implementing them is tedious and error-prone. Examplestd::vector has a lot of tricky constructors, so if I want my own vector, I don’t want to reimplement them: class Rec { // ... data and lots of nice constructors ... }; class Oper : public Rec { using Rec::Rec; // ... no data members ... // ... lots of nice utility functions ... }; Example, badstruct Rec2 : public Rec { int x; using Rec::Rec; }; Rec2 r {&quot;foo&quot;, 7}; int val = r.x; // uninitialized EnforcementMake sure that every member of the derived class is initialized. C.copy: Copy and moveValue types should generally be copyable, but interfaces in a class hierarchy should not.Resource handles may or may not be copyable.Types can be defined to move for logical as well as performance reasons. C.60: Make copy assignment non-virtual, take the parameter by const&amp;, and return by non-const&amp;ReasonIt is simple and efficient. If you want to optimize for rvalues, provide an overload that takes a &amp;&amp; (see F.18). Exampleclass Foo { public: Foo&amp; operator=(const Foo&amp; x) { // GOOD: no need to check for self-assignment (other than performance) auto tmp = x; std::swap(*this, tmp); return *this; } // ... }; Foo a; Foo b; Foo f(); a = b; // assign lvalue: copy a = f(); // assign rvalue: potentially move NoteThe swap implementation technique offers the strong guarantee. ExampleBut what if you can get significantly better performance by not making a temporary copy? Consider a simple Vector intended for a domain where assignment of large, equal-sized Vectors is common. In this case, the copy of elements implied by the swap implementation technique could cause an order of magnitude increase in cost: template&lt;typename T&gt; class Vector { public: Vector&amp; operator=(const Vector&amp;); // ... private: T* elem; int sz; }; Vector&amp; Vector::operator=(const Vector&amp; a) { if (a.sz &gt; sz) { // ... use the swap technique, it can&apos;t be bettered ... return *this } // ... copy sz elements from *a.elem to elem ... if (a.sz &lt; sz) { // ... destroy the surplus elements in *this* and adjust size ... } return *this; } By writing directly to the target elements, we will get only the basic guarantee rather than the strong guarantee offered by the swap technique. Beware of self-assignment. Alternatives: If you think you need a virtual assignment operator, and understand why that’s deeply problematic, don’t call it operator=. Make it a named function like virtual void assign(const Foo&amp;).See copy constructor vs. clone(). Enforcement (Simple) An assignment operator should not be virtual. Here be dragons! (Simple) An assignment operator should return T&amp; to enable chaining, not alternatives like const T&amp; which interfere with composability and putting objects in containers. (Moderate) An assignment operator should (implicitly or explicitly) invoke all base and member assignment operators.Look at the destructor to determine if the type has pointer semantics or value semantics. C.61: A copy operation should copyReasonThat is the generally assumed semantics. After x = y, we should have x == y.After a copy x and y can be independent objects (value semantics, the way non-pointer built-in types and the standard-library types work) or refer to a shared object (pointer semantics, the way pointers work). Exampleclass X { // OK: value semantics public: X(); X(const X&amp;); // copy X void modify(); // change the value of X // ... ~X() { delete[] p; } private: T* p; int sz; }; bool operator==(const X&amp; a, const X&amp; b) { return a.sz == b.sz &amp;&amp; equal(a.p, a.p + a.sz, b.p, b.p + b.sz); } X::X(const X&amp; a) :p{new T[a.sz]}, sz{a.sz} { copy(a.p, a.p + sz, p); } X x; X y = x; if (x != y) throw Bad{}; x.modify(); if (x == y) throw Bad{}; // assume value semantics Exampleclass X2 { // OK: pointer semantics public: X2(); X2(const X2&amp;) = default; // shallow copy ~X2() = default; void modify(); // change the pointed-to value // ... private: T* p; int sz; }; bool operator==(const X2&amp; a, const X2&amp; b) { return a.sz == b.sz &amp;&amp; a.p == b.p; } X2 x; X2 y = x; if (x != y) throw Bad{}; x.modify(); if (x != y) throw Bad{}; // assume pointer semantics NotePrefer copy semantics unless you are building a “smart pointer”. Value semantics is the simplest to reason about and what the standard-library facilities expect. Enforcement(Not enforceable) C.62: Make copy assignment safe for self-assignmentReasonIf x = x changes the value of x, people will be surprised and bad errors will occur (often including leaks). ExampleThe standard-library containers handle self-assignment elegantly and efficiently: std::vector&lt;int&gt; v = {3, 1, 4, 1, 5, 9}; v = v; // the value of v is still {3, 1, 4, 1, 5, 9} NoteThe default assignment generated from members that handle self-assignment correctly handles self-assignment. struct Bar { vector&lt;pair&lt;int, int&gt;&gt; v; map&lt;string, int&gt; m; string s; }; Bar b; // ... b = b; // correct and efficient NoteYou can handle self-assignment by explicitly testing for self-assignment, but often it is faster and more elegant to cope without such a test (e.g., using swap). class Foo { string s; int i; public: Foo&amp; operator=(const Foo&amp; a); // ... }; Foo&amp; Foo::operator=(const Foo&amp; a) // OK, but there is a cost { if (this == &amp;a) return *this; s = a.s; i = a.i; return *this; } This is obviously safe and apparently efficient.However, what if we do one self-assignment per million assignments?That’s about a million redundant tests (but since the answer is essentially always the same, the computer’s branch predictor will guess right essentially every time).Consider: Foo&amp; Foo::operator=(const Foo&amp; a) // simpler, and probably much better { s = a.s; i = a.i; return *this; } std::string is safe for self-assignment and so are int. All the cost is carried by the (rare) case of self-assignment. Enforcement(Simple) Assignment operators should not contain the pattern if (this == &amp;a) return *this; ??? C.63: Make move assignment non-virtual, take the parameter by &amp;&amp;, and return by non-const &amp;ReasonIt is simple and efficient. See: The rule for copy-assignment. EnforcementEquivalent to what is done for copy-assignment. (Simple) An assignment operator should not be virtual. Here be dragons! (Simple) An assignment operator should return T&amp; to enable chaining, not alternatives like const T&amp; which interfere with composability and putting objects in containers. (Moderate) A move assignment operator should (implicitly or explicitly) invoke all base and member move assignment operators. C.64: A move operation should move and leave its source in a valid stateReasonThat is the generally assumed semantics.After y = std::move(x) the value of y should be the value x had and x should be in a valid state. Exampletemplate&lt;typename T&gt; class X { // OK: value semantics public: X(); X(X&amp;&amp; a) noexcept; // move X void modify(); // change the value of X // ... ~X() { delete[] p; } private: T* p; int sz; }; X::X(X&amp;&amp; a) :p{a.p}, sz{a.sz} // steal representation { a.p = nullptr; // set to &quot;empty&quot; a.sz = 0; } void use() { X x{}; // ... X y = std::move(x); x = X{}; // OK } // OK: x can be destroyed NoteIdeally, that moved-from should be the default value of the type.Ensure that unless there is an exceptionally good reason not to.However, not all types have a default value and for some types establishing the default value can be expensive.The standard requires only that the moved-from object can be destroyed.Often, we can easily and cheaply do better: The standard library assumes that it is possible to assign to a moved-from object.Always leave the moved-from object in some (necessarily specified) valid state. NoteUnless there is an exceptionally strong reason not to, make x = std::move(y); y = z; work with the conventional semantics. Enforcement(Not enforceable) Look for assignments to members in the move operation. If there is a default constructor, compare those assignments to the initializations in the default constructor. C.65: Make move assignment safe for self-assignmentReasonIf x = x changes the value of x, people will be surprised and bad errors may occur. However, people don’t usually directly write a self-assignment that turn into a move, but it can occur. However, std::swap is implemented using move operations so if you accidentally do swap(a, b) where a and b refer to the same object, failing to handle self-move could be a serious and subtle error. Exampleclass Foo { string s; int i; public: Foo&amp; operator=(Foo&amp;&amp; a); // ... }; Foo&amp; Foo::operator=(Foo&amp;&amp; a) noexcept // OK, but there is a cost { if (this == &amp;a) return *this; // this line is redundant s = std::move(a.s); i = a.i; return *this; } The one-in-a-million argument against if (this == &amp;a) return *this; tests from the discussion of self-assignment is even more relevant for self-move. NoteThere is no known general way of avoiding a if (this == &amp;a) return *this; test for a move assignment and still get a correct answer (i.e., after x = x the value of x is unchanged). NoteThe ISO standard guarantees only a “valid but unspecified” state for the standard-library containers. Apparently this has not been a problem in about 10 years of experimental and production use. Please contact the editors if you find a counter example. The rule here is more caution and insists on complete safety. ExampleHere is a way to move a pointer without a test (imagine it as code in the implementation a move assignment): // move from other.ptr to this-&gt;ptr T* temp = other.ptr; other.ptr = nullptr; delete ptr; ptr = temp; Enforcement (Moderate) In the case of self-assignment, a move assignment operator should not leave the object holding pointer members that have been deleted or set to nullptr. (Not enforceable) Look at the use of standard-library container types (incl. string) and consider them safe for ordinary (not life-critical) uses. C.66: Make move operations noexceptReasonA throwing move violates most people’s reasonably assumptions.A non-throwing move will be used more efficiently by standard-library and language facilities. Exampletemplate&lt;typename T&gt; class Vector { // ... Vector(Vector&amp;&amp; a) noexcept :elem{a.elem}, sz{a.sz} { a.sz = 0; a.elem = nullptr; } Vector&amp; operator=(Vector&amp;&amp; a) noexcept { elem = a.elem; sz = a.sz; a.sz = 0; a.elem = nullptr; } // ... public: T* elem; int sz; }; These operations do not throw. Example, badtemplate&lt;typename T&gt; class Vector2 { // ... Vector2(Vector2&amp;&amp; a) { *this = a; } // just use the copy Vector2&amp; operator=(Vector2&amp;&amp; a) { *this = a; } // just use the copy // ... public: T* elem; int sz; }; This Vector2 is not just inefficient, but since a vector copy requires allocation, it can throw. Enforcement(Simple) A move operation should be marked noexcept. C.67: A base class should suppress copying, and provide a virtual clone instead if “copying” is desiredReasonTo prevent slicing, because the normal copy operations will copy only the base portion of a derived object. Example, badclass B { // BAD: base class doesn&apos;t suppress copying int data; // ... nothing about copy operations, so uses default ... }; class D : public B { string more_data; // add a data member // ... }; auto d = make_unique&lt;D&gt;(); // oops, slices the object; gets only d.data but drops d.more_data auto b = make_unique&lt;B&gt;(d); Exampleclass B { // GOOD: base class suppresses copying public: B(const B&amp;) = delete; B&amp; operator=(const B&amp;) = delete; virtual unique_ptr&lt;B&gt; clone() { return /* B object */; } // ... }; class D : public B { string more_data; // add a data member unique_ptr&lt;B&gt; clone() override { return /* D object */; } // ... }; auto d = make_unique&lt;D&gt;(); auto b = d.clone(); // ok, deep clone NoteIt’s good to return a smart pointer, but unlike with raw pointers the return type cannot be covariant (for example, D::clone can’t return a unique_ptr&lt;D&gt;. Don’t let this tempt you into returning an owning raw pointer; this is a minor drawback compared to the major robustness benefit delivered by the owning smart pointer. ExceptionIf you need covariant return types, return an owner&lt;derived*&gt;. See C.130. EnforcementA class with any virtual function should not have a copy constructor or copy assignment operator (compiler-generated or handwritten). C.other: Other default operation rulesIn addition to the operations for which the language offer default implementations,there are a few operations that are so foundational that it rules for their definition are needed:comparisons, swap, and hash. C.80: Use =default if you have to be explicit about using the default semanticsReasonThe compiler is more likely to get the default semantics right and you cannot implement these functions better than the compiler. Exampleclass Tracer { string message; public: Tracer(const string&amp; m) : message{m} { cerr &lt;&lt; &quot;entering &quot; &lt;&lt; message &lt;&lt; &apos;\n&apos;; } ~Tracer() { cerr &lt;&lt; &quot;exiting &quot; &lt;&lt; message &lt;&lt; &apos;\n&apos;; } Tracer(const Tracer&amp;) = default; Tracer&amp; operator=(const Tracer&amp;) = default; Tracer(Tracer&amp;&amp;) = default; Tracer&amp; operator=(Tracer&amp;&amp;) = default; }; Because we defined the destructor, we must define the copy and move operations. The = default is the best and simplest way of doing that. Example, badclass Tracer2 { string message; public: Tracer2(const string&amp; m) : message{m} { cerr &lt;&lt; &quot;entering &quot; &lt;&lt; message &lt;&lt; &apos;\n&apos;; } ~Tracer2() { cerr &lt;&lt; &quot;exiting &quot; &lt;&lt; message &lt;&lt; &apos;\n&apos;; } Tracer2(const Tracer2&amp; a) : message{a.message} {} Tracer2&amp; operator=(const Tracer2&amp; a) { message = a.message; return *this; } Tracer2(Tracer2&amp;&amp; a) :message{a.message} {} Tracer2&amp; operator=(Tracer2&amp;&amp; a) { message = a.message; return *this; } }; Writing out the bodies of the copy and move operations is verbose, tedious, and error-prone. A compiler does it better. Enforcement(Moderate) The body of a special operation should not have the same accessibility and semantics as the compiler-generated version, because that would be redundant C.81: Use =delete when you want to disable default behavior (without wanting an alternative)ReasonIn a few cases, a default operation is not desirable. Exampleclass Immortal { public: ~Immortal() = delete; // do not allow destruction // ... }; void use() { Immortal ugh; // error: ugh cannot be destroyed Immortal* p = new Immortal{}; delete p; // error: cannot destroy *p } ExampleA unique_ptr can be moved, but not copied. To achieve that its copy operations are deleted. To avoid copying it is necessary to =delete its copy operations from lvalues: template &lt;class T, class D = default_delete&lt;T&gt;&gt; class unique_ptr { public: // ... constexpr unique_ptr() noexcept; explicit unique_ptr(pointer p) noexcept; // ... unique_ptr(unique_ptr&amp;&amp; u) noexcept; // move constructor // ... unique_ptr(const unique_ptr&amp;) = delete; // disable copy from lvalue // ... }; unique_ptr&lt;int&gt; make(); // make &quot;something&quot; and return it by moving void f() { unique_ptr&lt;int&gt; pi {}; auto pi2 {pi}; // error: no move constructor from lvalue auto pi3 {make()}; // OK, move: the result of make() is an rvalue } Note that deleted functions should be public. EnforcementThe elimination of a default operation is (should be) based on the desired semantics of the class. Consider such classes suspect, but maintain a “positive list” of classes where a human has asserted that the semantics is correct. C.82: Don’t call virtual functions in constructors and destructorsReasonThe function called will be that of the object constructed so far, rather than a possibly overriding function in a derived class.This can be most confusing.Worse, a direct or indirect call to an unimplemented pure virtual function from a constructor or destructor results in undefined behavior. Example, badclass Base { public: virtual void f() = 0; // not implemented virtual void g(); // implemented with Base version virtual void h(); // implemented with Base version }; class Derived : public Base { public: void g() override; // provide Derived implementation void h() final; // provide Derived implementation Derived() { // BAD: attempt to call an unimplemented virtual function f(); // BAD: will call Derived::g, not dispatch further virtually g(); // GOOD: explicitly state intent to call only the visible version Derived::g(); // ok, no qualification needed, h is final h(); } }; Note that calling a specific explicitly qualified function is not a virtual call even if the function is virtual. See also factory functions for how to achieve the effect of a call to a derived class function without risking undefined behavior. NoteThere is nothing inherently wrong with calling virtual functions from constructors and destructors.The semantics of such calls is type safe.However, experience shows that such calls are rarely needed, easily confuse maintainers, and become a source of errors when used by novices. Enforcement Flag calls of virtual functions from constructors and destructors. C.83: For value-like types, consider providing a noexcept swap functionReasonA swap can be handy for implementing a number of idioms, from smoothly moving objects around to implementing assignment easily to providing a guaranteed commit function that enables strongly error-safe calling code. Consider using swap to implement copy assignment in terms of copy construction. See also destructors, deallocation, and swap must never fail. Example, goodclass Foo { // ... public: void swap(Foo&amp; rhs) noexcept { m1.swap(rhs.m1); std::swap(m2, rhs.m2); } private: Bar m1; int m2; }; Providing a nonmember swap function in the same namespace as your type for callers’ convenience. void swap(Foo&amp; a, Foo&amp; b) { a.swap(b); } Enforcement (Simple) A class without virtual functions should have a swap member function declared. (Simple) When a class has a swap member function, it should be declared noexcept. C.84: A swap function may not failReason swap is widely used in ways that are assumed never to fail and programs cannot easily be written to work correctly in the presence of a failing swap. The standard-library containers and algorithms will not work correctly if a swap of an element type fails. Example, badvoid swap(My_vector&amp; x, My_vector&amp; y) { auto tmp = x; // copy elements x = y; y = tmp; } This is not just slow, but if a memory allocation occurs for the elements in tmp, this swap may throw and would make STL algorithms fail if used with them. Enforcement(Simple) When a class has a swap member function, it should be declared noexcept. C.85: Make swap noexceptReason A swap may not fail.If a swap tries to exit with an exception, it’s a bad design error and the program had better terminate. Enforcement(Simple) When a class has a swap member function, it should be declared noexcept. C.86: Make == symmetric with respect to operand types and noexceptReasonAsymmetric treatment of operands is surprising and a source of errors where conversions are possible.== is a fundamental operations and programmers should be able to use it without fear of failure. Examplestruct X { string name; int number; }; bool operator==(const X&amp; a, const X&amp; b) noexcept { return a.name == b.name &amp;&amp; a.number == b.number; } Example, badclass B { string name; int number; bool operator==(const B&amp; a) const { return name == a.name &amp;&amp; number == a.number; } // ... }; B‘s comparison accepts conversions for its second operand, but not its first. NoteIf a class has a failure state, like double‘s NaN, there is a temptation to make a comparison against the failure state throw.The alternative is to make two failure states compare equal and any valid state compare false against the failure state. NoteThis rule applies to all the usual comparison operators: !=, &lt;, &lt;=, &gt;, and &gt;=. Enforcement Flag an operator==() for which the argument types differ; same for other comparison operators: !=, &lt;, &lt;=, &gt;, and &gt;=. Flag member operator==()s; same for other comparison operators: !=, &lt;, &lt;=, &gt;, and &gt;=. C.87: Beware of == on base classesReasonIt is really hard to write a foolproof and useful == for a hierarchy. Example, badclass B { string name; int number; virtual bool operator==(const B&amp; a) const { return name == a.name &amp;&amp; number == a.number; } // ... }; B‘s comparison accepts conversions for its second operand, but not its first. class D :B { char character; virtual bool operator==(const D&amp; a) const { return name == a.name &amp;&amp; number == a.number &amp;&amp; character == a.character; } // ... }; B b = ... D d = ... b == d; // compares name and number, ignores d&apos;s character d == b; // error: no == defined D d2; d == d2; // compares name, number, and character B&amp; b2 = d2; b2 == d; // compares name and number, ignores d2&apos;s and d&apos;s character Of course there are ways of making == work in a hierarchy, but the naive approaches do not scale NoteThis rule applies to all the usual comparison operators: !=, &lt;, &lt;=, &gt;, and &gt;=. Enforcement Flag a virtual operator==(); same for other comparison operators: !=, &lt;, &lt;=, &gt;, and &gt;=. C.89: Make a hash noexceptReasonUsers of hashed containers use hash indirectly and don’t expect simple access to throw.It’s a standard-library requirement. Example, badtemplate&lt;&gt; struct hash&lt;My_type&gt; { // thoroughly bad hash specialization using result_type = size_t; using argument_type = My_type; size_t operator() (const My_type &amp; x) const { size_t xs = x.s.size(); if (xs &lt; 4) throw Bad_My_type{}; // &quot;Nobody expects the Spanish inquisition!&quot; return hash&lt;size_t&gt;()(x.s.size()) ^ trim(x.s); } }; int main() { unordered_map&lt;My_type, int&gt; m; My_type mt{ &quot;asdfg&quot; }; m[mt] = 7; cout &lt;&lt; m[My_type{ &quot;asdfg&quot; }] &lt;&lt; &apos;\n&apos;; } If you have to define a hash specialization, try simply to let it combine standard-library hash specializations with ^ (xor).That tends to work better than “cleverness” for non-specialists. Enforcement Flag throwing hashes. C.con: Containers and other resource handlesA container is an object holding a sequence of objects of some type; std::vector is the archetypical container.A resource handle is a class that owns a resource; std::vector is the typical resource handle; its resource is its sequence of elements. Summary of container rules: C.100: Follow the STL when defining a container C.101: Give a container value semantics C.102: Give a container move operations C.103: Give a container an initializer list constructor C.104: Give a container a default constructor that sets it to empty C.105: Give a constructor and Extent constructor ??? C.109: If a resource handle has pointer semantics, provide * and -&gt; See also: Resources C.lambdas: Function objects and lambdasA function object is an object supplying an overloaded () so that you can call it.A lambda expression (colloquially often shortened to “a lambda”) is a notation for generating a function object.Function objects should be cheap to copy (and therefore passed by value). Summary: F.50: Use a lambda when a function won’t do (to capture local variables, or to write a local function) F.52: Prefer capturing by reference in lambdas that will be used locally, including passed to algorithms F.53: Avoid capturing by reference in lambdas that will be used nonlocally, including returned, stored on the heap, or passed to another thread ES.28: Use lambdas for complex initialization, especially of const variables C.hier: Class hierarchies (OOP)A class hierarchy is constructed to represent a set of hierarchically organized concepts (only).Typically base classes act as interfaces.There are two major uses for hierarchies, often named implementation inheritance and interface inheritance. Class hierarchy rule summary: C.120: Use class hierarchies to represent concepts with inherent hierarchical structure (only) C.121: If a base class is used as an interface, make it a pure abstract class C.122: Use abstract classes as interfaces when complete separation of interface and implementation is needed Designing rules for classes in a hierarchy summary: C.126: An abstract class typically doesn’t need a constructor C.127: A class with a virtual function should have a virtual or protected destructor C.128: Virtual functions should specify exactly one of virtual, override, or final C.129: When designing a class hierarchy, distinguish between implementation inheritance and interface inheritance C.130: Redefine or prohibit copying for a base class; prefer a virtual clone function instead C.131: Avoid trivial getters and setters C.132: Don’t make a function virtual without reason C.133: Avoid protected data C.134: Ensure all non-const data members have the same access level C.135: Use multiple inheritance to represent multiple distinct interfaces C.136: Use multiple inheritance to represent the union of implementation attributes C.137: Use virtual bases to avoid overly general base classes C.138: Create an overload set for a derived class and its bases with using C.139: Use final sparingly C.140: Do not provide different default arguments for a virtual function and an overrider Accessing objects in a hierarchy rule summary: C.145: Access polymorphic objects through pointers and references C.146: Use dynamic_cast where class hierarchy navigation is unavoidable C.147: Use dynamic_cast to a reference type when failure to find the required class is considered an error C.148: Use dynamic_cast to a pointer type when failure to find the required class is considered a valid alternative C.149: Use unique_ptr or shared_ptr to avoid forgetting to delete objects created using new C.150: Use make_unique() to construct objects owned by unique_ptrs C.151: Use make_shared() to construct objects owned by shared_ptrs C.152: Never assign a pointer to an array of derived class objects to a pointer to its base C.153: Prefer virtual function to casting C.120: Use class hierarchies to represent concepts with inherent hierarchical structure (only)ReasonDirect representation of ideas in code eases comprehension and maintenance. Make sure the idea represented in the base class exactly matches all derived types and there is not a better way to express it than using the tight coupling of inheritance. Do not use inheritance when simply having a data member will do. Usually this means that the derived type needs to override a base virtual function or needs access to a protected member. Exampleclass DrawableUIElement { public: virtual void render() const = 0; // ... }; class AbstractButton : public DrawableUIElement { public: virtual void onClick() = 0; // ... }; class PushButton : public AbstractButton { virtual void render() const override; virtual void onClick() override; // ... }; class Checkbox : public AbstractButton { // ... }; Example, badDo not represent non-hierarchical domain concepts as class hierarchies. template&lt;typename T&gt; class Container { public: // list operations: virtual T&amp; get() = 0; virtual void put(T&amp;) = 0; virtual void insert(Position) = 0; // ... // vector operations: virtual T&amp; operator[](int) = 0; virtual void sort() = 0; // ... // tree operations: virtual void balance() = 0; // ... }; Here most overriding classes cannot implement most of the functions required in the interface well.Thus the base class becomes an implementation burden.Furthermore, the user of Container cannot rely on the member functions actually performing a meaningful operations reasonably efficiently;it may throw an exception instead.Thus users have to resort to run-time checking and/ornot using this (over)general interface in favor of a particular interface found by a run-time type inquiry (e.g., a dynamic_cast). Enforcement Look for classes with lots of members that do nothing but throw. Flag every use of a nonpublic base class B where the derived class D does not override a virtual function or access a protected member in B, and B is not one of the following: empty, a template parameter or parameter pack of D, a class template specialized with D. C.121: If a base class is used as an interface, make it a pure abstract classReasonA class is more stable (less brittle) if it does not contain data.Interfaces should normally be composed entirely of public pure virtual functions and a default/empty virtual destructor. Exampleclass My_interface { public: // ...only pure virtual functions here ... virtual ~My_interface() {} // or =default }; Example, badclass Goof { public: // ...only pure virtual functions here ... // no virtual destructor }; class Derived : public Goof { string s; // ... }; void use() { unique_ptr&lt;Goof&gt; p {new Derived{&quot;here we go&quot;}}; f(p.get()); // use Derived through the Goof interface g(p.get()); // use Derived through the Goof interface } // leak The Derived is deleted through its Goof interface, so its string is leaked.Give Goof a virtual destructor and all is well. Enforcement Warn on any class that contains data members and also has an overridable (non-final) virtual function. C.122: Use abstract classes as interfaces when complete separation of interface and implementation is neededReasonSuch as on an ABI (link) boundary. Examplestruct Device { virtual ~Device() = default; virtual void write(span&lt;const char&gt; outbuf) = 0; virtual void read(span&lt;char&gt; inbuf) = 0; }; class D1 : public Device { // ... data ... void write(span&lt;const char&gt; outbuf) override; void read(span&lt;char&gt; inbuf) override; }; class D2 : public Device { // ... different data ... void write(span&lt;const char&gt; outbuf) override; void read(span&lt;char&gt; inbuf) override; }; A user can now use D1s and D2s interchangeably through the interface provided by Device.Furthermore, we can update D1 and D2 in a ways that are not binary compatible with older versions as long as all access goes through Device. Enforcement??? C.hierclass: Designing classes in a hierarchy:C.126: An abstract class typically doesn’t need a constructorReasonAn abstract class typically does not have any data for a constructor to initialize. Example??? Exception A base class constructor that does work, such as registering an object somewhere, may need a constructor. In extremely rare cases, you might find it reasonable for an abstract class to have a bit of data shared by all derived classes(e.g., use statistics data, debug information, etc.); such classes tend to have constructors. But be warned: Such classes also tend to be prone to requiring virtual inheritance. EnforcementFlag abstract classes with constructors. C.127: A class with a virtual function should have a virtual or protected destructorReasonA class with a virtual function is usually (and in general) used via a pointer to base. Usually, the last user has to call delete on a pointer to base, often via a smart pointer to base, so the destructor should be public and virtual. Less commonly, if deletion through a pointer to base is not intended to be supported, the destructor should be protected and nonvirtual; see C.35. Example, badstruct B { virtual int f() = 0; // ... no user-written destructor, defaults to public nonvirtual ... }; // bad: derived from a class without a virtual destructor struct D : B { string s {&quot;default&quot;}; }; void use() { unique_ptr&lt;B&gt; p = make_unique&lt;D&gt;(); // ... } // undefined behavior. May call B::~B only and leak the string NoteThere are people who don’t follow this rule because they plan to use a class only through a shared_ptr: std::shared_ptr&lt;B&gt; p = std::make_shared&lt;D&gt;(args); Here, the shared pointer will take care of deletion, so no leak will occur from an inappropriate delete of the base. People who do this consistently can get a false positive, but the rule is important – what if one was allocated using make_unique? It’s not safe unless the author of B ensures that it can never be misused, such as by making all constructors private and providing a factory function to enforce the allocation with make_shared. Enforcement A class with any virtual functions should have a destructor that is either public and virtual or else protected and nonvirtual. Flag delete of a class with a virtual function but no virtual destructor. C.128: Virtual functions should specify exactly one of virtual, override, or finalReasonReadability.Detection of mistakes.Writing explicit virtual, override, or final is self-documenting and enables the compiler to catch mismatch of types and/or names between base and derived classes. However, writing more than one of these three is both redundant and a potential source of errors. Use virtual only when declaring a new virtual function. Use override only when declaring an overrider. Use final only when declaring a final overrider. If a base class destructor is declared virtual, one should avoid declaring derived class destructors virtual or override. Some code base and tools might insist on override for destructors, but that is not the recommendation of these guidelines. Example, badstruct B { void f1(int); virtual void f2(int) const; virtual void f3(int); // ... }; struct D : B { void f1(int); // bad (hope for a warning): D::f1() hides B::f1() void f2(int) const; // bad (but conventional and valid): no explicit override void f3(double); // bad (hope for a warning): D::f3() hides B::f3() // ... }; Example, goodstruct Better : B { void f1(int) override; // error (caught): D::f1() hides B::f1() void f2(int) const override; void f3(double) override; // error (caught): D::f3() hides B::f3() // ... }; Enforcement Compare names in base and derived classes and flag uses of the same name that does not override. Flag overrides with neither override nor final. Flag function declarations that use more than one of virtual, override, and final. C.129: When designing a class hierarchy, distinguish between implementation inheritance and interface inheritanceReasonImplementation details in an interface makes the interface brittle;that is, makes its users vulnerable to having to recompile after changes in the implementation.Data in a base class increases the complexity of implementing the base and can lead to replication of code. NoteDefinition: interface inheritance is the use of inheritance to separate users from implementations,in particular to allow derived classes to be added and changed without affecting the users of base classes. implementation inheritance is the use of inheritance to simplify implementation of new facilitiesby making useful operations available for implementers of related new operations (sometimes called “programming by difference”). A pure interface class is simply a set of pure virtual functions; see I.25. In early OOP (e.g., in the 1980s and 1990s), implementation inheritance and interface inheritance were often mixedand bad habits die hard.Even now, mixtures are not uncommon in old code bases and in old-style teaching material. The importance of keeping the two kinds of inheritance increases with the size of a hierarchy (e.g., dozens of derived classes), with the length of time the hierarchy is used (e.g., decades), and with the number of distinct organizations in which a hierarchy is used(e.g., it can be difficult to distribute an update to a base class) Example, badclass Shape { // BAD, mixed interface and implementation public: Shape(); Shape(Point ce = {0, 0}, Color co = none): cent{ce}, col {co} { /* ... */} Point center() const { return cent; } Color color() const { return col; } virtual void rotate(int) = 0; virtual void move(Point p) { cent = p; redraw(); } virtual void redraw(); // ... private: Point cent; Color col; }; class Circle : public Shape { public: Circle(Point c, int r) :Shape{c}, rad{r} { /* ... */ } // ... private: int rad; }; class Triangle : public Shape { public: Triangle(Point p1, Point p2, Point p3); // calculate center // ... }; Problems: As the hierarchy grows and more data is added to Shape, the constructors gets harder to write and maintain. Why calculate the center for the Triangle? we may never us it. Add a data member to Shape (e.g., drawing style or canvas)and all derived classes and all users needs to be reviewed, possibly changes, and probably recompiled. The implementation of Shape::move() is an example of implementation inheritance:we have defined move() once and for all for all derived classes.The more code there is in such base class member function implementations and the more data is shared by placing it in the base,the more benefits we gain - and the less stable the hierarchy is. ExampleThis Shape hierarchy can be rewritten using interface inheritance: class Shape { // pure interface public: virtual Point center() const = 0; virtual Color color() const = 0; virtual void rotate(int) = 0; virtual void move(Point p) = 0; virtual void redraw() = 0; // ... }; Note that a pure interface rarely have constructors: there is nothing to construct. class Circle : public Shape { public: Circle(Point c, int r, Color c) :cent{c}, rad{r}, col{c} { /* ... */ } Point center() const override { return cent; } Color color() const override { return col; } // ... private: Point cent; int rad; Color col; }; The interface is now less brittle, but there is more work in implementing the member functions.For example, center has to be implemented by every class derived from Shape. Example, dual hierarchyHow can we gain the benefit of the stable hierarchies from implementation hierarchies and the benefit of implementation reuse from implementation inheritance.One popular technique is dual hierarchies.There are many ways of implementing the idea of dual hierarchies; here, we use a multiple-inheritance variant. First we devise a hierarchy of interface classes: class Shape { // pure interface public: virtual Point center() const = 0; virtual Color color() const = 0; virtual void rotate(int) = 0; virtual void move(Point p) = 0; virtual void redraw() = 0; // ... }; class Circle : public Shape { // pure interface public: virtual int radius() = 0; // ... }; To make this interface useful, we must provide its implementation classes (here, named equivalently, but in the Impl namespace): class Impl::Shape : public Shape { // implementation public: // constructors, destructor // ... Point center() const override { /* ... */ } Color color() const override { /* ... */ } void rotate(int) override { /* ... */ } void move(Point p) override { /* ... */ } void redraw() override { /* ... */ } // ... }; Now Shape is a poor example of a class with an implementation,but bear with us because this is just a simple example of a technique aimed at more complex hierarchies. class Impl::Circle : public Circle, public Impl::Shape { // implementation public: // constructors, destructor int radius() override { /* ... */ } // ... }; And we could extend the hierarchies by adding a Smiley class (:-)): class Smiley : public Circle { // pure interface public: // ... }; class Impl::Smiley : public Smiley, public Impl::Circle { // implementation public: // constructors, destructor // ... } There are now two hierarchies: interface: Smiley -&gt; Circle -&gt; Shape implementation: Impl::Smiley -&gt; Impl::Circle -&gt; Impl::Shape Since each implementation derived from its interface as well as its implementation base class we get a lattice (DAG): Smiley -&gt; Circle -&gt; Shape ^ ^ ^ | | | Impl::Smiley -&gt; Impl::Circle -&gt; Impl::Shape As mentioned, this is just one way to construct a dual hierarchy. The implementation hierarchy can be used directly, rather than through the abstract interface. void work_with_shape(Shape&amp;); int user() { Impl::Smiley my_smiley{ /* args */ }; // create concrete shape // ... my_smiley.some_member(); // use implementation class directly // ... work_with_shape(my_smiley); // use implementation through abstract interface // ... } This can be useful when the implementation class has members that are not offered in the abstract interfaceor if direct use of a member offers optimization opportunities (e.g., if an implementation member function is final) NoteAnother (related) technique for separating interface and implementation is Pimpl. NoteThere is often a choice between offering common functionality as (implemented) base class functions and free-standing functions(in an implementation namespace).Base classes gives a shorter notation and easier access to shared data (in the base)at the cost of the functionality being available only to users of the hierarchy. Enforcement Flag a derived to base conversion to a base with both data and virtual functions(except for calls from a derived class member to a base class member) ??? C.130: Redefine or prohibit copying for a base class; prefer a virtual clone function insteadReasonCopying a base is usually slicing. If you really need copy semantics, copy deeply: Provide a virtual clone function that will copy the actual most-derived type and return an owning pointer to the new object, and then in derived classes return the derived type (use a covariant return type). Exampleclass Base { public: virtual owner&lt;Base*&gt; clone() = 0; virtual ~Base() = 0; Base(const Base&amp;) = delete; Base&amp; operator=(const Base&amp;) = delete; }; class Derived : public Base { public: owner&lt;Derived*&gt; clone() override; virtual ~Derived() override; }; Note that because of language rules, the covariant return type cannot be a smart pointer. See also C.67. Enforcement Flag a class with a virtual function and a non-user-defined copy operation. Flag an assignment of base class objects (objects of a class from which another has been derived). C.131: Avoid trivial getters and settersReasonA trivial getter or setter adds no semantic value; the data item could just as well be public. Exampleclass Point { // Bad: verbose int x; int y; public: Point(int xx, int yy) : x{xx}, y{yy} { } int get_x() const { return x; } void set_x(int xx) { x = xx; } int get_y() const { return y; } void set_y(int yy) { y = yy; } // no behavioral member functions }; Consider making such a class a struct – that is, a behaviorless bunch of variables, all public data and no member functions. struct Point { int x {0}; int y {0}; }; Note that we can put default initializers on member variables: C.49: Prefer initialization to assignment in constructors. NoteThe key to this rule is whether the semantics of the getter/setter are trivial. While it is not a complete definition of “trivial”, consider whether there would be any difference beyond syntax if the getter/setter was a public data member instead. Examples of non-trivial semantics would be: maintaining a class invariant or converting between an internal type and an interface type. EnforcementFlag multiple get and set member functions that simply access a member without additional semantics. C.132: Don’t make a function virtual without reasonReasonRedundant virtual increases run-time and object-code size.A virtual function can be overridden and is thus open to mistakes in a derived class.A virtual function ensures code replication in a templated hierarchy. Example, badtemplate&lt;class T&gt; class Vector { public: // ... virtual int size() const { return sz; } // bad: what good could a derived class do? private: T* elem; // the elements int sz; // number of elements }; This kind of “vector” isn’t meant to be used as a base class at all. Enforcement Flag a class with virtual functions but no derived classes. Flag a class where all member functions are virtual and have implementations. C.133: Avoid protected dataReasonprotected data is a source of complexity and errors.protected data complicates the statement of invariants.protected data inherently violates the guidance against putting data in base classes, which usually leads to having to deal with virtual inheritance as well. Example, badclass Shape { public: // ... interface functions ... protected: // data for use in derived classes: Color fill_color; Color edge_color; Style st; }; Now it is up to every derived Shape to manipulate the protected data correctly.This has been popular, but also a major source of maintenance problems.In a large class hierarchy, the consistent use of protected data is hard to maintain because there can be a lot of code,spread over a lot of classes.The set of classes that can touch that data is open: anyone can derive a new class and start manipulating the protected data.Often, it is not possible to examine the complete set of classes, so any change to the representation of the class becomes infeasible.There is no enforced invariant for the protected data; it is much like a set of global variables.The protected data has de facto become global to a large body of code. NoteProtected data often looks tempting to enable arbitrary improvements through derivation.Often, what you get is unprincipled changes and errors.Prefer private data with a well-specified and enforced invariant.Alternative, and often better, keep data out of any class used as an interface. NoteProtected member function can be just fine. EnforcementFlag classes with protected data. C.134: Ensure all non-const data members have the same access levelReasonPrevention of logical confusion leading to errors.If the non-const data members don’t have the same access level, the type is confused about what it’s trying to do.Is it a type that maintains an invariant or simply a collection of values? DiscussionThe core question is: What code is responsible for maintaining a meaningful/correct value for that variable? There are exactly two kinds of data members: A: Ones that don’t participate in the object’s invariant. Any combination of values for these members is valid. B: Ones that do participate in the object’s invariant. Not every combination of values is meaningful (else there’d be no invariant). Therefore all code that has write access to these variables must know about the invariant, know the semantics, and know (and actively implement and enforce) the rules for keeping the values correct. Data members in category A should just be public (or, more rarely, protected if you only want derived classes to see them). They don’t need encapsulation. All code in the system might as well see and manipulate them. Data members in category B should be private or const. This is because encapsulation is important. To make them non-private and non-const would mean that the object can’t control its own state: An unbounded amount of code beyond the class would need to know about the invariant and participate in maintaining it accurately – if these data members were public, that would be all calling code that uses the object; if they were protected, it would be all the code in current and future derived classes. This leads to brittle and tightly coupled code that quickly becomes a nightmare to maintain. Any code that inadvertently sets the data members to an invalid or unexpected combination of values would corrupt the object and all subsequent uses of the object. Most classes are either all A or all B: All public: If you’re writing an aggregate bundle-of-variables without an invariant across those variables, then all the variables should be public.By convention, declare such classes struct rather than class All private: If you’re writing a type that maintains an invariant, then all the non-const variables should be private – it should be encapsulated. ExceptionOccasionally classes will mix A and B, usually for debug reasons. An encapsulated object may contain something like non-const debug instrumentation that isn’t part of the invariant and so falls into category A – it isn’t really part of the object’s value or meaningful observable state either. In that case, the A parts should be treated as A’s (made public, or in rarer cases protected if they should be visible only to derived classes) and the B parts should still be treated like B’s (private or const). EnforcementFlag any class that has non-const data members with different access levels. C.135: Use multiple inheritance to represent multiple distinct interfacesReasonNot all classes will necessarily support all interfaces, and not all callers will necessarily want to deal with all operations.Especially to break apart monolithic interfaces into “aspects” of behavior supported by a given derived class. Exampleclass iostream : public istream, public ostream { // very simplified // ... }; istream provides the interface to input operations; ostream provides the interface to output operations.iostream provides the union of the istream and ostream interfaces and the synchronization needed to allow both on a single stream. NoteThis is a very common use of inheritance because the need for multiple different interfaces to an implementation is commonand such interfaces are often not easily or naturally organized into a single-rooted hierarchy. NoteSuch interfaces are typically abstract classes. Enforcement??? C.136: Use multiple inheritance to represent the union of implementation attributesReasonSome forms of mixins have state and often operations on that state.If the operations are virtual the use of inheritance is necessary, if not using inheritance can avoid boilerplate and forwarding. Exampleclass iostream : public istream, public ostream { // very simplified // ... }; istream provides the interface to input operations (and some data); ostream provides the interface to output operations (and some data).iostream provides the union of the istream and ostream interfaces and the synchronization needed to allow both on a single stream. NoteThis a relatively rare use because implementation can often be organized into a single-rooted hierarchy. ExampleSometimes, an “implementation attribute” is more like a “mixin” that determine the behavior of an implementation and injectmembers to enable the implementation of the policies it requires.For example, see std::enable_shared_from_thisor various bases from boost.intrusive (e.g. list_base_hook or intrusive_ref_counter). Enforcement??? C.137: Use virtual bases to avoid overly general base classesReason Allow separation of shared data and interface. To avoid all shared data to being put into an ultimate base class. Examplestruct Interface { virtual void f(); virtual int g(); // ... no data here ... }; class Utility { // with data void utility1(); virtual void utility2(); // customization point public: int x; int y; }; class Derive1 : public Interface, virtual protected Utility { // override Interface functions // Maybe override Utility virtual functions // ... }; class Derive2 : public Interface, virtual protected Utility { // override Interface functions // Maybe override Utility virtual functions // ... }; Factoring out Utility makes sense if many derived classes share significant “implementation details.” NoteObviously, the example is too “theoretical”, but it is hard to find a small realistic example.Interface is the root of an interface hierarchyand Utility is the root of an implementation hierarchy.Here is a slightly more realistic example with an explanation. NoteOften, linearization of a hierarchy is a better solution. EnforcementFlag mixed interface and implementation hierarchies. C.138: Create an overload set for a derived class and its bases with usingReasonWithout a using declaration, member functions in the derived class hide the entire inherited overload sets. Example, bad#include &lt;iostream&gt; class B { public: virtual int f(int i) { std::cout &lt;&lt; &quot;f(int): &quot;; return i; } virtual double f(double d) { std::cout &lt;&lt; &quot;f(double): &quot;; return d; } }; class D: public B { public: int f(int i) override { std::cout &lt;&lt; &quot;f(int): &quot;; return i + 1; } }; int main() { D d; std::cout &lt;&lt; d.f(2) &lt;&lt; &apos;\n&apos;; // prints &quot;f(int): 3&quot; std::cout &lt;&lt; d.f(2.3) &lt;&lt; &apos;\n&apos;; // prints &quot;f(int): 3&quot; } Example, goodclass D: public B { public: int f(int i) override { std::cout &lt;&lt; &quot;f(int): &quot;; return i + 1; } using B::f; // exposes f(double) }; NoteThis issue affects both virtual and nonvirtual member functions For variadic bases, C++17 introduced a variadic form of the using-declaration, template &lt;class... Ts&gt; struct Overloader : Ts... { using Ts::operator()...; // exposes operator() from every base }; EnforcementDiagnose name hiding C.139: Use final sparinglyReasonCapping a hierarchy with final is rarely needed for logical reasons and can be damaging to the extensibility of a hierarchy. Example, badclass Widget { /* ... */ }; // nobody will ever want to improve My_widget (or so you thought) class My_widget final : public Widget { /* ... */ }; class My_improved_widget : public My_widget { /* ... */ }; // error: can&apos;t do that NoteNot every class is meant to be a base class.Most standard-library classes are examples of that (e.g., std::vector and std::string are not designed to be derived from).This rule is about using final on classes with virtual functions meant to be interfaces for a class hierarchy. NoteCapping an individual virtual function with final is error-prone as final can easily be overlooked when defining/overriding a set of functions.Fortunately, the compiler catches such mistakes: You cannot re-declare/re-open a final member in a derived class. NoteClaims of performance improvements from final should be substantiated.Too often, such claims are based on conjecture or experience with other languages. There are examples where final can be important for both logical and performance reasons.One example is a performance-critical AST hierarchy in a compiler or language analysis tool.New derived classes are not added every year and only by library implementers.However, misuses are (or at least have been) far more common. EnforcementFlag uses of final. C.140: Do not provide different default arguments for a virtual function and an overriderReasonThat can cause confusion: An overrider does not inherit default arguments. Example, badclass Base { public: virtual int multiply(int value, int factor = 2) = 0; }; class Derived : public Base { public: int multiply(int value, int factor = 10) override; }; Derived d; Base&amp; b = d; b.multiply(10); // these two calls will call the same function but d.multiply(10); // with different arguments and so different results EnforcementFlag default arguments on virtual functions if they differ between base and derived declarations. C.hier-access: Accessing objects in a hierarchyC.145: Access polymorphic objects through pointers and referencesReasonIf you have a class with a virtual function, you don’t (in general) know which class provided the function to be used. Examplestruct B { int a; virtual int f(); }; struct D : B { int b; int f() override; }; void use(B b) { D d; B b2 = d; // slice B b3 = b; } void use2() { D d; use(d); // slice } Both ds are sliced. ExceptionYou can safely access a named polymorphic object in the scope of its definition, just don’t slice it. void use3() { D d; d.f(); // OK } EnforcementFlag all slicing. C.146: Use dynamic_cast where class hierarchy navigation is unavoidableReasondynamic_cast is checked at run time. Examplestruct B { // an interface virtual void f(); virtual void g(); }; struct D : B { // a wider interface void f() override; virtual void h(); }; void user(B* pb) { if (D* pd = dynamic_cast&lt;D*&gt;(pb)) { // ... use D&apos;s interface ... } else { // ... make do with B&apos;s interface ... } } Use of the other casts can violate type safety and cause the program to access a variable that is actually of type X to be accessed as if it were of an unrelated type Z: void user2(B* pb) // bad { D* pd = static_cast&lt;D*&gt;(pb); // I know that pb really points to a D; trust me // ... use D&apos;s interface ... } void user3(B* pb) // unsafe { if (some_condition) { D* pd = static_cast&lt;D*&gt;(pb); // I know that pb really points to a D; trust me // ... use D&apos;s interface ... } else { // ... make do with B&apos;s interface ... } } void f() { B b; user(&amp;b); // OK user2(&amp;b); // bad error user3(&amp;b); // OK *if* the programmer got the some_condition check right } NoteLike other casts, dynamic_cast is overused.Prefer virtual functions to casting.Prefer static polymorphism to hierarchy navigation where it is possible (no run-time resolution necessary)and reasonably convenient. NoteSome people use dynamic_cast where a typeid would have been more appropriate;dynamic_cast is a general “is kind of” operation for discovering the best interface to an object,whereas typeid is a “give me the exact type of this object” operation to discover the actual type of an object.The latter is an inherently simpler operation that ought to be faster.The latter (typeid) is easily hand-crafted if necessary (e.g., if working on a system where RTTI is – for some reason – prohibited),the former (dynamic_cast) is far harder to implement correctly in general. Consider: struct B { const char* name {&quot;B&quot;}; // if pb1-&gt;id() == pb2-&gt;id() *pb1 is the same type as *pb2 virtual const char* id() const { return name; } // ... }; struct D : B { const char* name {&quot;D&quot;}; const char* id() const override { return name; } // ... }; void use() { B* pb1 = new B; B* pb2 = new D; cout &lt;&lt; pb1-&gt;id(); // &quot;B&quot; cout &lt;&lt; pb2-&gt;id(); // &quot;D&quot; if (pb1-&gt;id() == &quot;D&quot;) { // looks innocent D* pd = static_cast&lt;D*&gt;(pb1); // ... } // ... } The result of pb2-&gt;id() == &quot;D&quot; is actually implementation defined.We added it to warn of the dangers of home-brew RTTI.This code may work as expected for years, just to fail on a new machine, new compiler, or a new linker that does not unify character literals. If you implement your own RTTI, be careful. ExceptionIf your implementation provided a really slow dynamic_cast, you may have to use a workaround.However, all workarounds that cannot be statically resolved involve explicit casting (typically static_cast) and are error-prone.You will basically be crafting your own special-purpose dynamic_cast.So, first make sure that your dynamic_cast really is as slow as you think it is (there are a fair number of unsupported rumors about)and that your use of dynamic_cast is really performance critical. We are of the opinion that current implementations of dynamic_cast are unnecessarily slow.For example, under suitable conditions, it is possible to perform a dynamic_cast in fast constant time.However, compatibility makes changes difficult even if all agree that an effort to optimize is worthwhile. In very rare cases, if you have measured that the dynamic_cast overhead is material, you have other means to statically guarantee that a downcast will succeed (e.g., you are using CRTP carefully), and there is no virtual inheritance involved, consider tactically resorting static_cast with a prominent comment and disclaimer summarizing this paragraph and that human attention is needed under maintenance because the type system can’t verify correctness. Even so, in our experience such “I know what I’m doing” situations are still a known bug source. ExceptionConsider: template&lt;typename B&gt; class Dx : B { // ... }; Enforcement Flag all uses of static_cast for downcasts, including C-style casts that perform a static_cast. This rule is part of the type-safety profile. C.147: Use dynamic_cast to a reference type when failure to find the required class is considered an errorReasonCasting to a reference expresses that you intend to end up with a valid object, so the cast must succeed. dynamic_cast will then throw if it does not succeed. Example??? Enforcement??? C.148: Use dynamic_cast to a pointer type when failure to find the required class is considered a valid alternativeReasonThe dynamic_cast conversion allows to test whether a pointer is pointing at a polymorphic object that has a given class in its hierarchy. Since failure to find the class merely returns a null value, it can be tested during run time. This allows writing code that can choose alternative paths depending on the results. Contrast with C.147, where failure is an error, and should not be used for conditional execution. ExampleThe example below describes the add function of a Shape_owner that takes ownership of constructed Shape objects. The objects are also sorted into views, according to their geometric attributes.In this example, Shape does not inherit from Geometric_attributes. Only its subclasses do. void add(Shape* const item) { // Ownership is always taken owned_shapes.emplace_back(item); // Check the Geometric_attributes and add the shape to none/one/some/all of the views if (auto even = dynamic_cast&lt;Even_sided*&gt;(item)) { view_of_evens.emplace_back(even); } if (auto trisym = dynamic_cast&lt;Trilaterally_symmetrical*&gt;(item)) { view_of_trisyms.emplace_back(trisym); } } NotesA failure to find the required class will cause dynamic_cast to return a null value, and de-referencing a null-valued pointer will lead to undefined behavior.Therefore the result of the dynamic_cast should always be treated as if it may contain a null value, and tested. Enforcement (Complex) Unless there is a null test on the result of a dynamic_cast of a pointer type, warn upon dereference of the pointer. C.149: Use unique_ptr or shared_ptr to avoid forgetting to delete objects created using newReasonAvoid resource leaks. Examplevoid use(int i) { auto p = new int {7}; // bad: initialize local pointers with new auto q = make_unique&lt;int&gt;(9); // ok: guarantee the release of the memory-allocated for 9 if (0 &lt; i) return; // maybe return and leak delete p; // too late } Enforcement Flag initialization of a naked pointer with the result of a new Flag delete of local variable C.150: Use make_unique() to construct objects owned by unique_ptrsReason make_unique gives a more concise statement of the construction.It also ensures exception safety in complex expressions. Exampleunique_ptr&lt;Foo&gt; p {new&lt;Foo&gt;{7}}; // OK: but repetitive auto q = make_unique&lt;Foo&gt;(7); // Better: no repetition of Foo // Not exception-safe: the compiler may interleave the computations of arguments as follows: // // 1. allocate memory for Foo, // 2. construct Foo, // 3. call bar, // 4. construct unique_ptr&lt;Foo&gt;. // // If bar throws, Foo will not be destroyed, and the memory-allocated for it will leak. f(unique_ptr&lt;Foo&gt;(new Foo()), bar()); // Exception-safe: calls to functions are never interleaved. f(make_unique&lt;Foo&gt;(), bar()); Enforcement Flag the repetitive usage of template specialization list &lt;Foo&gt; Flag variables declared to be unique_ptr&lt;Foo&gt; C.151: Use make_shared() to construct objects owned by shared_ptrsReason make_shared gives a more concise statement of the construction.It also gives an opportunity to eliminate a separate allocation for the reference counts, by placing the shared_ptr‘s use counts next to its object. Examplevoid test() { // OK: but repetitive; and separate allocations for the Bar and shared_ptr&apos;s use count shared_ptr&lt;Bar&gt; p {new&lt;Bar&gt;{7}}; auto q = make_shared&lt;Bar&gt;(7); // Better: no repetition of Bar; one object } Enforcement Flag the repetitive usage of template specialization list&lt;Bar&gt; Flag variables declared to be shared_ptr&lt;Bar&gt; C.152: Never assign a pointer to an array of derived class objects to a pointer to its baseReasonSubscripting the resulting base pointer will lead to invalid object access and probably to memory corruption. Examplestruct B { int x; }; struct D : B { int y; }; void use(B*); D a[] = {{1, 2}, {3, 4}, {5, 6}}; B* p = a; // bad: a decays to &amp;a[0] which is converted to a B* p[1].x = 7; // overwrite D[0].y use(a); // bad: a decays to &amp;a[0] which is converted to a B* Enforcement Flag all combinations of array decay and base to derived conversions. Pass an array as a span rather than as a pointer, and don’t let the array name suffer a derived-to-base conversion before getting into the span C.153: Prefer virtual function to castingReasonA virtual function call is safe, whereas casting is error-prone.A virtual function call reaches the most derived function, whereas a cast may reach an intermediate class and thereforegive a wrong result (especially as a hierarchy is modified during maintenance). Example??? EnforcementSee C.146 and ??? C.over: Overloading and overloaded operatorsYou can overload ordinary functions, template functions, and operators.You cannot overload function objects. Overload rule summary: C.160: Define operators primarily to mimic conventional usage C.161: Use nonmember functions for symmetric operators C.162: Overload operations that are roughly equivalent C.163: Overload only for operations that are roughly equivalent C.164: Avoid conversion operators C.165: Use using for customization points C.166: Overload unary &amp; only as part of a system of smart pointers and references C.167: Use an operator for an operation with its conventional meaning C.168: Define overloaded operators in the namespace of their operands C.170: If you feel like overloading a lambda, use a generic lambda C.160: Define operators primarily to mimic conventional usageReasonMinimize surprises. Exampleclass X { public: // ... X&amp; operator=(const X&amp;); // member function defining assignment friend bool operator==(const X&amp;, const X&amp;); // == needs access to representation // after a = b we have a == b // ... }; Here, the conventional semantics is maintained: Copies compare equal. Example, badX operator+(X a, X b) { return a.v - b.v; } // bad: makes + subtract NoteNonmember operators should be either friends or defined in the same namespace as their operands.Binary operators should treat their operands equivalently. EnforcementPossibly impossible. C.161: Use nonmember functions for symmetric operatorsReasonIf you use member functions, you need two.Unless you use a nonmember function for (say) ==, a == b and b == a will be subtly different. Examplebool operator==(Point a, Point b) { return a.x == b.x &amp;&amp; a.y == b.y; } EnforcementFlag member operator functions. C.162: Overload operations that are roughly equivalentReasonHaving different names for logically equivalent operations on different argument types is confusing, leads to encoding type information in function names, and inhibits generic programming. ExampleConsider: void print(int a); void print(int a, int base); void print(const string&amp;); These three functions all print their arguments (appropriately). Conversely: void print_int(int a); void print_based(int a, int base); void print_string(const string&amp;); These three functions all print their arguments (appropriately). Adding to the name just introduced verbosity and inhibits generic code. Enforcement??? C.163: Overload only for operations that are roughly equivalentReasonHaving the same name for logically different functions is confusing and leads to errors when using generic programming. ExampleConsider: void open_gate(Gate&amp; g); // remove obstacle from garage exit lane void fopen(const char* name, const char* mode); // open file The two operations are fundamentally different (and unrelated) so it is good that their names differ. Conversely: void open(Gate&amp; g); // remove obstacle from garage exit lane void open(const char* name, const char* mode =&quot;r&quot;); // open file The two operations are still fundamentally different (and unrelated) but the names have been reduced to their (common) minimum, opening opportunities for confusion.Fortunately, the type system will catch many such mistakes. NoteBe particularly careful about common and popular names, such as open, move, +, and ==. Enforcement??? C.164: Avoid conversion operatorsReasonImplicit conversions can be essential (e.g., double to int) but often cause surprises (e.g., String to C-style string). NotePrefer explicitly named conversions until a serious need is demonstrated.By “serious need” we mean a reason that is fundamental in the application domain (such as an integer to complex number conversion)and frequently needed. Do not introduce implicit conversions (through conversion operators or non-explicit constructors)just to gain a minor convenience. Example, badclass String { // handle ownership and access to a sequence of characters // ... String(czstring p); // copy from *p to *(this-&gt;elem) // ... operator zstring() { return elem; } // ... }; void user(zstring p) { if (*p == &quot;&quot;) { String s {&quot;Trouble ahead!&quot;}; // ... p = s; } // use p } The string allocated for s and assigned to p is destroyed before it can be used. EnforcementFlag all conversion operators. C.165: Use using for customization pointsReasonTo find function objects and functions defined in a separate namespace to “customize” a common function. ExampleConsider swap. It is a general (standard-library) function with a definition that will work for just about any type.However, it is desirable to define specific swap()s for specific types.For example, the general swap() will copy the elements of two vectors being swapped, whereas a good specific implementation will not copy elements at all. namespace N { My_type X { /* ... */ }; void swap(X&amp;, X&amp;); // optimized swap for N::X // ... } void f1(N::X&amp; a, N::X&amp; b) { std::swap(a, b); // probably not what we wanted: calls std::swap() } The std::swap() in f1() does exactly what we asked it to do: it calls the swap() in namespace std.Unfortunately, that’s probably not what we wanted.How do we get N::X considered? void f2(N::X&amp; a, N::X&amp; b) { swap(a, b); // calls N::swap } But that may not be what we wanted for generic code.There, we typically want the specific function if it exists and the general function if not.This is done by including the general function in the lookup for the function: void f3(N::X&amp; a, N::X&amp; b) { using std::swap; // make std::swap available swap(a, b); // calls N::swap if it exists, otherwise std::swap } EnforcementUnlikely, except for known customization points, such as swap.The problem is that the unqualified and qualified lookups both have uses. C.166: Overload unary &amp; only as part of a system of smart pointers and referencesReasonThe &amp; operator is fundamental in C++.Many parts of the C++ semantics assumes its default meaning. Exampleclass Ptr { // a somewhat smart pointer Ptr(X* pp) :p(pp) { /* check */ } X* operator-&gt;() { /* check */ return p; } X operator[](int i); X operator*(); private: T* p; }; class X { Ptr operator&amp;() { return Ptr{this}; } // ... }; NoteIf you “mess with” operator &amp; be sure that its definition has matching meanings for -&gt;, [], *, and . on the result type.Note that operator . currently cannot be overloaded so a perfect system is impossible.We hope to remedy that: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4477.pdf.Note that std::addressof() always yields a built-in pointer. EnforcementTricky. Warn if &amp; is user-defined without also defining -&gt; for the result type. C.167: Use an operator for an operation with its conventional meaningReasonReadability. Convention. Reusability. Support for generic code Examplevoid cout_my_class(const My_class&amp; c) // confusing, not conventional,not generic { std::cout &lt;&lt; /* class members here */; } std::ostream&amp; operator&lt;&lt;(std::ostream&amp; os, const my_class&amp; c) // OK { return os &lt;&lt; /* class members here */; } By itself, cout_my_class would be OK, but it is not usable/composable with code that rely on the &lt;&lt; convention for output: My_class var { /* ... */ }; // ... cout &lt;&lt; &quot;var = &quot; &lt;&lt; var &lt;&lt; &apos;\n&apos;; NoteThere are strong and vigorous conventions for the meaning most operators, such as comparisons (==, !=, &lt;, &lt;=, &gt;, and &gt;=), arithmetic operations (+, -, *, /, and %) access operations (., -&gt;, unary *, and []) assignment (=) Don’t define those unconventionally and don’t invent your own names for them. EnforcementTricky. Requires semantic insight. C.168: Define overloaded operators in the namespace of their operandsReasonReadability.Ability for find operators using ADL.Avoiding inconsistent definition in different namespaces Examplestruct S { }; bool operator==(S, S); // OK: in the same namespace as S, and even next to S S s; bool x = (s == s); This is what a default == would do, if we had such defaults. Examplenamespace N { struct S { }; bool operator==(S, S); // OK: in the same namespace as S, and even next to S } N::S s; bool x = (s == s); // finds N::operator==() by ADL Example, badstruct S { }; S s; namespace N { S::operator!(S a) { return true; } S not_s = !s; } namespace M { S::operator!(S a) { return false; } S not_s = !s; } Here, the meaning of !s differs in N and M.This can be most confusing.Remove the definition of namespace M and the confusion is replaced by an opportunity to make the mistake. NoteIf a binary operator is defined for two types that are defined in different namespaces, you cannot follow this rule.For example: Vec::Vector operator*(const Vec::Vector&amp;, const Mat::Matrix&amp;); This may be something best avoided. See alsoThis is a special case of the rule that helper functions should be defined in the same namespace as their class. Enforcement Flag operator definitions that are not it the namespace of their operands C.170: If you feel like overloading a lambda, use a generic lambdaReasonYou cannot overload by defining two different lambdas with the same name. Examplevoid f(int); void f(double); auto f = [](char); // error: cannot overload variable and function auto g = [](int) { /* ... */ }; auto g = [](double) { /* ... */ }; // error: cannot overload variables auto h = [](auto) { /* ... */ }; // OK EnforcementThe compiler catches the attempt to overload a lambda. C.union: UnionsA union is a struct where all members start at the same address so that it can hold only one member at a time.A union does not keep track of which member is stored so the programmer has to get it right;this is inherently error-prone, but there are ways to compensate. A type that is a union plus an indicator of which member is currently held is called a tagged union, a discriminated union, or a variant. Union rule summary: C.180: Use unions to save Memory C.181: Avoid “naked” unions C.182: Use anonymous unions to implement tagged unions C.183: Don’t use a union for type punning ??? C.180: Use unions to save memoryReasonA union allows a single piece of memory to be used for different types of objects at different times.Consequently, it can be used to save memory when we have several objects that are never used at the same time. Exampleunion Value { int x; double d; }; Value v = { 123 }; // now v holds an int cout &lt;&lt; v.x &lt;&lt; &apos;\n&apos;; // write 123 v.d = 987.654; // now v holds a double cout &lt;&lt; v.d &lt;&lt; &apos;\n&apos;; // write 987.654 But heed the warning: Avoid “naked” unions Example// Short-string optimization constexpr size_t buffer_size = 16; // Slightly larger than the size of a pointer class Immutable_string { public: Immutable_string(const char* str) : size(strlen(str)) { if (size &lt; buffer_size) strcpy_s(string_buffer, buffer_size, str); else { string_ptr = new char[size + 1]; strcpy_s(string_ptr, size + 1, str); } } ~Immutable_string() { if (size &gt;= buffer_size) delete string_ptr; } const char* get_str() const { return (size &lt; buffer_size) ? string_buffer : string_ptr; } private: // If the string is short enough, we store the string itself // instead of a pointer to the string. union { char* string_ptr; char string_buffer[buffer_size]; }; const size_t size; }; Enforcement??? C.181: Avoid “naked” unionsReasonA naked union is a union without an associated indicator which member (if any) it holds,so that the programmer has to keep track.Naked unions are a source of type errors. Example, badunion Value { int x; double d; }; Value v; v.d = 987.654; // v holds a double So far, so good, but we can easily misuse the union: cout &lt;&lt; v.x &lt;&lt; &apos;\n&apos;; // BAD, undefined behavior: v holds a double, but we read it as an int Note that the type error happened without any explicit cast.When we tested that program the last value printed was 1683627180 which it the integer value for the bit pattern for 987.654.What we have here is an “invisible” type error that happens to give a result that could easily look innocent. And, talking about “invisible”, this code produced no output: v.x = 123; cout &lt;&lt; v.d &lt;&lt; &apos;\n&apos;; // BAD: undefined behavior AlternativeWrap a union in a class together with a type field. The soon-to-be-standard variant type (to be found in &lt;variant&gt;) does that for you: variant&lt;int, double&gt; v; v = 123; // v holds an int int x = get&lt;int&gt;(v); v = 123.456; // v holds a double w = get&lt;double&gt;(v); Enforcement??? C.182: Use anonymous unions to implement tagged unionsReasonA well-designed tagged union is type safe.An anonymous union simplifies the definition of a class with a (tag, union) pair. ExampleThis example is mostly borrowed from TC++PL4 pp216-218.You can look there for an explanation. The code is somewhat elaborate.Handling a type with user-defined assignment and destructor is tricky.Saving programmers from having to write such code is one reason for including variant in the standard. class Value { // two alternative representations represented as a union private: enum class Tag { number, text }; Tag type; // discriminant union { // representation (note: anonymous union) int i; string s; // string has default constructor, copy operations, and destructor }; public: struct Bad_entry { }; // used for exceptions ~Value(); Value&amp; operator=(const Value&amp;); // necessary because of the string variant Value(const Value&amp;); // ... int number() const; string text() const; void set_number(int n); void set_text(const string&amp;); // ... }; int Value::number() const { if (type != Tag::number) throw Bad_entry{}; return i; } string Value::text() const { if (type != Tag::text) throw Bad_entry{}; return s; } void Value::set_number(int n) { if (type == Tag::text) { s.~string(); // explicitly destroy string type = Tag::number; } i = n; } void Value::set_text(const string&amp; ss) { if (type == Tag::text) s = ss; else { new(&amp;s) string{ss}; // placement new: explicitly construct string type = Tag::text; } } Value&amp; Value::operator=(const Value&amp; e) // necessary because of the string variant { if (type == Tag::text &amp;&amp; e.type == Tag::text) { s = e.s; // usual string assignment return *this; } if (type == Tag::text) s.~string(); // explicit destroy switch (e.type) { case Tag::number: i = e.i; break; case Tag::text: new(&amp;s)(e.s); // placement new: explicit construct type = e.type; } return *this; } Value::~Value() { if (type == Tag::text) s.~string(); // explicit destroy } Enforcement??? C.183: Don’t use a union for type punningReasonIt is undefined behavior to read a union member with a different type from the one with which it was written.Such punning is invisible, or at least harder to spot than using a named cast.Type punning using a union is a source of errors. Example, badunion Pun { int x; unsigned char c[sizeof(int)]; }; The idea of Pun is to be able to look at the character representation of an int. void bad(Pun&amp; u) { u.x = &apos;x&apos;; cout &lt;&lt; u.c[0] &lt;&lt; &apos;\n&apos;; // undefined behavior } If you wanted to see the bytes of an int, use a (named) cast: void if_you_must_pun(int&amp; x) { auto p = reinterpret_cast&lt;unsigned char*&gt;(&amp;x); cout &lt;&lt; p[0] &lt;&lt; &apos;\n&apos;; // OK; better // ... } Accessing the result of an reinterpret_cast to a different type from the objects declared type is defined behavior (even though reinterpret_cast is discouraged),but at least we can see that something tricky is going on. NoteUnfortunately, unions are commonly used for type punning.We don’t consider “sometimes, it works as expected” a strong argument. C++17 introduced a distinct type std::byte to facilitate operations on raw object representation. Use that type instead of unsigned char or char for these operations. Enforcement??? Enum: EnumerationsEnumerations are used to define sets of integer values and for defining types for such sets of values.There are two kind of enumerations, “plain” enums and class enums. Enumeration rule summary: Enum.1: Prefer enumerations over macros Enum.2: Use enumerations to represent sets of related named constants Enum.3: Prefer enum classes over “plain” enums Enum.4: Define operations on enumerations for safe and simple use Enum.5: Don’t use ALL_CAPS for enumerators Enum.6: Avoid unnamed enumerations Enum.7: Specify the underlying type of an enumeration only when necessary Enum.8: Specify enumerator values only when necessary Enum.1: Prefer enumerations over macrosReasonMacros do not obey scope and type rules. Also, macro names are removed during preprocessing and so usually don’t appear in tools like debuggers. ExampleFirst some bad old code: // webcolors.h (third party header) #define RED 0xFF0000 #define GREEN 0x00FF00 #define BLUE 0x0000FF // productinfo.h // The following define product subtypes based on color #define RED 0 #define PURPLE 1 #define BLUE 2 int webby = BLUE; // webby == 2; probably not what was desired Instead use an enum: enum class Web_color { red = 0xFF0000, green = 0x00FF00, blue = 0x0000FF }; enum class Product_info { red = 0, purple = 1, blue = 2 }; int webby = blue; // error: be specific Web_color webby = Web_color::blue; We used an enum class to avoid name clashes. EnforcementFlag macros that define integer values. Enum.2: Use enumerations to represent sets of related named constantsReasonAn enumeration shows the enumerators to be related and can be a named type. Exampleenum class Web_color { red = 0xFF0000, green = 0x00FF00, blue = 0x0000FF }; NoteSwitching on an enumeration is common and the compiler can warn against unusual patterns of case labels. For example: enum class Product_info { red = 0, purple = 1, blue = 2 }; void print(Product_info inf) { switch (inf) { case Product_info::red: cout &lt;&lt; &quot;red&quot;; break; case Product_info::purple: cout &lt;&lt; &quot;purple&quot;; break; } } Such off-by-one switch`statements are often the results of an added enumerator and insufficient testing. Enforcement Flag switch-statements where the cases cover most but not all enumerators of an enumeration. Flag switch-statements where the cases cover a few enumerators of an enumeration, but has no default. Enum.3: Prefer class enums over “plain” enumsReasonTo minimize surprises: traditional enums convert to int too readily. Examplevoid Print_color(int color); enum Web_color { red = 0xFF0000, green = 0x00FF00, blue = 0x0000FF }; enum Product_info { Red = 0, Purple = 1, Blue = 2 }; Web_color webby = Web_color::blue; // Clearly at least one of these calls is buggy. Print_color(webby); Print_color(Product_info::Blue); Instead use an enum class: void Print_color(int color); enum class Web_color { red = 0xFF0000, green = 0x00FF00, blue = 0x0000FF }; enum class Product_info { red = 0, purple = 1, blue = 2 }; Web_color webby = Web_color::blue; Print_color(webby); // Error: cannot convert Web_color to int. Print_color(Product_info::Red); // Error: cannot convert Product_info to int. Enforcement(Simple) Warn on any non-class enum definition. Enum.4: Define operations on enumerations for safe and simple useReasonConvenience of use and avoidance of errors. Exampleenum Day { mon, tue, wed, thu, fri, sat, sun }; Day&amp; operator++(Day&amp; d) { return d = (d == Day::sun) ? Day::mon : static_cast&lt;Day&gt;(static_cast&lt;int&gt;(d)+1); } Day today = Day::sat; Day tomorrow = ++today; The use of a static_cast is not pretty, but Day&amp; operator++(Day&amp; d) { return d = (d == Day::sun) ? Day::mon : Day{++d}; // error } is an infinite recursion, and writing it without a cast, using a switch on all cases is long-winded. EnforcementFlag repeated expressions cast back into an enumeration. Enum.5: Don’t use ALL_CAPS for enumeratorsReasonAvoid clashes with macros. Example, bad // webcolors.h (third party header) #define RED 0xFF0000 #define GREEN 0x00FF00 #define BLUE 0x0000FF // productinfo.h // The following define product subtypes based on color enum class Product_info { RED, PURPLE, BLUE }; // syntax error EnforcementFlag ALL_CAPS enumerators. Enum.6: Avoid unnamed enumerationsReasonIf you can’t name an enumeration, the values are not related Example, badenum { red = 0xFF0000, scale = 4, is_signed = 1 }; Such code is not uncommon in code written before there were convenient alternative ways of specifying integer constants. AlternativeUse constexpr values instead. For example: constexpr int red = 0xFF0000; constexpr short scale = 4; constexpr bool is_signed = true; EnforcementFlag unnamed enumerations. Enum.7: Specify the underlying type of an enumeration only when necessaryReasonThe default is the easiest to read and write.int is the default integer type.int is compatible with C enums. Exampleenum class Direction : char { n, s, e, w, ne, nw, se, sw }; // underlying type saves space enum class Web_color : int32_t { red = 0xFF0000, green = 0x00FF00, blue = 0x0000FF }; // underlying type is redundant NoteSpecifying the underlying type is necessary in forward declarations of enumerations: enum Flags : char; void f(Flags); // .... enum flags : char { /* ... */ }; Enforcement???? Enum.8: Specify enumerator values only when necessaryReasonIt’s the simplest.It avoids duplicate enumerator values.The default gives a consecutive set of values that is good for switch-statement implementations. Exampleenum class Col1 { red, yellow, blue }; enum class Col2 { red = 1, yellow = 2, blue = 2 }; // typo enum class Month { jan = 1, feb, mar, apr, may, jun, jul, august, sep, oct, nov, dec }; // starting with 1 is conventional enum class Base_flag { dec = 1, oct = dec &lt;&lt; 1, hex = dec &lt;&lt; 2 }; // set of bits Specifying values is necessary to match conventional values (e.g., Month)and where consecutive values are undesirable (e.g., to get separate bits as in Base_flag). Enforcement Flag duplicate enumerator values Flag explicitly specified all-consecutive enumerator values R: Resource managementThis section contains rules related to resources.A resource is anything that must be acquired and (explicitly or implicitly) released, such as memory, file handles, sockets, and locks.The reason it must be released is typically that it can be in short supply, so even delayed release may do harm.The fundamental aim is to ensure that we don’t leak any resources and that we don’t hold a resource longer than we need to.An entity that is responsible for releasing a resource is called an owner. There are a few cases where leaks can be acceptable or even optimal:If you are writing a program that simply produces an output based on an input and the amount of memory needed is proportional to the size of the input, the optimal strategy (for performance and ease of programming) is sometimes simply never to delete anything.If you have enough memory to handle your largest input, leak away, but be sure to give a good error message if you are wrong.Here, we ignore such cases. Resource management rule summary: R.1: Manage resources automatically using resource handles and RAII (Resource Acquisition Is Initialization) R.2: In interfaces, use raw pointers to denote individual objects (only) R.3: A raw pointer (a T*) is non-owning R.4: A raw reference (a T&amp;) is non-owning R.5: Prefer scoped objects, don’t heap-allocate unnecessarily R.6: Avoid non-const global variables Allocation and deallocation rule summary: R.10: Avoid malloc() and free() R.11: Avoid calling new and delete explicitly R.12: Immediately give the result of an explicit resource allocation to a manager object R.13: Perform at most one explicit resource allocation in a single expression statement R.14: ??? array vs. pointer parameter R.15: Always overload matched allocation/deallocation pairs Smart pointer rule summary: R.20: Use unique_ptr or shared_ptr to represent ownership R.21: Prefer unique_ptr over shared_ptr unless you need to share ownership R.22: Use make_shared() to make shared_ptrs R.23: Use make_unique() to make unique_ptrs R.24: Use std::weak_ptr to break cycles of shared_ptrs R.30: Take smart pointers as parameters only to explicitly express lifetime semantics R.31: If you have non-std smart pointers, follow the basic pattern from std R.32: Take a unique_ptr&lt;widget&gt; parameter to express that a function assumes ownership of a widget R.33: Take a unique_ptr&lt;widget&gt;&amp; parameter to express that a function reseats the widget R.34: Take a shared_ptr&lt;widget&gt; parameter to express that a function is part owner R.35: Take a shared_ptr&lt;widget&gt;&amp; parameter to express that a function might reseat the shared pointer R.36: Take a const shared_ptr&lt;widget&gt;&amp; parameter to express that it might retain a reference count to the object ??? R.37: Do not pass a pointer or reference obtained from an aliased smart pointer R.1: Manage resources automatically using resource handles and RAII (Resource Acquisition Is Initialization)ReasonTo avoid leaks and the complexity of manual resource management.C++’s language-enforced constructor/destructor symmetry mirrors the symmetry inherent in resource acquire/release function pairs such as fopen/fclose, lock/unlock, and new/delete.Whenever you deal with a resource that needs paired acquire/release function calls, encapsulate that resource in an object that enforces pairing for you – acquire the resource in its constructor, and release it in its destructor. Example, badConsider: void send(X* x, cstring_span destination) { auto port = open_port(destination); my_mutex.lock(); // ... send(port, x); // ... my_mutex.unlock(); close_port(port); delete x; } In this code, you have to remember to unlock, close_port, and delete on all paths, and do each exactly once.Further, if any of the code marked ... throws an exception, then x is leaked and my_mutex remains locked. ExampleConsider: void send(unique_ptr&lt;X&gt; x, cstring_span destination) // x owns the X { Port port{destination}; // port owns the PortHandle lock_guard&lt;mutex&gt; guard{my_mutex}; // guard owns the lock // ... send(port, x); // ... } // automatically unlocks my_mutex and deletes the pointer in x Now all resource cleanup is automatic, performed once on all paths whether or not there is an exception. As a bonus, the function now advertises that it takes over ownership of the pointer. What is Port? A handy wrapper that encapsulates the resource: class Port { PortHandle port; public: Port(cstring_span destination) : port{open_port(destination)} { } ~Port() { close_port(port); } operator PortHandle() { return port; } // port handles can&apos;t usually be cloned, so disable copying and assignment if necessary Port(const Port&amp;) = delete; Port&amp; operator=(const Port&amp;) = delete; }; NoteWhere a resource is “ill-behaved” in that it isn’t represented as a class with a destructor, wrap it in a class or use finally See also: RAII R.2: In interfaces, use raw pointers to denote individual objects (only)ReasonArrays are best represented by a container type (e.g., vector (owning)) or a span (non-owning).Such containers and views hold sufficient information to do range checking. Example, badvoid f(int* p, int n) // n is the number of elements in p[] { // ... p[2] = 7; // bad: subscript raw pointer // ... } The compiler does not read comments, and without reading other code you do not know whether p really points to n elements.Use a span instead. Examplevoid g(int* p, int fmt) // print *p using format #fmt { // ... uses *p and p[0] only ... } ExceptionC-style strings are passed as single pointers to a zero-terminated sequence of characters.Use zstring rather than char* to indicate that you rely on that convention. NoteMany current uses of pointers to a single element could be references.However, where nullptr is a possible value, a reference may not be a reasonable alternative. Enforcement Flag pointer arithmetic (including ++) on a pointer that is not part of a container, view, or iterator.This rule would generate a huge number of false positives if applied to an older code base. Flag array names passed as simple pointers R.3: A raw pointer (a T*) is non-owningReasonThere is nothing (in the C++ standard or in most code) to say otherwise and most raw pointers are non-owning.We want owning pointers identified so that we can reliably and efficiently delete the objects pointed to by owning pointers. Examplevoid f() { int* p1 = new int{7}; // bad: raw owning pointer auto p2 = make_unique&lt;int&gt;(7); // OK: the int is owned by a unique pointer // ... } The unique_ptr protects against leaks by guaranteeing the deletion of its object (even in the presence of exceptions). The T* does not. Exampletemplate&lt;typename T&gt; class X { // ... public: T* p; // bad: it is unclear whether p is owning or not T* q; // bad: it is unclear whether q is owning or not }; We can fix that problem by making ownership explicit: template&lt;typename T&gt; class X2 { // ... public: owner&lt;T*&gt; p; // OK: p is owning T* q; // OK: q is not owning }; ExceptionA major class of exception is legacy code, especially code that must remain compilable as C or interface with C and C-style C++ through ABIs.The fact that there are billions of lines of code that violate this rule against owning T*s cannot be ignored.We’d love to see program transformation tools turning 20-year-old “legacy” code into shiny modern code,we encourage the development, deployment and use of such tools,we hope the guidelines will help the development of such tools,and we even contributed (and contribute) to the research and development in this area.However, it will take time: “legacy code” is generated faster than we can renovate old code, and so it will be for a few years. This code cannot all be rewritten (ever assuming good code transformation software), especially not soon.This problem cannot be solved (at scale) by transforming all owning pointers to unique_ptrs and shared_ptrs,partly because we need/use owning “raw pointers” as well as simple pointers in the implementation of our fundamental resource handles.For example, common vector implementations have one owning pointer and two non-owning pointers.Many ABIs (and essentially all interfaces to C code) use T*s, some of them owning.Some interfaces cannot be simply annotated with owner because they need to remain compilable as C(although this would be a rare good use for a macro, that expands to owner in C++ mode only). Noteowner&lt;T*&gt; has no default semantics beyond T*. It can be used without changing any code using it and without affecting ABIs.It is simply a indicator to programmers and analysis tools.For example, if an owner&lt;T*&gt; is a member of a class, that class better have a destructor that deletes it. Example, badReturning a (raw) pointer imposes a lifetime management uncertainty on the caller; that is, who deletes the pointed-to object? Gadget* make_gadget(int n) { auto p = new Gadget{n}; // ... return p; } void caller(int n) { auto p = make_gadget(n); // remember to delete p // ... delete p; } In addition to suffering from the problem from leak, this adds a spurious allocation and deallocation operation, and is needlessly verbose. If Gadget is cheap to move out of a function (i.e., is small or has an efficient move operation), just return it “by value” (see “out” return values): Gadget make_gadget(int n) { Gadget g{n}; // ... return g; } NoteThis rule applies to factory functions. NoteIf pointer semantics are required (e.g., because the return type needs to refer to a base class of a class hierarchy (an interface)), return a “smart pointer.” Enforcement (Simple) Warn on delete of a raw pointer that is not an owner&lt;T&gt;. (Moderate) Warn on failure to either reset or explicitly delete an owner&lt;T&gt; pointer on every code path. (Simple) Warn if the return value of new is assigned to a raw pointer. (Simple) Warn if a function returns an object that was allocated within the function but has a move constructor.Suggest considering returning it by value instead. R.4: A raw reference (a T&amp;) is non-owningReasonThere is nothing (in the C++ standard or in most code) to say otherwise and most raw references are non-owning.We want owners identified so that we can reliably and efficiently delete the objects pointed to by owning pointers. Examplevoid f() { int&amp; r = *new int{7}; // bad: raw owning reference // ... delete &amp;r; // bad: violated the rule against deleting raw pointers } See also: The raw pointer rule EnforcementSee the raw pointer rule R.5: Prefer scoped objects, don’t heap-allocate unnecessarilyReasonA scoped object is a local object, a global object, or a member.This implies that there is no separate allocation and deallocation cost in excess of that already used for the containing scope or object.The members of a scoped object are themselves scoped and the scoped object’s constructor and destructor manage the members’ lifetimes. ExampleThe following example is inefficient (because it has unnecessary allocation and deallocation), vulnerable to exception throws and returns in the ... part (leading to leaks), and verbose: void f(int n) { auto p = new Gadget{n}; // ... delete p; } Instead, use a local variable: void f(int n) { Gadget g{n}; // ... } Enforcement (Moderate) Warn if an object is allocated and then deallocated on all paths within a function. Suggest it should be a local auto stack object instead. (Simple) Warn if a local Unique_ptr or Shared_ptr is not moved, copied, reassigned or reset before its lifetime ends. R.6: Avoid non-const global variablesReasonGlobal variables can be accessed from everywhere so they can introduce surprising dependencies between apparently unrelated objects.They are a notable source of errors. Warning: The initialization of global objects is not totally ordered.If you use a global object initialize it with a constant.Note that it is possible to get undefined initialization order even for const objects. ExceptionA global object is often better than a singleton. ExceptionAn immutable (const) global does not introduce the problems we try to avoid by banning global objects. Enforcement(??? NM: Obviously we can warn about non-const statics … do we want to?) R.alloc: Allocation and deallocationR.10: Avoid malloc() and free()Reason malloc() and free() do not support construction and destruction, and do not mix well with new and delete. Exampleclass Record { int id; string name; // ... }; void use() { // p1 may be nullptr // *p1 is not initialized; in particular, // that string isn&apos;t a string, but a string-sized bag of bits Record* p1 = static_cast&lt;Record*&gt;(malloc(sizeof(Record))); auto p2 = new Record; // unless an exception is thrown, *p2 is default initialized auto p3 = new(nothrow) Record; // p3 may be nullptr; if not, *p3 is default initialized // ... delete p1; // error: cannot delete object allocated by malloc() free(p2); // error: cannot free() object allocated by new } In some implementations that delete and that free() might work, or maybe they will cause run-time errors. ExceptionThere are applications and sections of code where exceptions are not acceptable.Some of the best such examples are in life-critical hard-real-time code.Beware that many bans on exception use are based on superstition (bad)or by concerns for older code bases with unsystematic resource management (unfortunately, but sometimes necessary).In such cases, consider the nothrow versions of new. EnforcementFlag explicit use of malloc and free. R.11: Avoid calling new and delete explicitlyReasonThe pointer returned by new should belong to a resource handle (that can call delete).If the pointer returned by new is assigned to a plain/naked pointer, the object can be leaked. NoteIn a large program, a naked delete (that is a delete in application code, rather than part of code devoted to resource management)is a likely bug: if you have N deletes, how can you be certain that you don’t need N+1 or N-1?The bug may be latent: it may emerge only during maintenance.If you have a naked new, you probably need a naked delete somewhere, so you probably have a bug. Enforcement(Simple) Warn on any explicit use of new and delete. Suggest using make_unique instead. R.12: Immediately give the result of an explicit resource allocation to a manager objectReasonIf you don’t, an exception or a return may lead to a leak. Example, badvoid f(const string&amp; name) { FILE* f = fopen(name, &quot;r&quot;); // open the file vector&lt;char&gt; buf(1024); auto _ = finally([f] { fclose(f); }); // remember to close the file // ... } The allocation of buf may fail and leak the file handle. Examplevoid f(const string&amp; name) { ifstream f{name}; // open the file vector&lt;char&gt; buf(1024); // ... } The use of the file handle (in ifstream) is simple, efficient, and safe. Enforcement Flag explicit allocations used to initialize pointers (problem: how many direct resource allocations can we recognize?) R.13: Perform at most one explicit resource allocation in a single expression statementReasonIf you perform two explicit resource allocations in one statement, you could leak resources because the order of evaluation of many subexpressions, including function arguments, is unspecified. Examplevoid fun(shared_ptr&lt;Widget&gt; sp1, shared_ptr&lt;Widget&gt; sp2); This fun can be called like this: // BAD: potential leak fun(shared_ptr&lt;Widget&gt;(new Widget(a, b)), shared_ptr&lt;Widget&gt;(new Widget(c, d))); This is exception-unsafe because the compiler may reorder the two expressions building the function’s two arguments.In particular, the compiler can interleave execution of the two expressions:Memory allocation (by calling operator new) could be done first for both objects, followed by attempts to call the two Widget constructors.If one of the constructor calls throws an exception, then the other object’s memory will never be released! This subtle problem has a simple solution: Never perform more than one explicit resource allocation in a single expression statement.For example: shared_ptr&lt;Widget&gt; sp1(new Widget(a, b)); // Better, but messy fun(sp1, new Widget(c, d)); The best solution is to avoid explicit allocation entirely use factory functions that return owning objects: fun(make_shared&lt;Widget&gt;(a, b), make_shared&lt;Widget&gt;(c, d)); // Best Write your own factory wrapper if there is not one already. Enforcement Flag expressions with multiple explicit resource allocations (problem: how many direct resource allocations can we recognize?) R.14: ??? array vs. pointer parameterReasonAn array decays to a pointer, thereby losing its size, opening the opportunity for range errors. Example??? what do we recommend: f(int*[]) or f(int**) ??? Alternative: Use span to preserve size information. EnforcementFlag [] parameters. R.15: Always overload matched allocation/deallocation pairsReasonOtherwise you get mismatched operations and chaos. Exampleclass X { // ... void* operator new(size_t s); void operator delete(void*); // ... }; NoteIf you want memory that cannot be deallocated, =delete the deallocation operation.Don’t leave it undeclared. EnforcementFlag incomplete pairs. R.smart: Smart pointersR.20: Use unique_ptr or shared_ptr to represent ownershipReasonThey can prevent resource leaks. ExampleConsider: void f() { X x; X* p1 { new X }; // see also ??? unique_ptr&lt;T&gt; p2 { new X }; // unique ownership; see also ??? shared_ptr&lt;T&gt; p3 { new X }; // shared ownership; see also ??? auto p4 = make_unique&lt;X&gt;(); // unique_ownership, preferable to the explicit use &quot;new&quot; auto p5 = make_shared&lt;X&gt;(); // shared ownership, preferable to the explicit use &quot;new&quot; } This will leak the object used to initialize p1 (only). Enforcement(Simple) Warn if the return value of new or a function call with return value of pointer type is assigned to a raw pointer. R.21: Prefer unique_ptr over shared_ptr unless you need to share ownershipReasonA unique_ptr is conceptually simpler and more predictable (you know when destruction happens) and faster (you don’t implicitly maintain a use count). Example, badThis needlessly adds and maintains a reference count. void f() { shared_ptr&lt;Base&gt; base = make_shared&lt;Derived&gt;(); // use base locally, without copying it -- refcount never exceeds 1 } // destroy base ExampleThis is more efficient: void f() { unique_ptr&lt;Base&gt; base = make_unique&lt;Derived&gt;(); // use base locally } // destroy base Enforcement(Simple) Warn if a function uses a Shared_ptr with an object allocated within the function, but never returns the Shared_ptr or passes it to a function requiring a Shared_ptr&amp;. Suggest using unique_ptr instead. R.22: Use make_shared() to make shared_ptrsReasonIf you first make an object and then give it to a shared_ptr constructor, you (most likely) do one more allocation (and later deallocation) than if you use make_shared() because the reference counts must be allocated separately from the object. ExampleConsider: shared_ptr&lt;X&gt; p1 { new X{2} }; // bad auto p = make_shared&lt;X&gt;(2); // good The make_shared() version mentions X only once, so it is usually shorter (as well as faster) than the version with the explicit new. Enforcement(Simple) Warn if a shared_ptr is constructed from the result of new rather than make_shared. R.23: Use make_unique() to make unique_ptrsReasonFor convenience and consistency with shared_ptr. Notemake_unique() is C++14, but widely available (as well as simple to write). Enforcement(Simple) Warn if a unique_ptr is constructed from the result of new rather than make_unique. R.24: Use std::weak_ptr to break cycles of shared_ptrsReason shared_ptr‘s rely on use counting and the use count for a cyclic structure never goes to zero, so we need a mechanism tobe able to destroy a cyclic structure. Example#include &lt;memory&gt; class bar; class foo { public: explicit foo(const std::shared_ptr&lt;bar&gt;&amp; forward_reference) : forward_reference_(forward_reference) { } private: std::shared_ptr&lt;bar&gt; forward_reference_; }; class bar { public: explicit bar(const std::weak_ptr&lt;foo&gt;&amp; back_reference) : back_reference_(back_reference) { } void do_something() { if (auto shared_back_reference = back_reference_.lock()) { // Use *shared_back_reference } } private: std::weak_ptr&lt;foo&gt; back_reference_; }; Note ??? (HS: A lot of people say “to break cycles”, while I think “temporary shared ownership” is more to the point.)???(BS: breaking cycles is what you must do; temporarily sharing ownership is how you do it.You could “temporarily share ownership” simply by using another shared_ptr.) Enforcement??? probably impossible. If we could statically detect cycles, we wouldn’t need weak_ptr R.30: Take smart pointers as parameters only to explicitly express lifetime semanticsReasonAccepting a smart pointer to a widget is wrong if the function just needs the widget itself.It should be able to accept any widget object, not just ones whose lifetimes are managed by a particular kind of smart pointer.A function that does not manipulate lifetime should take raw pointers or references instead. Example, bad// callee void f(shared_ptr&lt;widget&gt;&amp; w) { // ... use(*w); // only use of w -- the lifetime is not used at all // ... }; // caller shared_ptr&lt;widget&gt; my_widget = /* ... */; f(my_widget); widget stack_widget; f(stack_widget); // error Example, good// callee void f(widget&amp; w) { // ... use(w); // ... }; // caller shared_ptr&lt;widget&gt; my_widget = /* ... */; f(*my_widget); widget stack_widget; f(stack_widget); // ok -- now this works Enforcement (Simple) Warn if a function takes a parameter of a smart pointer type (that overloads operator-&gt; or operator*) that is copyable but the function only calls any of: operator*, operator-&gt; or get().Suggest using a T* or T&amp; instead. Flag a parameter of a smart pointer type (a type that overloads operator-&gt; or operator*) that is copyable/movable but never copied/moved from in the function body, and that is never modified, and that is not passed along to another function that could do so. That means the ownership semantics are not used.Suggest using a T* or T&amp; instead. R.31: If you have non-std smart pointers, follow the basic pattern from stdReasonThe rules in the following section also work for other kinds of third-party and custom smart pointers and are very useful for diagnosing common smart pointer errors that cause performance and correctness problems.You want the rules to work on all the smart pointers you use. Any type (including primary template or specialization) that overloads unary * and -&gt; is considered a smart pointer: If it is copyable, it is recognized as a reference-counted shared_ptr. If it is not copyable, it is recognized as a unique unique_ptr. Example// use Boost&apos;s intrusive_ptr #include &lt;boost/intrusive_ptr.hpp&gt; void f(boost::intrusive_ptr&lt;widget&gt; p) // error under rule &apos;sharedptrparam&apos; { p-&gt;foo(); } // use Microsoft&apos;s CComPtr #include &lt;atlbase.h&gt; void f(CComPtr&lt;widget&gt; p) // error under rule &apos;sharedptrparam&apos; { p-&gt;foo(); } Both cases are an error under the sharedptrparam guideline:p is a Shared_ptr, but nothing about its sharedness is used here and passing it by value is a silent pessimization;these functions should accept a smart pointer only if they need to participate in the widget’s lifetime management. Otherwise they should accept a widget*, if it can be nullptr. Otherwise, and ideally, the function should accept a widget&amp;.These smart pointers match the Shared_ptr concept, so these guideline enforcement rules work on them out of the box and expose this common pessimization. R.32: Take a unique_ptr&lt;widget&gt; parameter to express that a function assumes ownership of a widgetReasonUsing unique_ptr in this way both documents and enforces the function call’s ownership transfer. Examplevoid sink(unique_ptr&lt;widget&gt;); // takes ownership of the widget void uses(widget*); // just uses the widget Example, badvoid thinko(const unique_ptr&lt;widget&gt;&amp;); // usually not what you want Enforcement (Simple) Warn if a function takes a Unique_ptr&lt;T&gt; parameter by lvalue reference and does not either assign to it or call reset() on it on at least one code path. Suggest taking a T* or T&amp; instead. (Simple) ((Foundation)) Warn if a function takes a Unique_ptr&lt;T&gt; parameter by reference to const. Suggest taking a const T* or const T&amp; instead. R.33: Take a unique_ptr&lt;widget&gt;&amp; parameter to express that a function reseats thewidgetReasonUsing unique_ptr in this way both documents and enforces the function call’s reseating semantics. Note“reseat” means “making a pointer or a smart pointer refer to a different object.” Examplevoid reseat(unique_ptr&lt;widget&gt;&amp;); // &quot;will&quot; or &quot;might&quot; reseat pointer Example, badvoid thinko(const unique_ptr&lt;widget&gt;&amp;); // usually not what you want Enforcement (Simple) Warn if a function takes a Unique_ptr&lt;T&gt; parameter by lvalue reference and does not either assign to it or call reset() on it on at least one code path. Suggest taking a T* or T&amp; instead. (Simple) ((Foundation)) Warn if a function takes a Unique_ptr&lt;T&gt; parameter by reference to const. Suggest taking a const T* or const T&amp; instead. R.34: Take a shared_ptr&lt;widget&gt; parameter to express that a function is part ownerReasonThis makes the function’s ownership sharing explicit. Example, goodvoid share(shared_ptr&lt;widget&gt;); // share -- &quot;will&quot; retain refcount void may_share(const shared_ptr&lt;widget&gt;&amp;); // &quot;might&quot; retain refcount void reseat(shared_ptr&lt;widget&gt;&amp;); // &quot;might&quot; reseat ptr Enforcement (Simple) Warn if a function takes a Shared_ptr&lt;T&gt; parameter by lvalue reference and does not either assign to it or call reset() on it on at least one code path. Suggest taking a T* or T&amp; instead. (Simple) ((Foundation)) Warn if a function takes a Shared_ptr&lt;T&gt; by value or by reference to const and does not copy or move it to another Shared_ptr on at least one code path. Suggest taking a T* or T&amp; instead. (Simple) ((Foundation)) Warn if a function takes a Shared_ptr&lt;T&gt; by rvalue reference. Suggesting taking it by value instead. R.35: Take a shared_ptr&lt;widget&gt;&amp; parameter to express that a function might reseat the shared pointerReasonThis makes the function’s reseating explicit. Note“reseat” means “making a reference or a smart pointer refer to a different object.” Example, goodvoid share(shared_ptr&lt;widget&gt;); // share -- &quot;will&quot; retain refcount void reseat(shared_ptr&lt;widget&gt;&amp;); // &quot;might&quot; reseat ptr void may_share(const shared_ptr&lt;widget&gt;&amp;); // &quot;might&quot; retain refcount Enforcement (Simple) Warn if a function takes a Shared_ptr&lt;T&gt; parameter by lvalue reference and does not either assign to it or call reset() on it on at least one code path. Suggest taking a T* or T&amp; instead. (Simple) ((Foundation)) Warn if a function takes a Shared_ptr&lt;T&gt; by value or by reference to const and does not copy or move it to another Shared_ptr on at least one code path. Suggest taking a T* or T&amp; instead. (Simple) ((Foundation)) Warn if a function takes a Shared_ptr&lt;T&gt; by rvalue reference. Suggesting taking it by value instead. R.36: Take a const shared_ptr&lt;widget&gt;&amp; parameter to express that it might retain a reference count to the object ???ReasonThis makes the function’s ??? explicit. Example, goodvoid share(shared_ptr&lt;widget&gt;); // share -- &quot;will&quot; retain refcount void reseat(shared_ptr&lt;widget&gt;&amp;); // &quot;might&quot; reseat ptr void may_share(const shared_ptr&lt;widget&gt;&amp;); // &quot;might&quot; retain refcount Enforcement (Simple) Warn if a function takes a Shared_ptr&lt;T&gt; parameter by lvalue reference and does not either assign to it or call reset() on it on at least one code path. Suggest taking a T* or T&amp; instead. (Simple) ((Foundation)) Warn if a function takes a Shared_ptr&lt;T&gt; by value or by reference to const and does not copy or move it to another Shared_ptr on at least one code path. Suggest taking a T* or T&amp; instead. (Simple) ((Foundation)) Warn if a function takes a Shared_ptr&lt;T&gt; by rvalue reference. Suggesting taking it by value instead. R.37: Do not pass a pointer or reference obtained from an aliased smart pointerReasonViolating this rule is the number one cause of losing reference counts and finding yourself with a dangling pointer.Functions should prefer to pass raw pointers and references down call chains.At the top of the call tree where you obtain the raw pointer or reference from a smart pointer that keeps the object alive.You need to be sure that the smart pointer cannot inadvertently be reset or reassigned from within the call tree below. NoteTo do this, sometimes you need to take a local copy of a smart pointer, which firmly keeps the object alive for the duration of the function and the call tree. ExampleConsider this code: // global (static or heap), or aliased local ... shared_ptr&lt;widget&gt; g_p = ...; void f(widget&amp; w) { g(); use(w); // A } void g() { g_p = ...; // oops, if this was the last shared_ptr to that widget, destroys the widget } The following should not pass code review: void my_code() { // BAD: passing pointer or reference obtained from a nonlocal smart pointer // that could be inadvertently reset somewhere inside f or it callees f(*g_p); // BAD: same reason, just passing it as a &quot;this&quot; pointer g_p-&gt;func(); } The fix is simple – take a local copy of the pointer to “keep a ref count” for your call tree: void my_code() { // cheap: 1 increment covers this entire function and all the call trees below us auto pin = g_p; // GOOD: passing pointer or reference obtained from a local unaliased smart pointer f(*pin); // GOOD: same reason pin-&gt;func(); } Enforcement (Simple) Warn if a pointer or reference obtained from a smart pointer variable (Unique_ptr or Shared_ptr) that is nonlocal, or that is local but potentially aliased, is used in a function call. If the smart pointer is a Shared_ptr then suggest taking a local copy of the smart pointer and obtain a pointer or reference from that instead. ES: Expressions and statementsExpressions and statements are the lowest and most direct way of expressing actions and computation. Declarations in local scopes are statements. For naming, commenting, and indentation rules, see NL: Naming and layout. General rules: ES.1: Prefer the standard library to other libraries and to “handcrafted code” ES.2: Prefer suitable abstractions to direct use of language features Declaration rules: ES.5: Keep scopes small ES.6: Declare names in for-statement initializers and conditions to limit scope ES.7: Keep common and local names short, and keep uncommon and nonlocal names longer ES.8: Avoid similar-looking names ES.9: Avoid ALL_CAPS names ES.10: Declare one name (only) per declaration ES.11: Use auto to avoid redundant repetition of type names ES.12: Do not reuse names in nested scopes ES.20: Always initialize an object ES.21: Don’t introduce a variable (or constant) before you need to use it ES.22: Don’t declare a variable until you have a value to initialize it with ES.23: Prefer the {}-initializer syntax ES.24: Use a unique_ptr&lt;T&gt; to hold pointers ES.25: Declare an object const or constexpr unless you want to modify its value later on ES.26: Don’t use a variable for two unrelated purposes ES.27: Use std::array or stack_array for arrays on the stack ES.28: Use lambdas for complex initialization, especially of const variables ES.30: Don’t use macros for program text manipulation ES.31: Don’t use macros for constants or “functions” ES.32: Use ALL_CAPS for all macro names ES.33: If you must use macros, give them unique names ES.34: Don’t define a (C-style) variadic function Expression rules: ES.40: Avoid complicated expressions ES.41: If in doubt about operator precedence, parenthesize ES.42: Keep use of pointers simple and straightforward ES.43: Avoid expressions with undefined order of evaluation ES.44: Don’t depend on order of evaluation of function arguments ES.45: Avoid “magic constants”; use symbolic constants ES.46: Avoid narrowing conversions ES.47: Use nullptr rather than 0 or NULL ES.48: Avoid casts ES.49: If you must use a cast, use a named cast ES.50: Don’t cast away const ES.55: Avoid the need for range checking ES.56: Write std::move() only when you need to explicitly move an object to another scope ES.60: Avoid new and delete outside resource management functions ES.61: Delete arrays using delete[] and non-arrays using delete ES.62: Don’t compare pointers into different arrays ES.63: Don’t slice ES.64: Use the T{e}notation for construction ES.65: Don’t dereference an invalid pointer Statement rules: ES.70: Prefer a switch-statement to an if-statement when there is a choice ES.71: Prefer a range-for-statement to a for-statement when there is a choice ES.72: Prefer a for-statement to a while-statement when there is an obvious loop variable ES.73: Prefer a while-statement to a for-statement when there is no obvious loop variable ES.74: Prefer to declare a loop variable in the initializer part of a for-statement ES.75: Avoid do-statements ES.76: Avoid goto ES.77: Minimize the use of break and continue in loops ES.78: Always end a non-empty case with a break ES.79: Use default to handle common cases (only) ES.84: Don’t (try to) declare a local variable with no name ES.85: Make empty statements visible ES.86: Avoid modifying loop control variables inside the body of raw for-loops ES.87: Don’t add redundant == or != to conditions Arithmetic rules: ES.100: Don’t mix signed and unsigned arithmetic ES.101: Use unsigned types for bit manipulation ES.102: Use signed types for arithmetic ES.103: Don’t overflow ES.104: Don’t underflow ES.105: Don’t divide by zero ES.106: Don’t try to avoid negative values by using unsigned ES.107: Don’t use unsigned for subscripts, prefer gsl::index ES.1: Prefer the standard library to other libraries and to “handcrafted code”ReasonCode using a library can be much easier to write than code working directly with language features, much shorter, tend to be of a higher level of abstraction, and the library code is presumably already tested.The ISO C++ Standard Library is among the most widely known and best tested libraries.It is available as part of all C++ Implementations. Exampleauto sum = accumulate(begin(a), end(a), 0.0); // good a range version of accumulate would be even better: auto sum = accumulate(v, 0.0); // better but don’t hand-code a well-known algorithm: int max = v.size(); // bad: verbose, purpose unstated double sum = 0.0; for (int i = 0; i &lt; max; ++i) sum = sum + v[i]; ExceptionLarge parts of the standard library rely on dynamic allocation (free store). These parts, notably the containers but not the algorithms, are unsuitable for some hard-real-time and embedded applications. In such cases, consider providing/using similar facilities, e.g., a standard-library-style container implemented using a pool allocator. EnforcementNot easy. ??? Look for messy loops, nested loops, long functions, absence of function calls, lack of use of non-built-in types. Cyclomatic complexity? ES.2: Prefer suitable abstractions to direct use of language featuresReasonA “suitable abstraction” (e.g., library or class) is closer to the application concepts than the bare language, leads to shorter and clearer code, and is likely to be better tested. Examplevector&lt;string&gt; read1(istream&amp; is) // good { vector&lt;string&gt; res; for (string s; is &gt;&gt; s;) res.push_back(s); return res; } The more traditional and lower-level near-equivalent is longer, messier, harder to get right, and most likely slower: char** read2(istream&amp; is, int maxelem, int maxstring, int* nread) // bad: verbose and incomplete { auto res = new char*[maxelem]; int elemcount = 0; while (is &amp;&amp; elemcount &lt; maxelem) { auto s = new char[maxstring]; is.read(s, maxstring); res[elemcount++] = s; } nread = &amp;elemcount; return res; } Once the checking for overflow and error handling has been added that code gets quite messy, and there is the problem remembering to delete the returned pointer and the C-style strings that array contains. EnforcementNot easy. ??? Look for messy loops, nested loops, long functions, absence of function calls, lack of use of non-built-in types. Cyclomatic complexity? ES.dcl: DeclarationsA declaration is a statement. A declaration introduces a name into a scope and may cause the construction of a named object. ES.5: Keep scopes smallReasonReadability. Minimize resource retention. Avoid accidental misuse of value. Alternative formulation: Don’t declare a name in an unnecessarily large scope. Examplevoid use() { int i; // bad: i is needlessly accessible after loop for (i = 0; i &lt; 20; ++i) { /* ... */ } // no intended use of i here for (int i = 0; i &lt; 20; ++i) { /* ... */ } // good: i is local to for-loop if (auto pc = dynamic_cast&lt;Circle*&gt;(ps)) { // good: pc is local to if-statement // ... deal with Circle ... } else { // ... handle error ... } } Example, badvoid use(const string&amp; name) { string fn = name + &quot;.txt&quot;; ifstream is {fn}; Record r; is &gt;&gt; r; // ... 200 lines of code without intended use of fn or is ... } This function is by most measure too long anyway, but the point is that the resources used by fn and the file handle held by isare retained for much longer than needed and that unanticipated use of is and fn could happen later in the function.In this case, it might be a good idea to factor out the read: Record load_record(const string&amp; name) { string fn = name + &quot;.txt&quot;; ifstream is {fn}; Record r; is &gt;&gt; r; return r; } void use(const string&amp; name) { Record r = load_record(name); // ... 200 lines of code ... } Enforcement Flag loop variable declared outside a loop and not used after the loop Flag when expensive resources, such as file handles and locks are not used for N-lines (for some suitable N) ES.6: Declare names in for-statement initializers and conditions to limit scopeReasonReadability. Minimize resource retention. Examplevoid use() { for (string s; cin &gt;&gt; s;) v.push_back(s); for (int i = 0; i &lt; 20; ++i) { // good: i is local to for-loop // ... } if (auto pc = dynamic_cast&lt;Circle*&gt;(ps)) { // good: pc is local to if-statement // ... deal with Circle ... } else { // ... handle error ... } } Enforcement Flag loop variables declared before the loop and not used after the loop (hard) Flag loop variables declared before the loop and used after the loop for an unrelated purpose. C++17 exampleNote: C++17 also adds if and switch initializer statements. These require C++17 support. map&lt;int, string&gt; mymap; if (auto result = mymap.insert(value); result.second) { // insert succeeded, and result is valid for this block use(result.first); // ok // ... } // result is destroyed here C++17 enforcement (if using a C++17 compiler) Flag selection/loop variables declared before the body and not used after the body (hard) Flag selection/loop variables declared before the body and used after the body for an unrelated purpose. ES.7: Keep common and local names short, and keep uncommon and nonlocal names longerReasonReadability. Lowering the chance of clashes between unrelated non-local names. ExampleConventional short, local names increase readability: template&lt;typename T&gt; // good void print(ostream&amp; os, const vector&lt;T&gt;&amp; v) { for (gsl::index i = 0; i &lt; v.size(); ++i) os &lt;&lt; v[i] &lt;&lt; &apos;\n&apos;; } An index is conventionally called i and there is no hint about the meaning of the vector in this generic function, so v is as good name as any. Compare template&lt;typename Element_type&gt; // bad: verbose, hard to read void print(ostream&amp; target_stream, const vector&lt;Element_type&gt;&amp; current_vector) { for (gsl::index current_element_index = 0; current_element_index &lt; current_vector.size(); ++current_element_index ) target_stream &lt;&lt; current_vector[current_element_index] &lt;&lt; &apos;\n&apos;; } Yes, it is a caricature, but we have seen worse. ExampleUnconventional and short non-local names obscure code: void use1(const string&amp; s) { // ... tt(s); // bad: what is tt()? // ... } Better, give non-local entities readable names: void use1(const string&amp; s) { // ... trim_tail(s); // better // ... } Here, there is a chance that the reader knows what trim_tail means and that the reader can remember it after looking it up. Example, badArgument names of large functions are de facto non-local and should be meaningful: void complicated_algorithm(vector&lt;Record&gt;&amp; vr, const vector&lt;int&gt;&amp; vi, map&lt;string, int&gt;&amp; out) // read from events in vr (marking used Records) for the indices in // vi placing (name, index) pairs into out { // ... 500 lines of code using vr, vi, and out ... } We recommend keeping functions short, but that rule isn’t universally adhered to and naming should reflect that. EnforcementCheck length of local and non-local names. Also take function length into account. ES.8: Avoid similar-looking namesReasonCode clarity and readability. Too-similar names slow down comprehension and increase the likelihood of error. Example; badif (readable(i1 + l1 + ol + o1 + o0 + ol + o1 + I0 + l0)) surprise(); Example; badDo not declare a non-type with the same name as a type in the same scope. This removes the need to disambiguate with a keyword such as struct or enum. It also removes a source of errors, as struct X can implicitly declare X if lookup fails. struct foo { int n; }; struct foo foo(); // BAD, foo is a type already in scope struct foo x = foo(); // requires disambiguation ExceptionAntique header files might declare non-types and types with the same name in the same scope. Enforcement Check names against a list of known confusing letter and digit combinations. Flag a declaration of a variable, function, or enumerator that hides a class or enumeration declared in the same scope. ES.9: Avoid ALL_CAPS namesReasonSuch names are commonly used for macros. Thus, ALL_CAPS name are vulnerable to unintended macro substitution. Example// somewhere in some header: #define NE != // somewhere else in some other header: enum Coord { N, NE, NW, S, SE, SW, E, W }; // somewhere third in some poor programmer&apos;s .cpp: switch (direction) { case N: // ... case NE: // ... // ... } NoteDo not use ALL_CAPS for constants just because constants used to be macros. EnforcementFlag all uses of ALL CAPS. For older code, accept ALL CAPS for macro names and flag all non-ALL-CAPS macro names. ES.10: Declare one name (only) per declarationReasonOne-declaration-per line increases readability and avoids mistakes related tothe C/C++ grammar. It also leaves room for a more descriptive end-of-linecomment. Example, badchar *p, c, a[7], *pp[7], **aa[10]; // yuck! ExceptionA function declaration can contain several function argument declarations. ExceptionA structured binding (C++17) is specifically designed to introduce several variables: auto [iter, inserted] = m.insert_or_assign(k, val); if (inserted) { /* new entry was inserted */ } Exampletemplate &lt;class InputIterator, class Predicate&gt; bool any_of(InputIterator first, InputIterator last, Predicate pred); or better using concepts: bool any_of(InputIterator first, InputIterator last, Predicate pred); Exampledouble scalbn(double x, int n); // OK: x * pow(FLT_RADIX, n); FLT_RADIX is usually 2 or: double scalbn( // better: x * pow(FLT_RADIX, n); FLT_RADIX is usually 2 double x, // base value int n // exponent ); or: // better: base * pow(FLT_RADIX, exponent); FLT_RADIX is usually 2 double scalbn(double base, int exponent); Exampleint a = 7, b = 9, c, d = 10, e = 3; In a long list of declarators is is easy to overlook an uninitialized variable. EnforcementFlag variable and constant declarations with multiple declarators (e.g., int* p, q;) ES.11: Use auto to avoid redundant repetition of type namesReason Simple repetition is tedious and error-prone. When you use auto, the name of the declared entity is in a fixed position in the declaration, increasing readability. In a template function declaration the return type can be a member type. ExampleConsider: auto p = v.begin(); // vector&lt;int&gt;::iterator auto h = t.future(); auto q = make_unique&lt;int[]&gt;(s); auto f = [](int x){ return x + 10; }; In each case, we save writing a longish, hard-to-remember type that the compiler already knows but a programmer could get wrong. Exampletemplate&lt;class T&gt; auto Container&lt;T&gt;::first() -&gt; Iterator; // Container&lt;T&gt;::Iterator ExceptionAvoid auto for initializer lists and in cases where you know exactly which type you want and where an initializer might require conversion. Exampleauto lst = { 1, 2, 3 }; // lst is an initializer list auto x{1}; // x is an int (after correction of the C++14 standard; initializer_list in C++11) NoteWhen concepts become available, we can (and should) be more specific about the type we are deducing: // ... ForwardIterator p = algo(x, y, z); Example (C++17)auto [ quotient, remainder ] = div(123456, 73); // break out the members of the div_t result EnforcementFlag redundant repetition of type names in a declaration. ES.12: Do not reuse names in nested scopesReasonIt is easy to get confused about which variable is used.Can cause maintenance problems. Example, badint d = 0; // ... if (cond) { // ... d = 9; // ... } else { // ... int d = 7; // ... d = value_to_be_returned; // ... } return d; If this is a large if-statement, it is easy to overlook that a new d has been introduced in the inner scope.This is a known source of bugs.Sometimes such reuse of a name in an inner scope is called “shadowing”. NoteShadowing is primarily a problem when functions are too large and too complex. ExampleShadowing of function arguments in the outermost block is disallowed by the language: void f(int x) { int x = 4; // error: reuse of function argument name if (x) { int x = 7; // allowed, but bad // ... } } Example, badReuse of a member name as a local variable can also be a problem: struct S { int m; void f(int x); }; void S::f(int x) { m = 7; // assign to member if (x) { int m = 9; // ... m = 99; // assign to member // ... } } ExceptionWe often reuse function names from a base class in a derived class: struct B { void f(int); }; struct D : B { void f(double); using B::f; }; This is error-prone.For example, had we forgotten the using declaration, a call d.f(1) would not have found the int version of f. ??? Do we need a specific rule about shadowing/hiding in class hierarchies? Enforcement Flag reuse of a name in nested local scopes Flag reuse of a member name as a local variable in a member function Flag reuse of a global name as a local variable or a member name Flag reuse of a base class member name in a derived class (except for function names) ES.20: Always initialize an objectReasonAvoid used-before-set errors and their associated undefined behavior.Avoid problems with comprehension of complex initialization.Simplify refactoring. Examplevoid use(int arg) { int i; // bad: uninitialized variable // ... i = 7; // initialize i } No, i = 7 does not initialize i; it assigns to it. Also, i can be read in the ... part. Better: void use(int arg) // OK { int i = 7; // OK: initialized string s; // OK: default initialized // ... } NoteThe always initialize rule is deliberately stronger than the an object must be set before used language rule.The latter, more relaxed rule, catches the technical bugs, but: It leads to less readable code It encourages people to declare names in greater than necessary scopes It leads to harder to read code It leads to logic bugs by encouraging complex code It hampers refactoring The always initialize rule is a style rule aimed to improve maintainability as well as a rule protecting against used-before-set errors. ExampleHere is an example that is often considered to demonstrate the need for a more relaxed rule for initialization widget i; // &quot;widget&quot; a type that&apos;s expensive to initialize, possibly a large POD widget j; if (cond) { // bad: i and j are initialized &quot;late&quot; i = f1(); j = f2(); } else { i = f3(); j = f4(); } This cannot trivially be rewritten to initialize i and j with initializers.Note that for types with a default constructor, attempting to postpone initialization simply leads to a default initialization followed by an assignment.A popular reason for such examples is “efficiency”, but a compiler that can detect whether we made a used-before-set error can also eliminate any redundant double initialization. Assuming that there is a logical connection between i and j, that connection should probably be expressed in code: pair&lt;widget, widget&gt; make_related_widgets(bool x) { return (x) ? {f1(), f2()} : {f3(), f4() }; } auto [i, j] = make_related_widgets(cond); // C++17 NoteComplex initialization has been popular with clever programmers for decades.It has also been a major source of errors and complexity.Many such errors are introduced during maintenance years after the initial implementation. ExampleThis rule covers member variables. class X { public: X(int i, int ci) : m2{i}, cm2{ci} {} // ... private: int m1 = 7; int m2; int m3; const int cm1 = 7; const int cm2; const int cm3; }; The compiler will flag the uninitialized cm3 because it is a const, but it will not catch the lack of initialization of m3.Usually, a rare spurious member initialization is worth the absence of errors from lack of initialization and often an optimizercan eliminate a redundant initialization (e.g., an initialization that occurs immediately before an assignment). ExceptionIf you are declaring an object that is just about to be initialized from input, initializing it would cause a double initialization.However, beware that this may leave uninitialized data beyond the input – and that has been a fertile source of errors and security breaches: constexpr int max = 8 * 1024; int buf[max]; // OK, but suspicious: uninitialized f.read(buf, max); The cost of initializing that array could be significant in some situations.However, such examples do tend to leave uninitialized variables accessible, so they should be treated with suspicion. constexpr int max = 8 * 1024; int buf[max] = {}; // zero all elements; better in some situations f.read(buf, max); When feasible use a library function that is known not to overflow. For example: string s; // s is default initialized to &quot;&quot; cin &gt;&gt; s; // s expands to hold the string Don’t consider simple variables that are targets for input operations exceptions to this rule: int i; // bad // ... cin &gt;&gt; i; In the not uncommon case where the input target and the input operation get separated (as they should not) the possibility of used-before-set opens up. int i2 = 0; // better // ... cin &gt;&gt; i2; A good optimizer should know about input operations and eliminate the redundant operation. ExampleUsing an uninitialized or sentinel value is a symptom of a problem and not asolution: widget i = uninit; // bad widget j = uninit; // ... use(i); // possibly used before set // ... if (cond) { // bad: i and j are initialized &quot;late&quot; i = f1(); j = f2(); } else { i = f3(); j = f4(); } Now the compiler cannot even simply detect a used-before-set. Further, we’ve introduced complexity in the state space for widget: which operations are valid on an uninit widget and which are not? NoteSometimes, a lambda can be used as an initializer to avoid an uninitialized variable: error_code ec; Value v = [&amp;] { auto p = get_value(); // get_value() returns a pair&lt;error_code, Value&gt; ec = p.first; return p.second; }(); or maybe: Value v = [] { auto p = get_value(); // get_value() returns a pair&lt;error_code, Value&gt; if (p.first) throw Bad_value{p.first}; return p.second; }(); See also: ES.28 Enforcement Flag every uninitialized variable.Don’t flag variables of user-defined types with default constructors. Check that an uninitialized buffer is written into immediately after declaration.Passing an uninitialized variable as a reference to non-const argument can be assumed to be a write into the variable. ES.21: Don’t introduce a variable (or constant) before you need to use itReasonReadability. To limit the scope in which the variable can be used. Exampleint x = 7; // ... no use of x here ... ++x; EnforcementFlag declarations that are distant from their first use. ES.22: Don’t declare a variable until you have a value to initialize it withReasonReadability. Limit the scope in which a variable can be used. Don’t risk used-before-set. Initialization is often more efficient than assignment. Example, badstring s; // ... no use of s here ... s = &quot;what a waste&quot;; Example, badSomeLargeType var; // ugly CaMeLcAsEvArIaBlE if (cond) // some non-trivial condition Set(&amp;var); else if (cond2 || !cond3) { var = Set2(3.14); } else { var = 0; for (auto&amp; e : something) var += e; } // use var; that this isn&apos;t done too early can be enforced statically with only control flow This would be fine if there was a default initialization for SomeLargeType that wasn’t too expensive.Otherwise, a programmer might very well wonder if every possible path through the maze of conditions has been covered.If not, we have a “use before set” bug. This is a maintenance trap. For initializers of moderate complexity, including for const variables, consider using a lambda to express the initializer; see ES.28. Enforcement Flag declarations with default initialization that are assigned to before they are first read. Flag any complicated computation after an uninitialized variable and before its use. ES.23: Prefer the {} initializer syntaxReasonThe rules for {} initialization are simpler, more general, less ambiguous, and safer than for other forms of initialization. Exampleint x {f(99)}; vector&lt;int&gt; v = {1, 2, 3, 4, 5, 6}; ExceptionFor containers, there is a tradition for using {...} for a list of elements and (...) for sizes: vector&lt;int&gt; v1(10); // vector of 10 elements with the default value 0 vector&lt;int&gt; v2 {10}; // vector of 1 element with the value 10 Note{}-initializers do not allow narrowing conversions. Exampleint x {7.9}; // error: narrowing int y = 7.9; // OK: y becomes 7. Hope for a compiler warning Note{} initialization can be used for all initialization; other forms of initialization can’t: auto p = new vector&lt;int&gt; {1, 2, 3, 4, 5}; // initialized vector D::D(int a, int b) :m{a, b} { // member initializer (e.g., m might be a pair) // ... }; X var {}; // initialize var to be empty struct S { int m {7}; // default initializer for a member // ... }; NoteInitialization of a variable declared using auto with a single value, e.g., {v}, had surprising results until C++17.The C++17 rules are somewhat less surprising: auto x1 {7}; // x1 is an int with the value 7 auto x2 = {7}; // x2 is an initializer_list&lt;int&gt; with an element 7 auto x11 {7, 8}; // error: two initializers auto x22 = {7, 8}; // x2 is an initializer_list&lt;int&gt; with elements 7 and 8 So use ={...} if you really want an initializer_list&lt;T&gt; auto fib10 = {1, 1, 2, 3, 5, 8, 13, 21, 34, 55}; // fib10 is a list NoteOld habits die hard, so this rule is hard to apply consistently, especially as there are so many cases where = is innocent. Exampletemplate&lt;typename T&gt; void f() { T x1(1); // T initialized with 1 T x0(); // bad: function declaration (often a mistake) T y1 {1}; // T initialized with 1 T y0 {}; // default initialized T // ... } See also: Discussion EnforcementTricky. Don’t flag uses of = for simple initializers. Look for = after auto has been seen. ES.24: Use a unique_ptr&lt;T&gt; to hold pointersReasonUsing std::unique_ptr is the simplest way to avoid leaks. It is reliable, itmakes the type system do much of the work to validate ownership safety, itincreases readability, and it has zero or near zero run-time cost. Examplevoid use(bool leak) { auto p1 = make_unique&lt;int&gt;(7); // OK int* p2 = new int{7}; // bad: might leak // ... no assignment to p2 ... if (leak) return; // ... no assignment to p2 ... vector&lt;int&gt; v(7); v.at(7) = 0; // exception thrown // ... } If leak == true the object pointed to by p2 is leaked and the object pointed to by p1 is not.The same is the case when at() throws. EnforcementLook for raw pointers that are targets of new, malloc(), or functions that may return such pointers. ES.25: Declare an object const or constexpr unless you want to modify its value later onReasonThat way you can’t change the value by mistake. That way may offer the compiler optimization opportunities. Examplevoid f(int n) { const int bufmax = 2 * n + 2; // good: we can&apos;t change bufmax by accident int xmax = n; // suspicious: is xmax intended to change? // ... } EnforcementLook to see if a variable is actually mutated, and flag it ifnot. Unfortunately, it may be impossible to detect when a non-const was notintended to vary (vs when it merely did not vary). ES.26: Don’t use a variable for two unrelated purposesReasonReadability and safety. Example, badvoid use() { int i; for (i = 0; i &lt; 20; ++i) { /* ... */ } for (i = 0; i &lt; 200; ++i) { /* ... */ } // bad: i recycled } NoteAs an optimization, you may want to reuse a buffer as a scratch pad, but even then prefer to limit the variable’s scope as much as possible and be careful not to cause bugs from data left in a recycled buffer as this is a common source of security bugs. void write_to_file() { std::string buffer; // to avoid reallocations on every loop iteration for (auto&amp; o : objects) { // First part of the work. generate_first_String(buffer, o); write_to_file(buffer); // Second part of the work. generate_second_string(buffer, o); write_to_file(buffer); // etc... } } EnforcementFlag recycled variables. ES.27: Use std::array or stack_array for arrays on the stackReasonThey are readable and don’t implicitly convert to pointers.They are not confused with non-standard extensions of built-in arrays. Example, badconst int n = 7; int m = 9; void f() { int a1[n]; int a2[m]; // error: not ISO C++ // ... } NoteThe definition of a1 is legal C++ and has always been.There is a lot of such code.It is error-prone, though, especially when the bound is non-local.Also, it is a “popular” source of errors (buffer overflow, pointers from array decay, etc.).The definition of a2 is C but not C++ and is considered a security risk Exampleconst int n = 7; int m = 9; void f() { array&lt;int, n&gt; a1; stack_array&lt;int&gt; a2(m); // ... } Enforcement Flag arrays with non-constant bounds (C-style VLAs) Flag arrays with non-local constant bounds ES.28: Use lambdas for complex initialization, especially of const variablesReasonIt nicely encapsulates local initialization, including cleaning up scratch variables needed only for the initialization, without needing to create a needless nonlocal yet nonreusable function. It also works for variables that should be const but only after some initialization work. Example, badwidget x; // should be const, but: for (auto i = 2; i &lt;= N; ++i) { // this could be some x += some_obj.do_something_with(i); // arbitrarily long code } // needed to initialize x // from here, x should be const, but we can&apos;t say so in code in this style Example, goodconst widget x = [&amp;]{ widget val; // assume that widget has a default constructor for (auto i = 2; i &lt;= N; ++i) { // this could be some val += some_obj.do_something_with(i); // arbitrarily long code } // needed to initialize x return val; }(); Examplestring var = [&amp;]{ if (!in) return &quot;&quot;; // default string s; for (char c : in &gt;&gt; c) s += toupper(c); return s; }(); // note () If at all possible, reduce the conditions to a simple set of alternatives (e.g., an enum) and don’t mix up selection and initialization. EnforcementHard. At best a heuristic. Look for an uninitialized variable followed by a loop assigning to it. ES.30: Don’t use macros for program text manipulationReasonMacros are a major source of bugs.Macros don’t obey the usual scope and type rules.Macros ensure that the human reader sees something different from what the compiler sees.Macros complicate tool building. Example, bad#define Case break; case /* BAD */ This innocuous-looking macro makes a single lower case c instead of a C into a bad flow-control bug. NoteThis rule does not ban the use of macros for “configuration control” use in #ifdefs, etc. EnforcementScream when you see a macro that isn’t just used for source control (e.g., #ifdef) ES.31: Don’t use macros for constants or “functions”ReasonMacros are a major source of bugs.Macros don’t obey the usual scope and type rules.Macros don’t obey the usual rules for argument passing.Macros ensure that the human reader sees something different from what the compiler sees.Macros complicate tool building. Example, bad#define PI 3.14 #define SQUARE(a, b) (a * b) Even if we hadn’t left a well-known bug in SQUARE there are much better behaved alternatives; for example: constexpr double pi = 3.14; template&lt;typename T&gt; T square(T a, T b) { return a * b; } EnforcementScream when you see a macro that isn’t just used for source control (e.g., #ifdef) ES.32: Use ALL_CAPS for all macro namesReasonConvention. Readability. Distinguishing macros. Example#define forever for (;;) /* very BAD */ #define FOREVER for (;;) /* Still evil, but at least visible to humans */ EnforcementScream when you see a lower case macro. ES.33: If you must use macros, give them unique namesReasonMacros do not obey scope rules. Example#define MYCHAR /* BAD, will eventually clash with someone else&apos;s MYCHAR*/ #define ZCORP_CHAR /* Still evil, but less likely to clash */ NoteAvoid macros if you can: ES.30, ES.31, and ES.32.However, there are billions of lines of code littered with macros and a long tradition for using and overusing macros.If you are forced to use macros, use long names and supposedly unique prefixes (e.g., your organization’s name) to lower the likelihood of a clash. EnforcementWarn against short macro names. ES.34: Don’t define a (C-style) variadic functionReasonNot type safe.Requires messy cast-and-macro-laden code to get working right. Example#include &lt;cstdarg&gt; // &quot;severity&quot; followed by a zero-terminated list of char*s; write the C-style strings to cerr void error(int severity ...) { va_list ap; // a magic type for holding arguments va_start(ap, severity); // arg startup: &quot;severity&quot; is the first argument of error() for (;;) { // treat the next var as a char*; no checking: a cast in disguise char* p = va_arg(ap, char*); if (!p) break; cerr &lt;&lt; p &lt;&lt; &apos; &apos;; } va_end(ap); // arg cleanup (don&apos;t forget this) cerr &lt;&lt; &apos;\n&apos;; if (severity) exit(severity); } void use() { error(7, &quot;this&quot;, &quot;is&quot;, &quot;an&quot;, &quot;error&quot;, nullptr); error(7); // crash error(7, &quot;this&quot;, &quot;is&quot;, &quot;an&quot;, &quot;error&quot;); // crash const char* is = &quot;is&quot;; string an = &quot;an&quot;; error(7, &quot;this&quot;, &quot;is&quot;, an, &quot;error&quot;); // crash } Alternative: Overloading. Templates. Variadic templates. #include &lt;iostream&gt; void error(int severity) { std::cerr &lt;&lt; &apos;\n&apos;; std::exit(severity); } template &lt;typename T, typename... Ts&gt; constexpr void error(int severity, T head, Ts... tail) { std::cerr &lt;&lt; head; error(severity, tail...); } void use() { error(7); // No crash! error(5, &quot;this&quot;, &quot;is&quot;, &quot;not&quot;, &quot;an&quot;, &quot;error&quot;); // No crash! std::string an = &quot;an&quot;; error(7, &quot;this&quot;, &quot;is&quot;, &quot;not&quot;, an, &quot;error&quot;); // No crash! error(5, &quot;oh&quot;, &quot;no&quot;, nullptr); // Compile error! No need for nullptr. } NoteThis is basically the way printf is implemented. Enforcement Flag definitions of C-style variadic functions. Flag #include &lt;cstdarg&gt; and #include &lt;stdarg.h&gt; ES.expr: ExpressionsExpressions manipulate values. ES.40: Avoid complicated expressionsReasonComplicated expressions are error-prone. Example// bad: assignment hidden in subexpression while ((c = getc()) != -1) // bad: two non-local variables assigned in a sub-expressions while ((cin &gt;&gt; c1, cin &gt;&gt; c2), c1 == c2) // better, but possibly still too complicated for (char c1, c2; cin &gt;&gt; c1 &gt;&gt; c2 &amp;&amp; c1 == c2;) // OK: if i and j are not aliased int x = ++i + ++j; // OK: if i != j and i != k v[i] = v[j] + v[k]; // bad: multiple assignments &quot;hidden&quot; in subexpressions x = a + (b = f()) + (c = g()) * 7; // bad: relies on commonly misunderstood precedence rules x = a &amp; b + c * d &amp;&amp; e ^ f == 7; // bad: undefined behavior x = x++ + x++ + ++x; Some of these expressions are unconditionally bad (e.g., they rely on undefined behavior). Others are simply so complicated and/or unusual that even good programmers could misunderstand them or overlook a problem when in a hurry. NoteC++17 tightens up the rules for the order of evaluation(left-to-right except right-to-left in assignments, and the order of evaluation of function arguments is unspecified; see ES.43),but that doesn’t change the fact that complicated expressions are potentially confusing. NoteA programmer should know and use the basic rules for expressions. Examplex = k * y + z; // OK auto t1 = k * y; // bad: unnecessarily verbose x = t1 + z; if (0 &lt;= x &amp;&amp; x &lt; max) // OK auto t1 = 0 &lt;= x; // bad: unnecessarily verbose auto t2 = x &lt; max; if (t1 &amp;&amp; t2) // ... EnforcementTricky. How complicated must an expression be to be considered complicated? Writing computations as statements with one operation each is also confusing. Things to consider: side effects: side effects on multiple non-local variables (for some definition of non-local) can be suspect, especially if the side effects are in separate subexpressions writes to aliased variables more than N operators (and what should N be?) reliance of subtle precedence rules uses undefined behavior (can we catch all undefined behavior?) implementation defined behavior? ??? ES.41: If in doubt about operator precedence, parenthesizeReasonAvoid errors. Readability. Not everyone has the operator table memorized. Exampleconst unsigned int flag = 2; unsigned int a = flag; if (a &amp; flag != 0) // bad: means a&amp;(flag != 0) Note: We recommend that programmers know their precedence table for the arithmetic operations, the logical operations, but consider mixing bitwise logical operations with other operators in need of parentheses. if ((a &amp; flag) != 0) // OK: works as intended NoteYou should know enough not to need parentheses for: if (a &lt; 0 || a &lt;= max) { // ... } Enforcement Flag combinations of bitwise-logical operators and other operators. Flag assignment operators not as the leftmost operator. ??? ES.42: Keep use of pointers simple and straightforwardReasonComplicated pointer manipulation is a major source of errors. NoteUse gsl::span instead.Pointers should only refer to single objects.Pointer arithmetic is fragile and easy to get wrong, the source of many, many bad bugs and security violations.span is a bounds-checked, safe type for accessing arrays of data.Access into an array with known bounds using a constant as a subscript can be validated by the compiler. Example, badvoid f(int* p, int count) { if (count &lt; 2) return; int* q = p + 1; // BAD ptrdiff_t d; int n; d = (p - &amp;n); // OK d = (q - p); // OK int n = *p++; // BAD if (count &lt; 6) return; p[4] = 1; // BAD p[count - 1] = 2; // BAD use(&amp;p[0], 3); // BAD } Example, goodvoid f(span&lt;int&gt; a) // BETTER: use span in the function declaration { if (a.size() &lt; 2) return; int n = a[0]; // OK span&lt;int&gt; q = a.subspan(1); // OK if (a.size() &lt; 6) return; a[4] = 1; // OK a[count - 1] = 2; // OK use(a.data(), 3); // OK } NoteSubscripting with a variable is difficult for both tools and humans to validate as safe.span is a run-time bounds-checked, safe type for accessing arrays of data.at() is another alternative that ensures single accesses are bounds-checked.If iterators are needed to access an array, use the iterators from a span constructed over the array. Example, badvoid f(array&lt;int, 10&gt; a, int pos) { a[pos / 2] = 1; // BAD a[pos - 1] = 2; // BAD a[-1] = 3; // BAD (but easily caught by tools) -- no replacement, just don&apos;t do this a[10] = 4; // BAD (but easily caught by tools) -- no replacement, just don&apos;t do this } Example, goodUse a span: void f1(span&lt;int, 10&gt; a, int pos) // A1: Change parameter type to use span { a[pos / 2] = 1; // OK a[pos - 1] = 2; // OK } void f2(array&lt;int, 10&gt; arr, int pos) // A2: Add local span and use that { span&lt;int&gt; a = {arr, pos}; a[pos / 2] = 1; // OK a[pos - 1] = 2; // OK } Use a at(): void f3(array&lt;int, 10&gt; a, int pos) // ALTERNATIVE B: Use at() for access { at(a, pos / 2) = 1; // OK at(a, pos - 1) = 2; // OK } Example, badvoid f() { int arr[COUNT]; for (int i = 0; i &lt; COUNT; ++i) arr[i] = i; // BAD, cannot use non-constant indexer } Example, goodUse a span: void f1() { int arr[COUNT]; span&lt;int&gt; av = arr; for (int i = 0; i &lt; COUNT; ++i) av[i] = i; } Use a span and range-for: void f1a() { int arr[COUNT]; span&lt;int, COUNT&gt; av = arr; int i = 0; for (auto&amp; e : av) e = i++; } Use at() for access: void f2() { int arr[COUNT]; for (int i = 0; i &lt; COUNT; ++i) at(arr, i) = i; } Use a range-for: void f3() { int arr[COUNT]; for (auto&amp; e : arr) e = i++; } NoteTooling can offer rewrites of array accesses that involve dynamic index expressions to use at() instead: static int a[10]; void f(int i, int j) { a[i + j] = 12; // BAD, could be rewritten as ... at(a, i + j) = 12; // OK -- bounds-checked } ExampleTurning an array into a pointer (as the language does essentially always) removes opportunities for checking, so avoid it void g(int* p); void f() { int a[5]; g(a); // BAD: are we trying to pass an array? g(&amp;a[0]); // OK: passing one object } If you want to pass an array, say so: void g(int* p, size_t length); // old (dangerous) code void g1(span&lt;int&gt; av); // BETTER: get g() changed. void f2() { int a[5]; span&lt;int&gt; av = a; g(av.data(), av.size()); // OK, if you have no choice g1(a); // OK -- no decay here, instead use implicit span ctor } Enforcement Flag any arithmetic operation on an expression of pointer type that results in a value of pointer type. Flag any indexing expression on an expression or variable of array type (either static array or std::array) where the indexer is not a compile-time constant expression with a value between 0 or and the upper bound of the array. Flag any expression that would rely on implicit conversion of an array type to a pointer type. This rule is part of the bounds-safety profile. ES.43: Avoid expressions with undefined order of evaluationReasonYou have no idea what such code does. Portability.Even if it does something sensible for you, it may do something different on another compiler (e.g., the next release of your compiler) or with a different optimizer setting. NoteC++17 tightens up the rules for the order of evaluation:left-to-right except right-to-left in assignments, and the order of evaluation of function arguments is unspecified. However, remember that your code may be compiled with a pre-C++17 compiler (e.g., through cut-and-paste) so don’t be too clever. Examplev[i] = ++i; // the result is undefined A good rule of thumb is that you should not read a value twice in an expression where you write to it. EnforcementCan be detected by a good analyzer. ES.44: Don’t depend on order of evaluation of function argumentsReasonBecause that order is unspecified. NoteC++17 tightens up the rules for the order of evaluation, but the order of evaluation of function arguments is still unspecified. Exampleint i = 0; f(++i, ++i); The call will most likely be f(0, 1) or f(1, 0), but you don’t know which.Technically, the behavior is undefined.In C++17, this code does not have undefined behavior, but it is still not specified which argument is evaluated first. ExampleOverloaded operators can lead to order of evaluation problems: f1()-&gt;m(f2()); // m(f1(), f2()) cout &lt;&lt; f1() &lt;&lt; f2(); // operator&lt;&lt;(operator&lt;&lt;(cout, f1()), f2()) In C++17, these examples work as expected (left to right) and assignments are evaluated right to left (just as =’s binding is right-to-left) f1() = f2(); // undefined behavior in C++14; in C++17, f2() is evaluated before f1() EnforcementCan be detected by a good analyzer. ES.45: Avoid “magic constants”; use symbolic constantsReasonUnnamed constants embedded in expressions are easily overlooked and often hard to understand: Examplefor (int m = 1; m &lt;= 12; ++m) // don&apos;t: magic constant 12 cout &lt;&lt; month[m] &lt;&lt; &apos;\n&apos;; No, we don’t all know that there are 12 months, numbered 1..12, in a year. Better: // months are indexed 1..12 constexpr int first_month = 1; constexpr int last_month = 12; for (int m = first_month; m &lt;= last_month; ++m) // better cout &lt;&lt; month[m] &lt;&lt; &apos;\n&apos;; Better still, don’t expose constants: for (auto m : month) cout &lt;&lt; m &lt;&lt; &apos;\n&apos;; EnforcementFlag literals in code. Give a pass to 0, 1, nullptr, \n, &quot;&quot;, and others on a positive list. ES.46: Avoid lossy (narrowing, truncating) arithmetic conversionsReasonA narrowing conversion destroys information, often unexpectedly so. Example, badA key example is basic narrowing: double d = 7.9; int i = d; // bad: narrowing: i becomes 7 i = (int) d; // bad: we&apos;re going to claim this is still not explicit enough void f(int x, long y, double d) { char c1 = x; // bad: narrowing char c2 = y; // bad: narrowing char c3 = d; // bad: narrowing } NoteThe guideline support library offers a narrow_cast operation for specifying that narrowing is acceptable and a narrow (“narrow if”) that throws an exception if a narrowing would throw away information: i = narrow_cast&lt;int&gt;(d); // OK (you asked for it): narrowing: i becomes 7 i = narrow&lt;int&gt;(d); // OK: throws narrowing_error We also include lossy arithmetic casts, such as from a negative floating point type to an unsigned integral type: double d = -7.9; unsigned u = 0; u = d; // BAD u = narrow_cast&lt;unsigned&gt;(d); // OK (you asked for it): u becomes 0 u = narrow&lt;unsigned&gt;(d); // OK: throws narrowing_error EnforcementA good analyzer can detect all narrowing conversions. However, flagging all narrowing conversions will lead to a lot of false positives. Suggestions: flag all floating-point to integer conversions (maybe only float-&gt;char and double-&gt;int. Here be dragons! we need data) flag all long-&gt;char (I suspect int-&gt;char is very common. Here be dragons! we need data) consider narrowing conversions for function arguments especially suspect ES.47: Use nullptr rather than 0 or NULLReasonReadability. Minimize surprises: nullptr cannot be confused with anint. nullptr also has a well-specified (very restrictive) type, and thusworks in more scenarios where type deduction might do the wrong thing on NULLor 0. ExampleConsider: void f(int); void f(char*); f(0); // call f(int) f(nullptr); // call f(char*) EnforcementFlag uses of 0 and NULL for pointers. The transformation may be helped by simple program transformation. ES.48: Avoid castsReasonCasts are a well-known source of errors. Make some optimizations unreliable. Example, baddouble d = 2; auto p = (long*)&amp;d; auto q = (long long*)&amp;d; cout &lt;&lt; d &lt;&lt; &apos; &apos; &lt;&lt; *p &lt;&lt; &apos; &apos; &lt;&lt; *q &lt;&lt; &apos;\n&apos;; What would you think this fragment prints? The result is at best implementation defined. I got 2 0 4611686018427387904 Adding *q = 666; cout &lt;&lt; d &lt;&lt; &apos; &apos; &lt;&lt; *p &lt;&lt; &apos; &apos; &lt;&lt; *q &lt;&lt; &apos;\n&apos;; I got 3.29048e-321 666 666 Surprised? I’m just glad I didn’t crash the program. NoteProgrammers who write casts typically assume that they know what they are doing,or that writing a cast makes the program “easier to read”.In fact, they often disable the general rules for using values.Overload resolution and template instantiation usually pick the right function if there is a right function to pick.If there is not, maybe there ought to be, rather than applying a local fix (cast). NoteCasts are necessary in a systems programming language. For example, how elsewould we get the address of a device register into a pointer? However, castsare seriously overused as well as a major source of errors. NoteIf you feel the need for a lot of casts, there may be a fundamental design problem. ExceptionCasting to (void) is the Standard-sanctioned way to turn off [[nodiscard]] warnings. If you are calling a function with a [[nodiscard]] return and you deliberately want to discard the result, first think hard about whether that is really a good idea (there is usually a good reason the author of the function or of the return type used [[nodiscard]] in the first place), but if you still think it’s appropriate and your code reviewer agrees, write (void) to turn off the warning. AlternativesCasts are widely (mis) used. Modern C++ has rules and constructs that eliminate the need for casts in many contexts, such as Use templates Use std::variant Rely on the well-defined, safe, implicit conversions between pointer types Enforcement Force the elimination of C-style casts, except on a function with a [[nodiscard]] return Warn if there are many functional style casts (there is an obvious problem in quantifying ‘many’) The type profile bans reinterpret_cast. Warn against identity casts between pointer types, where the source and target types are the same (#Pro-type-identitycast) Warn if a pointer cast could be implicit ES.49: If you must use a cast, use a named castReasonReadability. Error avoidance.Named casts are more specific than a C-style or functional cast, allowing the compiler to catch some errors. The named casts are: static_cast const_cast reinterpret_cast dynamic_cast std::move // move(x) is an rvalue reference to x std::forward // forward(x) is an rvalue reference to x gsl::narrow_cast // narrow_cast&lt;T&gt;(x) is static_cast&lt;T&gt;(x) gsl::narrow // narrow&lt;T&gt;(x) is static_cast&lt;T&gt;(x) if static_cast&lt;T&gt;(x) == x or it throws narrowing_error Exampleclass B { /* ... */ }; class D { /* ... */ }; template&lt;typename D&gt; D* upcast(B* pb) { D* pd0 = pb; // error: no implicit conversion from B* to D* D* pd1 = (D*)pb; // legal, but what is done? D* pd2 = static_cast&lt;D*&gt;(pb); // error: D is not derived from B D* pd3 = reinterpret_cast&lt;D*&gt;(pb); // OK: on your head be it! D* pd4 = dynamic_cast&lt;D*&gt;(pb); // OK: return nullptr // ... } The example was synthesized from real-world bugs where D used to be derived from B, but someone refactored the hierarchy.The C-style cast is dangerous because it can do any kind of conversion, depriving us of any protection from mistakes (now or in the future). NoteWhen converting between types with no information loss (e.g. from float todouble or int64 from int32), brace initialization may be used instead. double d {some_float}; int64_t i {some_int32}; This makes it clear that the type conversion was intended and also preventsconversions between types that might result in loss of precision. (It is acompilation error to try to initialize a float from a double in this fashion,for example.) Notereinterpret_cast can be essential, but the essential uses (e.g., turning a machine address into pointer) are not type safe: auto p = reinterpret_cast&lt;Device_register&gt;(0x800); // inherently dangerous Enforcement Flag C-style and functional casts. The type profile bans reinterpret_cast. The type profile warns when using static_cast between arithmetic types. ES.50: Don’t cast away constReasonIt makes a lie out of const.If the variable is actually declared const, the result of “casting away const“ is undefined behavior. Example, badvoid f(const int&amp; i) { const_cast&lt;int&amp;&gt;(i) = 42; // BAD } static int i = 0; static const int j = 0; f(i); // silent side effect f(j); // undefined behavior ExampleSometimes, you may be tempted to resort to const_cast to avoid code duplication, such as when two accessor functions that differ only in const-ness have similar implementations. For example: class Bar; class Foo { public: // BAD, duplicates logic Bar&amp; get_bar() { /* complex logic around getting a non-const reference to my_bar */ } const Bar&amp; get_bar() const { /* same complex logic around getting a const reference to my_bar */ } private: Bar my_bar; }; Instead, prefer to share implementations. Normally, you can just have the non-const function call the const function. However, when there is complex logic this can lead to the following pattern that still resorts to a const_cast: class Foo { public: // not great, non-const calls const version but resorts to const_cast Bar&amp; get_bar() { return const_cast&lt;Bar&amp;&gt;(static_cast&lt;const Foo&amp;&gt;(*this).get_bar()); } const Bar&amp; get_bar() const { /* the complex logic around getting a const reference to my_bar */ } private: Bar my_bar; }; Although this pattern is safe when applied correctly, because the caller must have had a non-const object to begin with, it’s not ideal because the safety is hard to enforce automatically as a checker rule. Instead, prefer to put the common code in a common helper function – and make it a template so that it deduces const. This doesn’t use any const_cast at all: class Foo { public: // good Bar&amp; get_bar() { return get_bar_impl(*this); } const Bar&amp; get_bar() const { return get_bar_impl(*this); } private: Bar my_bar; template&lt;class T&gt; // good, deduces whether T is const or non-const static auto get_bar_impl(T&amp; t) -&gt; decltype(t.get_bar()) { /* the complex logic around getting a possibly-const reference to my_bar */ } }; ExceptionYou may need to cast away const when calling const-incorrect functions.Prefer to wrap such functions in inline const-correct wrappers to encapsulate the cast in one place. ExampleSometimes, “cast away const“ is to allow the updating of some transient information of an otherwise immutable object.Examples are caching, memoization, and precomputation.Such examples are often handled as well or better using mutable or an indirection than with a const_cast. Consider keeping previously computed results around for a costly operation: int compute(int x); // compute a value for x; assume this to be costly class Cache { // some type implementing a cache for an int-&gt;int operation public: pair&lt;bool, int&gt; find(int x) const; // is there a value for x? void set(int x, int v); // make y the value for x // ... private: // ... }; class X { public: int get_val(int x) { auto p = cache.find(x); if (p.first) return p.second; int val = compute(x); cache.set(x, val); // insert value for x return val; } // ... private: Cache cache; }; Here, get_val() is logically constant, so we would like to make it a const member.To do this we still need to mutate cache, so people sometimes resort to a const_cast: class X { // Suspicious solution based on casting public: int get_val(int x) const { auto p = cache.find(x); if (p.first) return p.second; int val = compute(x); const_cast&lt;Cache&amp;&gt;(cache).set(x, val); // ugly return val; } // ... private: Cache cache; }; Fortunately, there is a better solution:State that cache is mutable even for a const object: class X { // better solution public: int get_val(int x) const { auto p = cache.find(x); if (p.first) return p.second; int val = compute(x); cache.set(x, val); return val; } // ... private: mutable Cache cache; }; An alternative solution would to store a pointer to the cache: class X { // OK, but slightly messier solution public: int get_val(int x) const { auto p = cache-&gt;find(x); if (p.first) return p.second; int val = compute(x); cache-&gt;set(x, val); return val; } // ... private: unique_ptr&lt;Cache&gt; cache; }; That solution is the most flexible, but requires explicit construction and destruction of *cache(most likely in the constructor and destructor of X). In any variant, we must guard against data races on the cache in multi-threaded code, possibly using a std::mutex. Enforcement Flag const_casts. This rule is part of the type-safety profile for the related Profile. ES.55: Avoid the need for range checkingReasonConstructs that cannot overflow do not overflow (and usually run faster): Examplefor (auto&amp; x : v) // print all elements of v cout &lt;&lt; x &lt;&lt; &apos;\n&apos;; auto p = find(v, x); // find x in v EnforcementLook for explicit range checks and heuristically suggest alternatives. ES.56: Write std::move() only when you need to explicitly move an object to another scopeReasonWe move, rather than copy, to avoid duplication and for improved performance. A move typically leaves behind an empty object (C.64), which can be surprising or even dangerous, so we try to avoid moving from lvalues (they might be accessed later). NotesMoving is done implicitly when the source is an rvalue (e.g., value in a return treatment or a function result), so don’t pointlessly complicate code in those cases by writing move explicitly. Instead, write short functions that return values, and both the function’s return and the caller’s accepting of the return will be optimized naturally. In general, following the guidelines in this document (including not making variables’ scopes needlessly large, writing short functions that return values, returning local variables) help eliminate most need for explicit std::move. Explicit move is needed to explicitly move an object to another scope, notably to pass it to a “sink” function and in the implementations of the move operations themselves (move constructor, move assignment operator) and swap operations. Example, badvoid sink(X&amp;&amp; x); // sink takes ownership of x void user() { X x; // error: cannot bind an lvalue to a rvalue reference sink(x); // OK: sink takes the contents of x, x must now be assumed to be empty sink(std::move(x)); // ... // probably a mistake use(x); } Usually, a std::move() is used as an argument to a &amp;&amp; parameter.And after you do that, assume the object has been moved from (see C.64) and don’t read its state again until you first set it to a new value. void f() { string s1 = &quot;supercalifragilisticexpialidocious&quot;; string s2 = s1; // ok, takes a copy assert(s1 == &quot;supercalifragilisticexpialidocious&quot;); // ok // bad, if you want to keep using s1&apos;s value string s3 = move(s1); // bad, assert will likely fail, s1 likely changed assert(s1 == &quot;supercalifragilisticexpialidocious&quot;); } Examplevoid sink(unique_ptr&lt;widget&gt; p); // pass ownership of p to sink() void f() { auto w = make_unique&lt;widget&gt;(); // ... sink(std::move(w)); // ok, give to sink() // ... sink(w); // Error: unique_ptr is carefully designed so that you cannot copy it } Notesstd::move() is a cast to &amp;&amp; in disguise; it doesn’t itself move anything, but marks a named object as a candidate that can be moved from.The language already knows the common cases where objects can be moved from, especially when returning values from functions, so don’t complicate code with redundant std::move()‘s. Never write std::move() just because you’ve heard “it’s more efficient.”In general, don’t believe claims of “efficiency” without data (???).In general, don’t complicate your code without reason (??) Example, badvector&lt;int&gt; make_vector() { vector&lt;int&gt; result; // ... load result with data return std::move(result); // bad; just write &quot;return result;&quot; } Never write return move(local_variable);, because the language already knows the variable is a move candidate.Writing move in this code won’t help, and can actually be detrimental because on some compilers it interferes with RVO (the return value optimization) by creating an additional reference alias to the local variable. Example, badvector&lt;int&gt; v = std::move(make_vector()); // bad; the std::move is entirely redundant Never write move on a returned value such as x = move(f()); where f returns by value.The language already knows that a returned value is a temporary object that can be moved from. Examplevoid mover(X&amp;&amp; x) { call_something(std::move(x)); // ok call_something(std::forward&lt;X&gt;(x)); // bad, don&apos;t std::forward an rvalue reference call_something(x); // suspicious, why not std::move? } template&lt;class T&gt; void forwarder(T&amp;&amp; t) { call_something(std::move(t)); // bad, don&apos;t std::move a forwarding reference call_something(std::forward&lt;T&gt;(t)); // ok call_something(t); // suspicious, why not std::forward? } Enforcement Flag use of std::move(x) where x is an rvalue or the language will already treat it as an rvalue, including return std::move(local_variable); and std::move(f()) on a function that returns by value. Flag functions taking an S&amp;&amp; parameter if there is no const S&amp; overload to take care of lvalues. Flag a std::moves argument passed to a parameter, except when the parameter type is one of the following: an X&amp;&amp; rvalue reference; a T&amp;&amp; forwarding reference where T is a template parameter type; or by value and the type is move-only. Flag when std::move is applied to a forwarding reference (T&amp;&amp; where T is a template parameter type). Use std::forward instead. Flag when std::move is applied to other than an rvalue reference. (More general case of the previous rule to cover the non-forwarding cases.) Flag when std::forward is applied to an rvalue reference (X&amp;&amp; where X is a concrete type). Use std::move instead. Flag when std::forward is applied to other than a forwarding reference. (More general case of the previous rule to cover the non-moving cases.) Flag when an object is potentially moved from and the next operation is a const operation; there should first be an intervening non-const operation, ideally assignment, to first reset the object’s value. ES.60: Avoid new and delete outside resource management functionsReasonDirect resource management in application code is error-prone and tedious. Notealso known as “No naked new!” Example, badvoid f(int n) { auto p = new X[n]; // n default constructed Xs // ... delete[] p; } There can be code in the ... part that causes the delete never to happen. See also: R: Resource management EnforcementFlag naked news and naked deletes. ES.61: Delete arrays using delete[] and non-arrays using deleteReasonThat’s what the language requires and mistakes can lead to resource release errors and/or memory corruption. Example, badvoid f(int n) { auto p = new X[n]; // n default constructed Xs // ... delete p; // error: just delete the object p, rather than delete the array p[] } NoteThis example not only violates the no naked new rule as in the previous example, it has many more problems. Enforcement if the new and the delete is in the same scope, mistakes can be flagged. if the new and the delete are in a constructor/destructor pair, mistakes can be flagged. ES.62: Don’t compare pointers into different arraysReasonThe result of doing so is undefined. Example, badvoid f(int n) { int a1[7]; int a2[9]; if (&amp;a1[5] &lt; &amp;a2[7]) {} // bad: undefined if (0 &lt; &amp;a1[5] - &amp;a2[7]) {} // bad: undefined } NoteThis example has many more problems. Enforcement??? ES.63: Don’t sliceReasonSlicing – that is, copying only part of an object using assignment or initialization – most often leads to errors becausethe object was meant to be considered as a whole.In the rare cases where the slicing was deliberate the code can be surprising. Exampleclass Shape { /* ... */ }; class Circle : public Shape { /* ... */ Point c; int r; }; Circle c {{0, 0}, 42}; Shape s {c}; // copy Shape part of Circle The result will be meaningless because the center and radius will not be copied from `c` into `s`. The first defense against this is to [define the base class `Shape` not to allow this](#Rc-copy-virtual). ##### Alternative If you mean to slice, define an explicit operation to do so. This saves readers from confusion. For example: class Smiley : public Circle { public: Circle copy_circle(); // ... }; Smiley sm { /* ... */ }; Circle c1 {sm}; // ideally prevented by the definition of Circle Circle c2 {sm.copy_circle()}; ##### Enforcement Warn against slicing. ### ES.64: Use the `T{e}`notation for construction ##### Reason The `T{e}` construction syntax makes it explicit that construction is desired. The `T{e}` construction syntax doesn't allow narrowing. `T{e}` is the only safe and general expression for constructing a value of type `T` from an expression `e`. The casts notations `T(e)` and `(T)e` are neither safe nor general. ##### Example For built-in types, the construction notation protects against narrowing and reinterpretation void use(char ch, int i, double d, char* p, long long lng) { int x1 = int{ch}; // OK, but redundant int x2 = int{d}; // error: double->int narrowing; use a cast if you need to int x3 = int{p}; // error: pointer to->int; use a reinterpret_cast if you really need to int x4 = int{lng}; // error: long long->int narrowing; use a cast if you need to int y1 = int(ch); // OK, but redundant int y2 = int(d); // bad: double->int narrowing; use a cast if you need to int y3 = int(p); // bad: pointer to->int; use a reinterpret_cast if you really need to int y4 = int(lng); // bad: long->int narrowing; use a cast if you need to int z1 = (int)ch; // OK, but redundant int z2 = (int)d; // bad: double->int narrowing; use a cast if you need to int z3 = (int)p; // bad: pointer to->int; use a reinterpret_cast if you really need to int z4 = (int)lng; // bad: long long->int narrowing; use a cast if you need to } The integer to/from pointer conversions are implementation defined when using the `T(e)` or `(T)e` notations, and non-portable between platforms with different integer and pointer sizes. ##### Note [Avoid casts](#Res-casts) (explicit type conversion) and if you must [prefer named casts](#Res-casts-named). ##### Note When unambiguous, the `T` can be left out of `T{e}`. complex f(complex); auto z = f({2*pi, 1}); ##### Note The construction notation is the most general [initializer notation](#Res-list). ##### Exception `std::vector` and other containers were defined before we had `{}` as a notation for construction. Consider: vector vs {10}; // ten empty strings vector vi1 {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; // ten elements 1..10 vector vi2 {10}; // one element with the value 10 How do we get a `vector` of 10 default initialized `int`s? vector v3(10); // ten elements with value 0 The use of `()` rather than `{}` for number of elements is conventional (going back to the early 1980s), hard to change, but still a design error: for a container where the element type can be confused with the number of elements, we have an ambiguity that must be resolved. The conventional resolution is to interpret `{10}` as a list of one element and use `(10)` to distinguish a size. This mistake need not be repeated in new code. We can define a type to represent the number of elements: struct Count { int n; }; template class Vector { public: Vector(Count n); // n default-initialized elements Vector(initializer_list init); // init.size() elements // ... }; Vector v1{10}; Vector v2{Count{10}}; Vector&lt;Count&gt; v3{Count{10}}; // yes, there is still a very minor problem The main problem left is to find a suitable name for Count. EnforcementFlag the C-style (T)e and functional-style T(e) casts. ES.65: Don’t dereference an invalid pointerReasonDereferencing an invalid pointer, such as nullptr, is undefined behavior, typically leading to immediate crashes,wrong results, or memory corruption. NoteThis rule is an obvious and well-known language rule, but can be hard to follow.It takes good coding style, library support, and static analysis to eliminate violations without major overhead.This is a major part of the discussion of C++’s resource- and type-safety model. See also: Use RAII to avoid lifetime problems. Use unique_ptr to avoid lifetime problems. Use shared_ptr to avoid lifetime problems. Use references when nullptr isn’t a possibility. Use not_null to catch unexpected nullptr early. Use the bounds profile to avoid range errors. Examplevoid f() { int x = 0; int* p = &amp;x; if (condition()) { int y = 0; p = &amp;y; } // invalidates p *p = 42; // BAD, p might be invalid if the branch was taken } To resolve the problem, either extend the lifetime of the object the pointer is intended to refer to, or shorten the lifetime of the pointer (move the dereference to before the pointed-to object’s lifetime ends). void f1() { int x = 0; int* p = &amp;x; int y = 0; if (condition()) { p = &amp;y; } *p = 42; // OK, p points to x or y and both are still in scope } Unfortunately, most invalid pointer problems are harder to spot and harder to fix. Examplevoid f(int* p) { int x = *p; // BAD: how do we know that p is valid? } There is a huge amount of such code.Most works – after lots of testing – but in isolation it is impossible to tell whether p could be the nullptr.Consequently, this is also a major source of errors.There are many approaches to dealing with this potential problem: void f1(int* p) // deal with nullptr { if (!p) { // deal with nullptr (allocate, return, throw, make p point to something, whatever } int x = *p; } There are two potential problems with testing for nullptr: it is not always obvious what to do what to do if we find nullptr the test can be redundant and/or relatively expensive it is not obvious if the test is to protect against a violation or part of the required logic. void f2(int* p) // state that p is not supposed to be nullptr { assert(p); int x = *p; } This would carry a cost only when the assertion checking was enabled and would give a compiler/analyzer useful information.This would work even better if/when C++ gets direct support for contracts: void f3(int* p) // state that p is not supposed to be nullptr [[expects: p]] { int x = *p; } Alternatively, we could use gsl::not_null to ensure that p is not the nullptr. void f(not_null&lt;int*&gt; p) { int x = *p; } These remedies take care of nullptr only.Remember that there are other ways of getting an invalid pointer. Examplevoid f(int* p) // old code, doesn&apos;t use owner { delete p; } void g() // old code: uses naked new { auto q = new int{7}; f(q); int x = *q; // BAD: dereferences invalid pointer } Examplevoid f() { vector&lt;int&gt; v(10); int* p = &amp;v[5]; v.push_back(99); // could reallocate v&apos;s elements int x = *p; // BAD: dereferences potentially invalid pointer } EnforcementThis rule is part of the lifetime safety profile Flag a dereference of a pointer that points to an object that has gone out of scope Flag a dereference of a pointer that may have been invalidated by assigning a nullptr Flag a dereference of a pointer that may have been invalidated by a delete Flag a dereference to a pointer to a container element that may have been invalidated by dereference ES.stmt: StatementsStatements control the flow of control (except for function calls and exception throws, which are expressions). ES.70: Prefer a switch-statement to an if-statement when there is a choiceReason Readability. Efficiency: A switch compares against constants and is usually better optimized than a series of tests in an if-then-else chain. A switch enables some heuristic consistency checking. For example, have all values of an enum been covered? If not, is there a default? Examplevoid use(int n) { switch (n) { // good case 0: // ... case 7: // ... } } rather than: void use2(int n) { if (n == 0) // bad: if-then-else chain comparing against a set of constants // ... else if (n == 7) // ... } EnforcementFlag if-then-else chains that check against constants (only). ES.71: Prefer a range-for-statement to a for-statement when there is a choiceReasonReadability. Error prevention. Efficiency. Examplefor (gsl::index i = 0; i &lt; v.size(); ++i) // bad cout &lt;&lt; v[i] &lt;&lt; &apos;\n&apos;; for (auto p = v.begin(); p != v.end(); ++p) // bad cout &lt;&lt; *p &lt;&lt; &apos;\n&apos;; for (auto&amp; x : v) // OK cout &lt;&lt; x &lt;&lt; &apos;\n&apos;; for (gsl::index i = 1; i &lt; v.size(); ++i) // touches two elements: can&apos;t be a range-for cout &lt;&lt; v[i] + v[i - 1] &lt;&lt; &apos;\n&apos;; for (gsl::index i = 0; i &lt; v.size(); ++i) // possible side effect: can&apos;t be a range-for cout &lt;&lt; f(v, &amp;v[i]) &lt;&lt; &apos;\n&apos;; for (gsl::index i = 0; i &lt; v.size(); ++i) { // body messes with loop variable: can&apos;t be a range-for if (i % 2 == 0) continue; // skip even elements else cout &lt;&lt; v[i] &lt;&lt; &apos;\n&apos;; } A human or a good static analyzer may determine that there really isn’t a side effect on v in f(v, &amp;v[i]) so that the loop can be rewritten. “Messing with the loop variable” in the body of a loop is typically best avoided. NoteDon’t use expensive copies of the loop variable of a range-for loop: for (string s : vs) // ... This will copy each elements of vs into s. Better: for (string&amp; s : vs) // ... Better still, if the loop variable isn’t modified or copied: for (const string&amp; s : vs) // ... EnforcementLook at loops, if a traditional loop just looks at each element of a sequence, and there are no side effects on what it does with the elements, rewrite the loop to a ranged-for loop. ES.72: Prefer a for-statement to a while-statement when there is an obvious loop variableReasonReadability: the complete logic of the loop is visible “up front”. The scope of the loop variable can be limited. Examplefor (gsl::index i = 0; i &lt; vec.size(); i++) { // do work } Example, badint i = 0; while (i &lt; vec.size()) { // do work i++; } Enforcement??? ES.73: Prefer a while-statement to a for-statement when there is no obvious loop variableReasonReadability. Exampleint events = 0; for (; wait_for_event(); ++events) { // bad, confusing // ... } The “event loop” is misleading because the events counter has nothing to do with the loop condition (wait_for_event()).Better int events = 0; while (wait_for_event()) { // better ++events; // ... } EnforcementFlag actions in for-initializers and for-increments that do not relate to the for-condition. ES.74: Prefer to declare a loop variable in the initializer part of a for-statementReasonLimit the loop variable visibility to the scope of the loop.Avoid using the loop variable for other purposes after the loop. Examplefor (int i = 0; i &lt; 100; ++i) { // GOOD: i var is visible only inside the loop // ... } Example, don’tint j; // BAD: j is visible outside the loop for (j = 0; j &lt; 100; ++j) { // ... } // j is still visible here and isn&apos;t needed See also: Don’t use a variable for two unrelated purposes Examplefor (string s; cin &gt;&gt; s; ) { cout &lt;&lt; s &lt;&lt; &apos;\n&apos;; } EnforcementWarn when a variable modified inside the for-statement is declared outside the loop and not being used outside the loop. Discussion: Scoping the loop variable to the loop body also helps code optimizers greatly. Recognizing that the induction variableis only accessible in the loop body unblocks optimizations such as hoisting, strength reduction, loop-invariant code motion, etc. ES.75: Avoid do-statementsReasonReadability, avoidance of errors.The termination condition is at the end (where it can be overlooked) and the condition is not checked the first time through. Exampleint x; do { cin &gt;&gt; x; // ... } while (x &lt; 0); NoteYes, there are genuine examples where a do-statement is a clear statement of a solution, but also many bugs. EnforcementFlag do-statements. ES.76: Avoid gotoReasonReadability, avoidance of errors. There are better control structures for humans; goto is for machine generated code. ExceptionBreaking out of a nested loop.In that case, always jump forwards. for (int i = 0; i &lt; imax; ++i) for (int j = 0; j &lt; jmax; ++j) { if (a[i][j] &gt; elem_max) goto finished; // ... } finished: // ... Example, badThere is a fair amount of use of the C goto-exit idiom: void f() { // ... goto exit; // ... goto exit; // ... exit: // ... common cleanup code ... } This is an ad-hoc simulation of destructors.Declare your resources with handles with destructors that clean up.If for some reason you cannot handle all cleanup with destructors for the variables used,consider gsl::finally() as a cleaner and more reliable alternative to goto exit Enforcement Flag goto. Better still flag all gotos that do not jump from a nested loop to the statement immediately after a nest of loops. ES.77: Minimize the use of break and continue in loopsReason In a non-trivial loop body, it is easy to overlook a break or a continue. A break in a loop has a dramatically different meaning than a break in a switch-statement (and you can have switch-statement in a loop and a loop in a switch-case). Example??? AlternativeOften, a loop that requires a break is a good candidate for a function (algorithm), in which case the break becomes a return. ??? Often. a loop that uses continue can equivalently and as clearly be expressed by an if-statement. ??? NoteIf you really need to break out a loop, a break is typically better than alternatives such as modifying the loop variable or a goto: Enforcement??? ES.78: Always end a non-empty case with a breakReason Accidentally leaving out a break is a fairly common bug. A deliberate fallthrough is a maintenance hazard. Exampleswitch (eventType) { case Information: update_status_bar(); break; case Warning: write_event_log(); // Bad - implicit fallthrough case Error: display_error_window(); break; } It is easy to overlook the fallthrough. Be explicit: switch (eventType) { case Information: update_status_bar(); break; case Warning: write_event_log(); // fallthrough case Error: display_error_window(); break; } In C++17, use a [[fallthrough]] annotation: switch (eventType) { case Information: update_status_bar(); break; case Warning: write_event_log(); [[fallthrough]]; // C++17 case Error: display_error_window(); break; } NoteMultiple case labels of a single statement is OK: switch (x) { case &apos;a&apos;: case &apos;b&apos;: case &apos;f&apos;: do_something(x); break; } EnforcementFlag all fallthroughs from non-empty cases. ES.79: Use default to handle common cases (only)Reason Code clarity. Improved opportunities for error detection. Exampleenum E { a, b, c , d }; void f1(E x) { switch (x) { case a: do_something(); break; case b: do_something_else(); break; default: take_the_default_action(); break; } } Here it is clear that there is a default action and that cases a and b are special. ExampleBut what if there is no default action and you mean to handle only specific cases?In that case, have an empty default or else it is impossible to know if you meant to handle all cases: void f2(E x) { switch (x) { case a: do_something(); break; case b: do_something_else(); break; default: // do nothing for the rest of the cases break; } } If you leave out the default, a maintainer and/or a compiler may reasonably assume that you intended to handle all cases: void f2(E x) { switch (x) { case a: do_something(); break; case b: case c: do_something_else(); break; } } Did you forget case d or deliberately leave it out?Forgetting a case typically happens when a case is added to an enumeration and the person doing so fails to add it to everyswitch over the enumerators. EnforcementFlag switch-statements over an enumeration that don’t handle all enumerators and do not have a default.This may yield too many false positives in some code bases; if so, flag only switches that handle most but not all cases(that was the strategy of the very first C++ compiler). ES.84: Don’t (try to) declare a local variable with no nameReasonThere is no such thing.What looks to a human like a variable without a name is to the compiler a statement consisting of a temporary that immediately goes out of scope.To avoid unpleasant surprises. Example, badvoid f() { lock&lt;mutex&gt;{mx}; // Bad // ... } This declares an unnamed lock object that immediately goes out of scope at the point of the semicolon.This is not an uncommon mistake.In particular, this particular example can lead to hard-to find race conditions.There are exceedingly clever uses of this “idiom”, but they are far rarer than the mistakes. NoteUnnamed function arguments are fine. EnforcementFlag statements that are just a temporary ES.85: Make empty statements visibleReasonReadability. Examplefor (i = 0; i &lt; max; ++i); // BAD: the empty statement is easily overlooked v[i] = f(v[i]); for (auto x : v) { // better // nothing } v[i] = f(v[i]); EnforcementFlag empty statements that are not blocks and don’t contain comments. ES.86: Avoid modifying loop control variables inside the body of raw for-loopsReasonThe loop control up front should enable correct reasoning about what is happening inside the loop. Modifying loop counters in both the iteration-expression and inside the body of the loop is a perennial source of surprises and bugs. Examplefor (int i = 0; i &lt; 10; ++i) { // no updates to i -- ok } for (int i = 0; i &lt; 10; ++i) { // if (/* something */) ++i; // BAD // } bool skip = false; for (int i = 0; i &lt; 10; ++i) { if (skip) { skip = false; continue; } // if (/* something */) skip = true; // Better: using two variable for two concepts. // } EnforcementFlag variables that are potentially updated (have a non-const use) in both the loop control iteration-expression and the loop body. ES.87: Don’t add redundant == or != to conditionsReasonDoing so avoids verbosity and eliminates some opportunities for mistakes.Helps make style consistent and conventional. ExampleBy definition, a condition in an if-statement, while-statement, or a for-statement selects between true and false.A numeric value is compared to 0 and a pointer value to nullptr. // These all mean &quot;if `p` is not `nullptr`&quot; if (p) { ... } // good if (p != 0) { ... } // redundant `!=0`; bad: don&apos;t use 0 for pointers if (p != nullptr) { ... } // redundant `!=nullptr`, not recommended Often, if (p) is read as “if p is valid” which is a direct expression of the programmers intent,whereas if (p != nullptr) would be a long-winded workaround. ExampleThis rule is especially useful when a declaration is used as a condition if (auto pc = dynamic_cast&lt;Circle&gt;(ps)) { ... } // execute is ps points to a kind of Circle, good if (auto pc = dynamic_cast&lt;Circle&gt;(ps); pc != nullptr) { ... } // not recommended ExampleNote that implicit conversions to bool are applied in conditions.For example: for (string s; cin &gt;&gt; s; ) v.push_back(s); This invokes istream‘s operator bool(). NoteExplicit comparison of an integer to 0 is in general not redundant.The reason is that (as opposed to pointers and Booleans) an integer often has more than two reasonable values.Furthermore 0 (zero) is often used to indicate success.Consequently, it is best to be specific about the comparison. void f(int i) { if (i) // suspect // ... if (i == success) // possibly better // ... } Always remember that an integer can have more than two values. Example, badIt has been noted that if(strcmp(p1, p2)) { ... } // are the two C-style strings equal? (mistake!) is a common beginners error.If you use C-style strings, you must know the &lt;cstring&gt; functions well.Being verbose and writing if(strcmp(p1, p2) != 0) { ... } // are the two C-style strings equal? (mistake!) would not in itself save you. NoteThe opposite condition is most easily expressed using a negation: // These all mean &quot;if `p` is `nullptr`&quot; if (!p) { ... } // good if (p == 0) { ... } // redundant `== 0`; bad: don&apos;t use `0` for pointers if (p == nullptr) { ... } // redundant `== nullptr`, not recommended EnforcementEasy, just check for redundant use of != and == in conditions. ArithmeticES.100: Don’t mix signed and unsigned arithmeticReasonAvoid wrong results. Exampleint x = -3; unsigned int y = 7; cout &lt;&lt; x - y &lt;&lt; &apos;\n&apos;; // unsigned result, possibly 4294967286 cout &lt;&lt; x + y &lt;&lt; &apos;\n&apos;; // unsigned result: 4 cout &lt;&lt; x * y &lt;&lt; &apos;\n&apos;; // unsigned result, possibly 4294967275 It is harder to spot the problem in more realistic examples. NoteUnfortunately, C++ uses signed integers for array subscripts and the standard library uses unsigned integers for container subscripts.This precludes consistency. Use gsl::index for subscripts; see ES.107. Enforcement Compilers already know and sometimes warn. (To avoid noise) Do not flag on a mixed signed/unsigned comparison where one of the arguments is sizeof or a call to container .size() and the other is ptrdiff_t. ES.101: Use unsigned types for bit manipulationReasonUnsigned types support bit manipulation without surprises from sign bits. Exampleunsigned char x = 0b1010&apos;1010; unsigned char y = ~x; // y == 0b0101&apos;0101; NoteUnsigned types can also be useful for modulo arithmetic.However, if you want modulo arithmetic addcomments as necessary noting the reliance on wraparound behavior, as such codecan be surprising for many programmers. Enforcement Just about impossible in general because of the use of unsigned subscripts in the standard library ??? ES.102: Use signed types for arithmeticReasonBecause most arithmetic is assumed to be signed;x - y yields a negative number when y &gt; x except in the rare cases where you really want modulo arithmetic. ExampleUnsigned arithmetic can yield surprising results if you are not expecting it.This is even more true for mixed signed and unsigned arithmetic. template&lt;typename T, typename T2&gt; T subtract(T x, T2 y) { return x - y; } void test() { int s = 5; unsigned int us = 5; cout &lt;&lt; subtract(s, 7) &lt;&lt; &apos;\n&apos;; // -2 cout &lt;&lt; subtract(us, 7u) &lt;&lt; &apos;\n&apos;; // 4294967294 cout &lt;&lt; subtract(s, 7u) &lt;&lt; &apos;\n&apos;; // -2 cout &lt;&lt; subtract(us, 7) &lt;&lt; &apos;\n&apos;; // 4294967294 cout &lt;&lt; subtract(s, us + 2) &lt;&lt; &apos;\n&apos;; // -2 cout &lt;&lt; subtract(us, s + 2) &lt;&lt; &apos;\n&apos;; // 4294967294 } Here we have been very explicit about what’s happening,but if you had seen us - (s + 2) or s += 2; ...; us - s, would you reliably have suspected that the result would print as 4294967294? ExceptionUse unsigned types if you really want modulo arithmetic - addcomments as necessary noting the reliance on overflow behavior, as such codeis going to be surprising for many programmers. ExampleThe standard library uses unsigned types for subscripts.The built-in array uses signed types for subscripts.This makes surprises (and bugs) inevitable. int a[10]; for (int i = 0; i &lt; 10; ++i) a[i] = i; vector&lt;int&gt; v(10); // compares signed to unsigned; some compilers warn, but we should not for (gsl::index i = 0; i &lt; v.size(); ++i) v[i] = i; int a2[-2]; // error: negative size // OK, but the number of ints (4294967294) is so large that we should get an exception vector&lt;int&gt; v2(-2); Use gsl::index for subscripts; see ES.107. Enforcement Flag mixed signed and unsigned arithmetic Flag results of unsigned arithmetic assigned to or printed as signed. Flag unsigned literals (e.g. -2) used as container subscripts. (To avoid noise) Do not flag on a mixed signed/unsigned comparison where one of the arguments is sizeof or a call to container .size() and the other is ptrdiff_t. ES.103: Don’t overflowReasonOverflow usually makes your numeric algorithm meaningless.Incrementing a value beyond a maximum value can lead to memory corruption and undefined behavior. Example, badint a[10]; a[10] = 7; // bad int n = 0; while (n++ &lt; 10) a[n - 1] = 9; // bad (twice) Example, badint n = numeric_limits&lt;int&gt;::max(); int m = n + 1; // bad Example, badint area(int h, int w) { return h * w; } auto a = area(10&apos;000&apos;000, 100&apos;000&apos;000); // bad ExceptionUse unsigned types if you really want modulo arithmetic. Alternative: For critical applications that can afford some overhead, use a range-checked integer and/or floating-point type. Enforcement??? ES.104: Don’t underflowReasonDecrementing a value beyond a minimum value can lead to memory corruption and undefined behavior. Example, badint a[10]; a[-2] = 7; // bad int n = 101; while (n--) a[n - 1] = 9; // bad (twice) ExceptionUse unsigned types if you really want modulo arithmetic. Enforcement??? ES.105: Don’t divide by zeroReasonThe result is undefined and probably a crash. NoteThis also applies to %. Example; baddouble divide(int a, int b) { // BAD, should be checked (e.g., in a precondition) return a / b; } Example; gooddouble divide(int a, int b) { // good, address via precondition (and replace with contracts once C++ gets them) Expects(b != 0); return a / b; } double divide(int a, int b) { // good, address via check return b ? a / b : quiet_NaN&lt;double&gt;(); } Alternative: For critical applications that can afford some overhead, use a range-checked integer and/or floating-point type. Enforcement Flag division by an integral value that could be zero ES.106: Don’t try to avoid negative values by using unsignedReasonChoosing unsigned implies many changes to the usual behavior of integers, including modulo arithmetic,can suppress warnings related to overflow,and opens the door for errors related to signed/unsigned mixes.Using unsigned doesn’t actually eliminate the possibility of negative values. Exampleunsigned int u1 = -2; // Valid: the value of u1 is 4294967294 int i1 = -2; unsigned int u2 = i1; // Valid: the value of u2 is 4294967294 int i2 = u2; // Valid: the value of i2 is -2 These problems with such (perfectly legal) constructs are hard to spot in real code and are the source of many real-world errors.Consider: unsigned area(unsigned height, unsigned width) { return height*width; } // [see also](#Ri-expects) // ... int height; cin &gt;&gt; height; auto a = area(height, 2); // if the input is -2 a becomes 4294967292 Remember that -1 when assigned to an unsigned int becomes the largest unsigned int.Also, since unsigned arithmetic is modulo arithmetic the multiplication didn’t overflow, it wrapped around. Exampleunsigned max = 100000; // &quot;accidental typo&quot;, I mean to say 10&apos;000 unsigned short x = 100; while (x &lt; max) x += 100; // infinite loop Had x been a signed short, we could have warned about the undefined behavior upon overflow. Alternatives use signed integers and check for x &gt;= 0 use a positive integer type use an integer subrange type Assert(-1 &lt; x) For example struct Positive { int val; Positive(int x) :val{x} { Assert(0 &lt; x); } operator int() { return val; } }; int f(Positive arg) { return arg; } int r1 = f(2); int r2 = f(-2); // throws Note??? EnforcementHard: there is a lot of code using unsigned and we don’t offer a practical positive number type. ES.107: Don’t use unsigned for subscripts, prefer gsl::indexReasonTo avoid signed/unsigned confusion.To enable better optimization.To enable better error detection.To avoid the pitfalls with auto and int. Example, badvector&lt;int&gt; vec = /*...*/; for (int i = 0; i &lt; vec.size(); i += 2) // may not be big enough cout &lt;&lt; vec[i] &lt;&lt; &apos;\n&apos;; for (unsigned i = 0; i &lt; vec.size(); i += 2) // risk wraparound cout &lt;&lt; vec[i] &lt;&lt; &apos;\n&apos;; for (auto i = 0; i &lt; vec.size(); i += 2) // may not be big enough cout &lt;&lt; vec[i] &lt;&lt; &apos;\n&apos;; for (vector&lt;int&gt;::size_type i = 0; i &lt; vec.size(); i += 2) // verbose cout &lt;&lt; vec[i] &lt;&lt; &apos;\n&apos;; for (auto i = vec.size()-1; i &gt;= 0; i -= 2) // bug cout &lt;&lt; vec[i] &lt;&lt; &apos;\n&apos;; for (int i = vec.size()-1; i &gt;= 0; i -= 2) // may not be big enough cout &lt;&lt; vec[i] &lt;&lt; &apos;\n&apos;; Example, goodvector&lt;int&gt; vec = /*...*/; for (gsl::index i = 0; i &lt; vec.size(); i += 2) // ok cout &lt;&lt; vec[i] &lt;&lt; &apos;\n&apos;; for (gsl::index i = vec.size()-1; i &gt;= 0; i -= 2) // ok cout &lt;&lt; vec[i] &lt;&lt; &apos;\n&apos;; NoteThe built-in array uses signed subscripts.The standard-library containers use unsigned subscripts.Thus, no perfect and fully compatible solution is possible (unless and until the standard-library containers change to use signed subscripts someday in the future).Given the known problems with unsigned and signed/unsigned mixtures, better stick to (signed) integers of a sufficient size, which is guaranteed by gsl::index. Exampletemplate&lt;typename T&gt; struct My_container { public: // ... T&amp; operator[](gsl::index i); // not unsigned // ... }; Example??? demonstrate improved code generation and potential for error detection ??? AlternativesAlternatives for users use algorithms use range-for use iterators/pointers Enforcement Very tricky as long as the standard-library containers get it wrong. (To avoid noise) Do not flag on a mixed signed/unsigned comparison where one of the arguments is sizeof or a call to container .size() and the other is ptrdiff_t. Per: Performance??? should this section be in the main guide??? This section contains rules for people who need high performance or low-latency.That is, these are rules that relate to how to use as little time and as few resources as possible to achieve a task in a predictably short time.The rules in this section are more restrictive and intrusive than what is needed for many (most) applications.Do not blindly try to follow them in general code: achieving the goals of low latency requires extra work. Performance rule summary: Per.1: Don’t optimize without reason Per.2: Don’t optimize prematurely Per.3: Don’t optimize something that’s not performance critical Per.4: Don’t assume that complicated code is necessarily faster than simple code Per.5: Don’t assume that low-level code is necessarily faster than high-level code Per.6: Don’t make claims about performance without measurements Per.7: Design to enable optimization Per.10: Rely on the static type system Per.11: Move computation from run time to compile time Per.12: Eliminate redundant aliases Per.13: Eliminate redundant indirections Per.14: Minimize the number of allocations and deallocations Per.15: Do not allocate on a critical branch Per.16: Use compact data structures Per.17: Declare the most used member of a time-critical struct first Per.18: Space is time Per.19: Access memory predictably Per.30: Avoid context switches on the critical path Per.1: Don’t optimize without reasonReasonIf there is no need for optimization, the main result of the effort will be more errors and higher maintenance costs. NoteSome people optimize out of habit or because it’s fun. ??? Per.2: Don’t optimize prematurelyReasonElaborately optimized code is usually larger and harder to change than unoptimized code. ??? Per.3: Don’t optimize something that’s not performance criticalReasonOptimizing a non-performance-critical part of a program has no effect on system performance. NoteIf your program spends most of its time waiting for the web or for a human, optimization of in-memory computation is probably useless. Put another way: If your program spends 4% of its processing time doingcomputation A and 40% of its time doing computation B, a 50% improvement on A isonly as impactful as a 5% improvement on B. (If you don’t even know how muchtime is spent on A or B, see Per.1 and Per.2.) Per.4: Don’t assume that complicated code is necessarily faster than simple codeReasonSimple code can be very fast. Optimizers sometimes do marvels with simple code Example, good// clear expression of intent, fast execution vector&lt;uint8_t&gt; v(100000); for (auto&amp; c : v) c = ~c; Example, bad// intended to be faster, but is actually slower vector&lt;uint8_t&gt; v(100000); for (size_t i = 0; i &lt; v.size(); i += sizeof(uint64_t)) { uint64_t&amp; quad_word = *reinterpret_cast&lt;uint64_t*&gt;(&amp;v[i]); quad_word = ~quad_word; } Note??? ??? Per.5: Don’t assume that low-level code is necessarily faster than high-level codeReasonLow-level code sometimes inhibits optimizations. Optimizers sometimes do marvels with high-level code. Note??? ??? Per.6: Don’t make claims about performance without measurementsReasonThe field of performance is littered with myth and bogus folklore.Modern hardware and optimizers defy naive assumptions; even experts are regularly surprised. NoteGetting good performance measurements can be hard and require specialized tools. NoteA few simple microbenchmarks using Unix time or the standard-library &lt;chrono&gt; can help dispel the most obvious myths.If you can’t measure your complete system accurately, at least try to measure a few of your key operations and algorithms.A profiler can help tell you which parts of your system are performance critical.Often, you will be surprised. ??? Per.7: Design to enable optimizationReasonBecause we often need to optimize the initial design.Because a design that ignore the possibility of later improvement is hard to change. ExampleFrom the C (and C++) standard: void qsort (void* base, size_t num, size_t size, int (*compar)(const void*, const void*)); When did you even want to sort memory?Really, we sort sequences of elements, typically stored in containers.A call to qsort throws away much useful information (e.g., the element type), forces the user to repeat informationalready known (e.g., the element size), and forces the user to write extra code (e.g., a function to compare doubles).This implies added work for the programmer, is error-prone, and deprives the compiler of information needed for optimization. double data[100]; // ... fill a ... // 100 chunks of memory of sizeof(double) starting at // address data using the order defined by compare_doubles qsort(data, 100, sizeof(double), compare_doubles); From the point of view of interface design is that qsort throws away useful information. We can do better (in C++98) template&lt;typename Iter&gt; void sort(Iter b, Iter e); // sort [b:e) sort(data, data + 100); Here, we use the compiler’s knowledge about the size of the array, the type of elements, and how to compare doubles. With C++11 plus concepts, we can do better still // Sortable specifies that c must be a // random-access sequence of elements comparable with &lt; void sort(Sortable&amp; c); sort(c); The key is to pass sufficient information for a good implementation to be chosen.In this, the sort interfaces shown here still have a weakness:They implicitly rely on the element type having less-than (&lt;) defined.To complete the interface, we need a second version that accepts a comparison criteria: // compare elements of c using p void sort(Sortable&amp; c, Predicate&lt;Value_type&lt;Sortable&gt;&gt; p); The standard-library specification of sort offers those two versions,but the semantics is expressed in English rather than code using concepts. NotePremature optimization is said to be the root of all evil, but that’s not a reason to despise performance.It is never premature to consider what makes a design amenable to improvement, and improved performance is a commonly desired improvement.Aim to build a set of habits that by default results in efficient, maintainable, and optimizable code.In particular, when you write a function that is not a one-off implementation detail, consider Information passing:Prefer clean interfaces carrying sufficient information for later improvement of implementation.Note that information flows into and out of an implementation through the interfaces we provide. Compact data: By default, use compact data, such as std::vector and access it in a systematic fashion.If you think you need a linked structure, try to craft the interface so that this structure isn’t seen by users. Function argument passing and return:Distinguish between mutable and non-mutable data.Don’t impose a resource management burden on your users.Don’t impose spurious run-time indirections on your users.Use conventional ways of passing information through an interface;unconventional and/or “optimized” ways of passing data can seriously complicate later reimplementation. Abstraction:Don’t overgeneralize; a design that tries to cater for every possible use (and misuse) and defers every design decision for later(using compile-time or run-time indirections) is usually a complicated, bloated, hard-to-understand mess.Generalize from concrete examples, preserving performance as we generalize.Do not generalize based on mere speculation about future needs.The ideal is zero-overhead generalization. Libraries:Use libraries with good interfaces.If no library is available build one yourself and imitate the interface style from a good library.The standard library is a good first place to look for inspiration. Isolation:Isolate your code from messy and/or old-style code by providing an interface of your choosing to it.This is sometimes called “providing a wrapper” for the useful/necessary but messy code.Don’t let bad designs “bleed into” your code. ExampleConsider: template &lt;class ForwardIterator, class T&gt; bool binary_search(ForwardIterator first, ForwardIterator last, const T&amp; val); binary_search(begin(c), end(c), 7) will tell you whether 7 is in c or not.However, it will not tell you where that 7 is or whether there are more than one 7. Sometimes, just passing the minimal amount of information back (here, true or false) is sufficient, but a good interface passesneeded information back to the caller. Therefore, the standard library also offers template &lt;class ForwardIterator, class T&gt; ForwardIterator lower_bound(ForwardIterator first, ForwardIterator last, const T&amp; val); lower_bound returns an iterator to the first match if any, otherwise to the first element greater than val, or last if no such element is found. However, lower_bound still doesn’t return enough information for all uses, so the standard library also offers template &lt;class ForwardIterator, class T&gt; pair&lt;ForwardIterator, ForwardIterator&gt; equal_range(ForwardIterator first, ForwardIterator last, const T&amp; val); equal_range returns a pair of iterators specifying the first and one beyond last match. auto r = equal_range(begin(c), end(c), 7); for (auto p = r.first(); p != r.second(), ++p) cout &lt;&lt; *p &lt;&lt; &apos;\n&apos;; Obviously, these three interfaces are implemented by the same basic code.They are simply three ways of presenting the basic binary search algorithm to users,ranging from the simplest (“make simple things simple!”)to returning complete, but not always needed, information (“don’t hide useful information”).Naturally, crafting such a set of interfaces requires experience and domain knowledge. NoteDo not simply craft the interface to match the first implementation and the first use case you think of.Once your first initial implementation is complete, review it; once you deploy it, mistakes will be hard to remedy. NoteA need for efficiency does not imply a need for low-level code.High-level code does not imply slow or bloated. NoteThings have costs.Don’t be paranoid about costs (modern computers really are very fast),but have a rough idea of the order of magnitude of cost of what you use.For example, have a rough idea of the cost ofa memory access,a function call,a string comparison,a system call,a disk access,and a message through a network. NoteIf you can only think of one implementation, you probably don’t have something for which you can devise a stable interface.Maybe, it is just an implementation detail - not every piece of code needs a stable interface - but pause and consider.One question that can be useful is“what interface would be needed if this operation should be implemented using multiple threads? be vectorized?” NoteThis rule does not contradict the Don’t optimize prematurely rule.It complements it encouraging developers enable later - appropriate and non-premature - optimization, if and where needed. EnforcementTricky.Maybe looking for void* function arguments will find examples of interfaces that hinder later optimization. Per.10: Rely on the static type systemReasonType violations, weak types (e.g. void*s), and low-level code (e.g., manipulation of sequences as individual bytes) make the job of the optimizer much harder. Simple code often optimizes better than hand-crafted complex code. ??? Per.11: Move computation from run time to compile timeReasonTo decrease code size and run time.To avoid data races by using constants.To catch errors at compile time (and thus eliminate the need for error-handling code). Exampledouble square(double d) { return d*d; } static double s2 = square(2); // old-style: dynamic initialization constexpr double ntimes(double d, int n) // assume 0 &lt;= n { double m = 1; while (n--) m *= d; return m; } constexpr double s3 {ntimes(2, 3)}; // modern-style: compile-time initialization Code like the initialization of s2 isn’t uncommon, especially for initialization that’s a bit more complicated than square().However, compared to the initialization of s3 there are two problems: we suffer the overhead of a function call at run time s2 just might be accessed by another thread before the initialization happens. Note: you can’t have a data race on a constant. ExampleConsider a popular technique for providing a handle for storing small objects in the handle itself and larger ones on the heap. constexpr int on_stack_max = 20; template&lt;typename T&gt; struct Scoped { // store a T in Scoped // ... T obj; }; template&lt;typename T&gt; struct On_heap { // store a T on the free store // ... T* objp; }; template&lt;typename T&gt; using Handle = typename std::conditional&lt;(sizeof(T) &lt;= on_stack_max), Scoped&lt;T&gt;, // first alternative On_heap&lt;T&gt; // second alternative &gt;::type; void f() { Handle&lt;double&gt; v1; // the double goes on the stack Handle&lt;std::array&lt;double, 200&gt;&gt; v2; // the array goes on the free store // ... } Assume that Scoped and On_heap provide compatible user interfaces.Here we compute the optimal type to use at compile time.There are similar techniques for selecting the optimal function to call. NoteThe ideal is {not} to try execute everything at compile time.Obviously, most computations depend on inputs so they can’t be moved to compile time,but beyond that logical constraint is the fact that complex compile-time computation can seriously increase compile timesand complicate debugging.It is even possible to slow down code by compile-time computation.This is admittedly rare, but by factoring out a general computation into separate optimal sub-calculations it is possible to render the instruction cache less effective. Enforcement Look for simple functions that might be constexpr (but are not). Look for functions called with all constant-expression arguments. Look for macros that could be constexpr. Per.12: Eliminate redundant aliases??? Per.13: Eliminate redundant indirections??? Per.14: Minimize the number of allocations and deallocations??? Per.15: Do not allocate on a critical branch??? Per.16: Use compact data structuresReasonPerformance is typically dominated by memory access times. ??? Per.17: Declare the most used member of a time-critical struct first??? Per.18: Space is timeReasonPerformance is typically dominated by memory access times. ??? Per.19: Access memory predictablyReasonPerformance is very sensitive to cache performance and cache algorithms favor simple (usually linear) access to adjacent data. Exampleint matrix[rows][cols]; // bad for (int c = 0; c &lt; cols; ++c) for (int r = 0; r &lt; rows; ++r) sum += matrix[r][c]; // good for (int r = 0; r &lt; rows; ++r) for (int c = 0; c &lt; cols; ++c) sum += matrix[r][c]; Per.30: Avoid context switches on the critical path??? CP: Concurrency and parallelismWe often want our computers to do many tasks at the same time (or at least make them appear to do them at the same time).The reasons for doing so varies (e.g., wanting to wait for many events using only a single processor, processing many data streams simultaneously, or utilizing many hardware facilities)and so does the basic facilities for expressing concurrency and parallelism.Here, we articulate a few general principles and rules for using the ISO standard C++ facilities for expressing basic concurrency and parallelism. The core machine support for concurrent and parallel programming is the thread.Threads allow you to run multiple instances of your program independently, while sharingthe same memory. Concurrent programming is tricky for many reasons, mostimportantly that it is undefined behavior to read data in one thread after itwas written by another thread, if there is no proper synchronization betweenthose threads. Making existing single-threaded code execute concurrently can beas trivial as adding std::async or std::thread strategically, or it cannecessitate a full rewrite, depending on whether the original code was writtenin a thread-friendly way. The concurrency/parallelism rules in this document are designed with three goalsin mind: To help you write code that is amenable to being used in a threadedenvironment To show clean, safe ways to use the threading primitives offered by thestandard library To offer guidance on what to do when concurrency and parallelism aren’t givingyou the performance gains you need It is also important to note that concurrency in C++ is an unfinishedstory. C++11 introduced many core concurrency primitives, C++14 improved onthem, and it seems that there is much interest in making the writing ofconcurrent programs in C++ even easier. We expect some of the library-relatedguidance here to change significantly over time. This section needs a lot of work (obviously).Please note that we start with rules for relative non-experts.Real experts must wait a bit;contributions are welcome,but please think about the majority of programmers who are struggling to get their concurrent programs correct and performant. Concurrency and parallelism rule summary: CP.1: Assume that your code will run as part of a multi-threaded program CP.2: Avoid data races CP.3: Minimize explicit sharing of writable data CP.4: Think in terms of tasks, rather than threads CP.8: Don’t try to use volatile for synchronization CP.9: Whenever feasible use tools to validate your concurrent code See also: CP.con: Concurrency CP.par: Parallelism CP.mess: Message passing CP.vec: Vectorization CP.free: Lock-free programming CP.etc: Etc. concurrency rules CP.1: Assume that your code will run as part of a multi-threaded programReasonIt is hard to be certain that concurrency isn’t used now or will be sometime in the future.Code gets reused.Libraries using threads may be used from some other part of the program.Note that this applies most urgently to library code and least urgently to stand-alone applications.However, thanks to the magic of cut-and-paste, code fragments can turn up in unexpected places. Exampledouble cached_computation(double x) { static double cached_x = 0.0; static double cached_result = COMPUTATION_OF_ZERO; double result; if (cached_x == x) return cached_result; result = computation(x); cached_x = x; cached_result = result; return result; } Although cached_computation works perfectly in a single-threaded environment, in a multi-threaded environment the two static variables result in data races and thus undefined behavior. There are several ways that this example could be made safe for a multi-threaded environment: Delegate concurrency concerns upwards to the caller. Mark the static variables as thread_local (which might make caching less effective). Implement concurrency control, for example, protecting the two static variables with a static lock (which might reduce performance). Have the caller provide the memory to be used for the cache, thereby delegating both memory allocation and concurrency concerns upwards to the caller. Refuse to build and/or run in a multi-threaded environment. Provide two implementations, one which is used in single-threaded environments and another which is used in multi-threaded environments. ExceptionCode that is never run in a multi-threaded environment. Be careful: there are many examples where code that was “known” to never run in a multi-threaded programwas run as part of a multi-threaded program. Often years later.Typically, such programs lead to a painful effort to remove data races.Therefore, code that is never intended to run in a multi-threaded environment should be clearly labeled as such and ideally come with compile or run-time enforcement mechanisms to catch those usage bugs early. CP.2: Avoid data racesReasonUnless you do, nothing is guaranteed to work and subtle errors will persist. NoteIn a nutshell, if two threads can access the same object concurrently (without synchronization), and at least one is a writer (performing a non-const operation), you have a data race.For further information of how to use synchronization well to eliminate data races, please consult a good book about concurrency. Example, badThere are many examples of data races that exist, some of which are running inproduction software at this very moment. One very simple example: int get_id() { static int id = 1; return id++; } The increment here is an example of a data race. This can go wrong in many ways,including: Thread A loads the value of id, the OS context switches A out for someperiod, during which other threads create hundreds of IDs. Thread A is thenallowed to run again, and id is written back to that location as A’s read ofid plus one. Thread A and B load id and increment it simultaneously. They both get thesame ID. Local static variables are a common source of data races. Example, bad:void f(fstream&amp; fs, regex pat) { array&lt;double, max&gt; buf; int sz = read_vec(fs, buf, max); // read from fs into buf gsl::span&lt;double&gt; s {buf}; // ... auto h1 = async([&amp;]{ sort(par, s); }); // spawn a task to sort // ... auto h2 = async([&amp;]{ return find_all(buf, sz, pat); }); // spawn a task to find matches // ... } Here, we have a (nasty) data race on the elements of buf (sort will both read and write).All data races are nasty.Here, we managed to get a data race on data on the stack.Not all data races are as easy to spot as this one. Example, bad:// code not controlled by a lock unsigned val; if (val &lt; 5) { // ... other thread can change val here ... switch (val) { case 0: // ... case 1: // ... case 2: // ... case 3: // ... case 4: // ... } } Now, a compiler that does not know that val can change will most likely implement that switch using a jump table with five entries.Then, a val outside the [0..4] range will cause a jump to an address that could be anywhere in the program, and execution would proceed there.Really, “all bets are off” if you get a data race.Actually, it can be worse still: by looking at the generated code you may be able to determine where the stray jump will go for a given value;this can be a security risk. EnforcementSome is possible, do at least something.There are commercial and open-source tools that try to address this problem,but be aware that solutions have costs and blind spots.Static tools often have many false positives and run-time tools often have a significant cost.We hope for better tools.Using multiple tools can catch more problems than a single one. There are other ways you can mitigate the chance of data races: Avoid global data Avoid static variables More use of value types on the stack (and don’t pass pointers around too much) More use of immutable data (literals, constexpr, and const) CP.3: Minimize explicit sharing of writable dataReasonIf you don’t share writable data, you can’t have a data race.The less sharing you do, the less chance you have to forget to synchronize access (and get data races).The less sharing you do, the less chance you have to wait on a lock (so performance can improve). Examplebool validate(const vector&lt;Reading&gt;&amp;); Graph&lt;Temp_node&gt; temperature_gradiants(const vector&lt;Reading&gt;&amp;); Image altitude_map(const vector&lt;Reading&gt;&amp;); // ... void process_readings(const vector&lt;Reading&gt;&amp; surface_readings) { auto h1 = async([&amp;] { if (!validate(surface_readings)) throw Invalid_data{}; }); auto h2 = async([&amp;] { return temperature_gradiants(surface_readings); }); auto h3 = async([&amp;] { return altitude_map(surface_readings); }); // ... h1.get(); auto v2 = h2.get(); auto v3 = h3.get(); // ... } Without those consts, we would have to review every asynchronously invoked function for potential data races on surface_readings.Making surface_readings be const (with respect to this function) allow reasoning using only the function body. NoteImmutable data can be safely and efficiently shared.No locking is needed: You can’t have a data race on a constant.See also CP.mess: Message Passing and CP.31: prefer pass by value. Enforcement??? CP.4: Think in terms of tasks, rather than threadsReasonA thread is an implementation concept, a way of thinking about the machine.A task is an application notion, something you’d like to do, preferably concurrently with other tasks.Application concepts are easier to reason about. Examplevoid some_fun() { std::string msg, msg2; std::thread publisher([&amp;] { msg = &quot;Hello&quot;; }); // bad: less expressive // and more error-prone auto pubtask = std::async([&amp;] { msg2 = &quot;Hello&quot;; }); // OK // ... publisher.join(); } NoteWith the exception of async(), the standard-library facilities are low-level, machine-oriented, threads-and-lock level.This is a necessary foundation, but we have to try to raise the level of abstraction: for productivity, for reliability, and for performance.This is a potent argument for using higher level, more applications-oriented libraries (if possibly, built on top of standard-library facilities). Enforcement??? CP.8: Don’t try to use volatile for synchronizationReasonIn C++, unlike some other languages, volatile does not provide atomicity, does not synchronize between threads,and does not prevent instruction reordering (neither compiler nor hardware).It simply has nothing to do with concurrency. Example, bad:int free_slots = max_slots; // current source of memory for objects Pool* use() { if (int n = free_slots--) return &amp;pool[n]; } Here we have a problem:This is perfectly good code in a single-threaded program, but have two threads execute this andthere is a race condition on free_slots so that two threads might get the same value and free_slots.That’s (obviously) a bad data race, so people trained in other languages may try to fix it like this: volatile int free_slots = max_slots; // current source of memory for objects Pool* use() { if (int n = free_slots--) return &amp;pool[n]; } This has no effect on synchronization: The data race is still there! The C++ mechanism for this is atomic types: atomic&lt;int&gt; free_slots = max_slots; // current source of memory for objects Pool* use() { if (int n = free_slots--) return &amp;pool[n]; } Now the -- operation is atomic,rather than a read-increment-write sequence where another thread might get in-between the individual operations. AlternativeUse atomic types where you might have used volatile in some other language.Use a mutex for more complicated examples. See also(rare) proper uses of volatile CP.9: Whenever feasible use tools to validate your concurrent codeExperience shows that concurrent code is exceptionally hard to get rightand that compile-time checking, run-time checks, and testing are less effective at finding concurrency errorsthan they are at finding errors in sequential code.Subtle concurrency errors can have dramatically bad effects, including memory corruption and deadlocks. Example??? NoteThread safety is challenging, often getting the better of experienced programmers: tooling is an important strategy to mitigate those risks.There are many tools “out there”, both commercial and open-source tools, both research and production tools.Unfortunately people’s needs and constraints differ so dramatically that we cannot make specific recommendations,but we can mention: Static enforcement tools: both clangand some older versions of GCChave some support for static annotation of thread safety properties.Consistent use of this technique turns many classes of thread-safety errors into compile-time errors.The annotations are generally local (marking a particular member variable as guarded by a particular mutex),and are usually easy to learn. However, as with many static tools, it can often present false negatives;cases that should have been caught but were allowed. dynamic enforcement tools: Clang’s Thread Sanitizer (aka TSAN)is a powerful example of dynamic tools: it changes the build and execution of your program to add bookkeeping on memory access,absolutely identifying data races in a given execution of your binary.The cost for this is both memory (5-10x in most cases) and CPU slowdown (2-20x).Dynamic tools like this are best when applied to integration tests, canary pushes, or unittests that operate on multiple threads.Workload matters: When TSAN identifies a problem, it is effectively always an actual data race,but it can only identify races seen in a given execution. EnforcementIt is up to an application builder to choose which support tools are valuable for a particular applications. CP.con: ConcurrencyThis section focuses on relatively ad-hoc uses of multiple threads communicating through shared data. For parallel algorithms, see parallelism For inter-task communication without explicit sharing, see messaging For vector parallel code, see vectorization For lock-free programming, see lock free Concurrency rule summary: CP.20: Use RAII, never plain lock()/unlock() CP.21: Use std::lock() or std::scoped_lock to acquire multiple mutexes CP.22: Never call unknown code while holding a lock (e.g., a callback) CP.23: Think of a joining thread as a scoped container CP.24: Think of a thread as a global container CP.25: Prefer gsl::joining_thread over std::thread CP.26: Don’t detach() a thread CP.31: Pass small amounts of data between threads by value, rather than by reference or pointer CP.32: To share ownership between unrelated threads use shared_ptr CP.40: Minimize context switching CP.41: Minimize thread creation and destruction CP.42: Don’t wait without a condition CP.43: Minimize time spent in a critical section CP.44: Remember to name your lock_guards and unique_locks CP.50: Define a mutex together with the data it guards. Use synchronized_value&lt;T&gt; where possible ??? when to use a spinlock ??? when to use try_lock() ??? when to prefer lock_guard over unique_lock ??? Time multiplexing ??? when/how to use new thread CP.20: Use RAII, never plain lock()/unlock()ReasonAvoids nasty errors from unreleased locks. Example, badmutex mtx; void do_stuff() { mtx.lock(); // ... do stuff ... mtx.unlock(); } Sooner or later, someone will forget the mtx.unlock(), place a return in the ... do stuff ..., throw an exception, or something. mutex mtx; void do_stuff() { unique_lock&lt;mutex&gt; lck {mtx}; // ... do stuff ... } EnforcementFlag calls of member lock() and unlock(). ??? CP.21: Use std::lock() or std::scoped_lock to acquire multiple mutexesReasonTo avoid deadlocks on multiple mutexes. ExampleThis is asking for deadlock: // thread 1 lock_guard&lt;mutex&gt; lck1(m1); lock_guard&lt;mutex&gt; lck2(m2); // thread 2 lock_guard&lt;mutex&gt; lck2(m2); lock_guard&lt;mutex&gt; lck1(m1); Instead, use lock(): // thread 1 lock(m1, m2); lock_guard&lt;mutex&gt; lck1(m1, adopt_lock); lock_guard&lt;mutex&gt; lck2(m2, adopt_lock); // thread 2 lock(m2, m1); lock_guard&lt;mutex&gt; lck2(m2, adopt_lock); lock_guard&lt;mutex&gt; lck1(m1, adopt_lock); or (better, but C++17 only): // thread 1 scoped_lock&lt;mutex, mutex&gt; lck1(m1, m2); // thread 2 scoped_lock&lt;mutex, mutex&gt; lck2(m2, m1); Here, the writers of thread1 and thread2 are still not agreeing on the order of the mutexes, but order no longer matters. NoteIn real code, mutexes are rarely named to conveniently remind the programmer of an intended relation and intended order of acquisition.In real code, mutexes are not always conveniently acquired on consecutive lines. In C++17 it’s possible to write plain lock_guard lck1(m1, adopt_lock); and have the mutex type deduced. EnforcementDetect the acquisition of multiple mutexes.This is undecidable in general, but catching common simple examples (like the one above) is easy. CP.22: Never call unknown code while holding a lock (e.g., a callback)ReasonIf you don’t know what a piece of code does, you are risking deadlock. Examplevoid do_this(Foo* p) { lock_guard&lt;mutex&gt; lck {my_mutex}; // ... do something ... p-&gt;act(my_data); // ... } If you don’t know what Foo::act does (maybe it is a virtual function invoking a derived class member of a class not yet written),it may call do_this (recursively) and cause a deadlock on my_mutex.Maybe it will lock on a different mutex and not return in a reasonable time, causing delays to any code calling do_this. ExampleA common example of the “calling unknown code” problem is a call to a function that tries to gain locked access to the same object.Such problem can often be solved by using a recursive_mutex. For example: recursive_mutex my_mutex; template&lt;typename Action&gt; void do_something(Action f) { unique_lock&lt;recursive_mutex&gt; lck {my_mutex}; // ... do something ... f(this); // f will do something to *this // ... } If, as it is likely, f() invokes operations on *this, we must make sure that the object’s invariant holds before the call. Enforcement Flag calling a virtual function with a non-recursive mutex held Flag calling a callback with a non-recursive mutex held CP.23: Think of a joining thread as a scoped containerReasonTo maintain pointer safety and avoid leaks, we need to consider what pointers are used by a thread.If a thread joins, we can safely pass pointers to objects in the scope of the thread and its enclosing scopes. Examplevoid f(int* p) { // ... *p = 99; // ... } int glob = 33; void some_fct(int* p) { int x = 77; joining_thread t0(f, &amp;x); // OK joining_thread t1(f, p); // OK joining_thread t2(f, &amp;glob); // OK auto q = make_unique&lt;int&gt;(99); joining_thread t3(f, q.get()); // OK // ... } A gsl::joining_thread is a std::thread with a destructor that joins and that cannot be detached().By “OK” we mean that the object will be in scope (“live”) for as long as a thread can use the pointer to it.The fact that threads run concurrently doesn’t affect the lifetime or ownership issues here;these threads can be seen as just a function object called from some_fct. EnforcementEnsure that joining_threads don’t detach().After that, the usual lifetime and ownership (for local objects) enforcement applies. CP.24: Think of a thread as a global containerReasonTo maintain pointer safety and avoid leaks, we need to consider what pointers are used by a thread.If a thread is detached, we can safely pass pointers to static and free store objects (only). Examplevoid f(int* p) { // ... *p = 99; // ... } int glob = 33; void some_fct(int* p) { int x = 77; std::thread t0(f, &amp;x); // bad std::thread t1(f, p); // bad std::thread t2(f, &amp;glob); // OK auto q = make_unique&lt;int&gt;(99); std::thread t3(f, q.get()); // bad // ... t0.detach(); t1.detach(); t2.detach(); t3.detach(); // ... } By “OK” we mean that the object will be in scope (“live”) for as long as a thread can use the pointers to it.By “bad” we mean that a thread may use a pointer after the pointed-to object is destroyed.The fact that threads run concurrently doesn’t affect the lifetime or ownership issues here;these threads can be seen as just a function object called from some_fct. NoteEven objects with static storage duration can be problematic if used from detached threads: if thethread continues until the end of the program, it might be running concurrently with the destructionof objects with static storage duration, and thus accesses to such objects might race. NoteThis rule is redundant if you don’t detach() and use gsl::joining_thread.However, converting code to follow those guidelines could be difficult and even impossible for third-party libraries.In such cases, the rule becomes essential for lifetime safety and type safety. In general, it is undecidable whether a detach() is executed for a thread, but simple common cases are easily detected.If we cannot prove that a thread does not detach(), we must assume that it does and that it outlives the scope in which it was constructed;After that, the usual lifetime and ownership (for global objects) enforcement applies. EnforcementFlag attempts to pass local variables to a thread that might detach(). CP.25: Prefer gsl::joining_thread over std::threadReasonA joining_thread is a thread that joins at the end of its scope.Detached threads are hard to monitor.It is harder to ensure absence of errors in detached threads (and potentially detached threads) Example, badvoid f() { std::cout &lt;&lt; &quot;Hello &quot;; } struct F { void operator()() { std::cout &lt;&lt; &quot;parallel world &quot;; } }; int main() { std::thread t1{f}; // f() executes in separate thread std::thread t2{F()}; // F()() executes in separate thread } // spot the bugs Examplevoid f() { std::cout &lt;&lt; &quot;Hello &quot;; } struct F { void operator()() { std::cout &lt;&lt; &quot;parallel world &quot;; } }; int main() { std::thread t1{f}; // f() executes in separate thread std::thread t2{F()}; // F()() executes in separate thread t1.join(); t2.join(); } // one bad bug left Example, badThe code determining whether to join() or detach() may be complicated and even decided in the thread of functions called from it or functions called by the function that creates a thread: void tricky(thread* t, int n) { // ... if (is_odd(n)) t-&gt;detach(); // ... } void use(int n) { thread t { tricky, this, n }; // ... // ... should I join here? ... } This seriously complicates lifetime analysis, and in not too unlikely cases makes lifetime analysis impossible.This implies that we cannot safely refer to local objects in use() from the thread or refer to local objects in the thread from use(). NoteMake “immortal threads” globals, put them in an enclosing scope, or put them on the free store rather than detach().don’t detach. NoteBecause of old code and third party libraries using std::thread this rule can be hard to introduce. EnforcementFlag uses of std::thread: Suggest use of gsl::joining_thread. Suggest “exporting ownership” to an enclosing scope if it detaches. Seriously warn if it is not obvious whether if joins of detaches. CP.26: Don’t detach() a threadReasonOften, the need to outlive the scope of its creation is inherent in the threads task,but implementing that idea by detach makes it harder to monitor and communicate with the detached thread.In particular, it is harder (though not impossible) to ensure that the thread completed as expected or lives for as long as expected. Examplevoid heartbeat(); void use() { std::thread t(heartbeat); // don&apos;t join; heartbeat is meant to run forever t.detach(); // ... } This is a reasonable use of a thread, for which detach() is commonly used.There are problems, though.How do we monitor the detached thread to see if it is alive?Something might go wrong with the heartbeat, and losing a heartbeat can be very serious in a system for which it is needed.So, we need to communicate with the heartbeat thread(e.g., through a stream of messages or notification events using a condition_variable). An alternative, and usually superior solution is to control its lifetime by placing it in a scope outside its point of creation (or activation).For example: void heartbeat(); gsl::joining_thread t(heartbeat); // heartbeat is meant to run &quot;forever&quot; This heartbeat will (barring error, hardware problems, etc.) run for as long as the program does. Sometimes, we need to separate the point of creation from the point of ownership: void heartbeat(); unique_ptr&lt;gsl::joining_thread&gt; tick_tock {nullptr}; void use() { // heartbeat is meant to run as long as tick_tock lives tick_tock = make_unique&lt;gsl::joining_thread&gt;(heartbeat); // ... } EnforcementFlag detach(). CP.31: Pass small amounts of data between threads by value, rather than by reference or pointerReasonCopying a small amount of data is cheaper to copy and access than to share it using some locking mechanism.Copying naturally gives unique ownership (simplifies code) and eliminates the possibility of data races. NoteDefining “small amount” precisely is impossible. Examplestring modify1(string); void modify2(string&amp;); void fct(string&amp; s) { auto res = async(modify1, s); async(modify2, s); } The call of modify1 involves copying two string values; the call of modify2 does not.On the other hand, the implementation of modify1 is exactly as we would have written it for single-threaded code,whereas the implementation of modify2 will need some form of locking to avoid data races.If the string is short (say 10 characters), the call of modify1 can be surprisingly fast;essentially all the cost is in the thread switch. If the string is long (say 1,000,000 characters), copying it twiceis probably not a good idea. Note that this argument has nothing to do with async as such. It applies equally to considerations about whether to usemessage passing or shared memory. Enforcement??? CP.32: To share ownership between unrelated threads use shared_ptrReasonIf threads are unrelated (that is, not known to be in the same scope or one within the lifetime of the other)and they need to share free store memory that needs to be deleted, a shared_ptr (or equivalent) is the onlysafe way to ensure proper deletion. Example??? Note A static object (e.g. a global) can be shared because it is not owned in the sense that some thread is responsible for its deletion. An object on free store that is never to be deleted can be shared. An object owned by one thread can be safely shared with another as long as that second thread doesn’t outlive the owner. Enforcement??? CP.40: Minimize context switchingReasonContext switches are expensive. Example??? Enforcement??? CP.41: Minimize thread creation and destructionReasonThread creation is expensive. Examplevoid worker(Message m) { // process } void master(istream&amp; is) { for (Message m; is &gt;&gt; m; ) run_list.push_back(new thread(worker, m)); } This spawns a thread per message, and the run_list is presumably managed to destroy those tasks once they are finished. Instead, we could have a set of pre-created worker threads processing the messages Sync_queue&lt;Message&gt; work; void master(istream&amp; is) { for (Message m; is &gt;&gt; m; ) work.put(m); } void worker() { for (Message m; m = work.get(); ) { // process } } void workers() // set up worker threads (specifically 4 worker threads) { joining_thread w1 {worker}; joining_thread w2 {worker}; joining_thread w3 {worker}; joining_thread w4 {worker}; } NoteIf your system has a good thread pool, use it.If your system has a good message queue, use it. Enforcement??? CP.42: Don’t wait without a conditionReasonA wait without a condition can miss a wakeup or wake up simply to find that there is no work to do. Example, badstd::condition_variable cv; std::mutex mx; void thread1() { while (true) { // do some work ... std::unique_lock&lt;std::mutex&gt; lock(mx); cv.notify_one(); // wake other thread } } void thread2() { while (true) { std::unique_lock&lt;std::mutex&gt; lock(mx); cv.wait(lock); // might block forever // do work ... } } Here, if some other thread consumes thread1‘s notification, thread2 can wait forever. Exampletemplate&lt;typename T&gt; class Sync_queue { public: void put(const T&amp; val); void put(T&amp;&amp; val); void get(T&amp; val); private: mutex mtx; condition_variable cond; // this controls access list&lt;T&gt; q; }; template&lt;typename T&gt; void Sync_queue&lt;T&gt;::put(const T&amp; val) { lock_guard&lt;mutex&gt; lck(mtx); q.push_back(val); cond.notify_one(); } template&lt;typename T&gt; void Sync_queue&lt;T&gt;::get(T&amp; val) { unique_lock&lt;mutex&gt; lck(mtx); cond.wait(lck, [this]{ return !q.empty(); }); // prevent spurious wakeup val = q.front(); q.pop_front(); } Now if the queue is empty when a thread executing get() wakes up (e.g., because another thread has gotten to get() before it),it will immediately go back to sleep, waiting. EnforcementFlag all waits without conditions. CP.43: Minimize time spent in a critical sectionReasonThe less time is spent with a mutex taken, the less chance that another thread has to wait,and thread suspension and resumption are expensive. Examplevoid do_something() // bad { unique_lock&lt;mutex&gt; lck(my_lock); do0(); // preparation: does not need lock do1(); // transaction: needs locking do2(); // cleanup: does not need locking } Here, we are holding the lock for longer than necessary:We should not have taken the lock before we needed it and should have released it again before starting the cleanup.We could rewrite this to void do_something() // bad { do0(); // preparation: does not need lock my_lock.lock(); do1(); // transaction: needs locking my_lock.unlock(); do2(); // cleanup: does not need locking } But that compromises safety and violates the use RAII rule.Instead, add a block for the critical section: void do_something() // OK { do0(); // preparation: does not need lock { unique_lock&lt;mutex&gt; lck(my_lock); do1(); // transaction: needs locking } do2(); // cleanup: does not need locking } EnforcementImpossible in general.Flag “naked” lock() and unlock(). CP.44: Remember to name your lock_guards and unique_locksReasonAn unnamed local objects is a temporary that immediately goes out of scope. Exampleunique_lock&lt;mutex&gt;(m1); lock_guard&lt;mutex&gt; {m2}; lock(m1, m2); This looks innocent enough, but it isn’t. EnforcementFlag all unnamed lock_guards and unique_locks. CP.50: Define a mutex together with the data it guards. Use synchronized_value&lt;T&gt; where possibleReasonIt should be obvious to a reader that the data is to be guarded and how. This decreases the chance of the wrong mutex being locked, or the mutex not being locked. Using a synchronized_value&lt;T&gt; ensures that the data has a mutex, and the right mutex is locked when the data is accessed.See the WG21 proposal) to add synchronized_value to a future TS or revision of the C++ standard. Examplestruct Record { std::mutex m; // take this mutex before accessing other members // ... }; class MyClass { struct DataRecord { // ... }; synchronized_value&lt;DataRecord&gt; data; // Protect the data with a mutex }; Enforcement??? Possible? CP.par: ParallelismBy “parallelism” we refer to performing a task (more or less) simultaneously (“in parallel with”) on many data items. Parallelism rule summary: ??? ??? Where appropriate, prefer the standard-library parallel algorithms Use algorithms that are designed for parallelism, not algorithms with unnecessary dependency on linear evaluation CP.mess: Message passingThe standard-library facilities are quite low-level, focused on the needs of close-to the hardware critical programming using threads, mutexes, atomic types, etc.Most people shouldn’t work at this level: it’s error-prone and development is slow.If possible, use a higher level facility: messaging libraries, parallel algorithms, and vectorization.This section looks at passing messages so that a programmer doesn’t have to do explicit synchronization. Message passing rules summary: CP.60: Use a future to return a value from a concurrent task CP.61: Use a async() to spawn a concurrent task message queues messaging libraries ???? should there be a “use X rather than std::async“ where X is something that would use a better specified thread pool? ??? Is std::async worth using in light of future (and even existing, as libraries) parallelism facilities? What should the guidelines recommend if someone wants to parallelize, e.g., std::accumulate (with the additional precondition of commutativity), or merge sort? CP.60: Use a future to return a value from a concurrent taskReasonA future preserves the usual function call return semantics for asynchronous tasks.The is no explicit locking and both correct (value) return and error (exception) return are handled simply. Example??? Note??? Enforcement??? CP.61: Use a async() to spawn a concurrent taskReasonA future preserves the usual function call return semantics for asynchronous tasks.The is no explicit locking and both correct (value) return and error (exception) return are handled simply. Example??? NoteUnfortunately, async() is not perfect.For example, there is no guarantee that a thread pool is used to minimize thread construction.In fact, most current async() implementations don’t.However, async() is simple and logically correct so until something better comes alongand unless you really need to optimize for many asynchronous tasks, stick with async(). Enforcement??? CP.vec: VectorizationVectorization is a technique for executing a number of tasks concurrently without introducing explicit synchronization.An operation is simply applied to elements of a data structure (a vector, an array, etc.) in parallel.Vectorization has the interesting property of often requiring no non-local changes to a program.However, vectorization works best with simple data structures and with algorithms specifically crafted to enable it. Vectorization rule summary: ??? ??? CP.free: Lock-free programmingSynchronization using mutexes and condition_variables can be relatively expensive.Furthermore, it can lead to deadlock.For performance and to eliminate the possibility of deadlock, we sometimes have to use the tricky low-level “lock-free” facilitiesthat rely on briefly gaining exclusive (“atomic”) access to memory.Lock-free programming is also used to implement higher-level concurrency mechanisms, such as threads and mutexes. Lock-free programming rule summary: CP.100: Don’t use lock-free programming unless you absolutely have to CP.101: Distrust your hardware/compiler combination CP.102: Carefully study the literature how/when to use atomics avoid starvation use a lock-free data structure rather than hand-crafting specific lock-free access CP.110: Do not write your own double-checked locking for initialization CP.111: Use a conventional pattern if you really need double-checked locking how/when to compare and swap CP.100: Don’t use lock-free programming unless you absolutely have toReasonIt’s error-prone and requires expert level knowledge of language features, machine architecture, and data structures. Example, badextern atomic&lt;Link*&gt; head; // the shared head of a linked list Link* nh = new Link(data, nullptr); // make a link ready for insertion Link* h = head.load(); // read the shared head of the list do { if (h-&gt;data &lt;= data) break; // if so, insert elsewhere nh-&gt;next = h; // next element is the previous head } while (!head.compare_exchange_weak(h, nh)); // write nh to head or to h Spot the bug.It would be really hard to find through testing.Read up on the ABA problem. ExceptionAtomic variables can be used simply and safely, as long as you are using the sequentially consistent memory model (memory_order_seq_cst), which is the default. NoteHigher-level concurrency mechanisms, such as threads and mutexes are implemented using lock-free programming. Alternative: Use lock-free data structures implemented by others as part of some library. CP.101: Distrust your hardware/compiler combinationReasonThe low-level hardware interfaces used by lock-free programming are among the hardest to implement well and amongthe areas where the most subtle portability problems occur.If you are doing lock-free programming for performance, you need to check for regressions. NoteInstruction reordering (static and dynamic) makes it hard for us to think effectively at this level (especially if you use relaxed memory models).Experience, (semi)formal models and model checking can be useful.Testing - often to an extreme extent - is essential.“Don’t fly too close to the sun.” EnforcementHave strong rules for re-testing in place that covers any change in hardware, operating system, compiler, and libraries. CP.102: Carefully study the literatureReasonWith the exception of atomics and a few use standard patterns, lock-free programming is really an expert-only topic.Become an expert before shipping lock-free code for others to use. References Anthony Williams: C++ concurrency in action. Manning Publications. Boehm, Adve, You Don’t Know Jack About Shared Variables or Memory Models , Communications of the ACM, Feb 2012. Boehm, “Threads Basics”, HPL TR 2009-259. Adve, Boehm, “Memory Models: A Case for Rethinking Parallel Languages and Hardware”, Communications of the ACM, August 2010. Boehm, Adve, “Foundations of the C++ Concurrency Memory Model”, PLDI 08. Mark Batty, Scott Owens, Susmit Sarkar, Peter Sewell, and Tjark Weber, “Mathematizing C++ Concurrency”, POPL 2011. Damian Dechev, Peter Pirkelbauer, and Bjarne Stroustrup: Understanding and Effectively Preventing the ABA Problem in Descriptor-based Lock-free Designs. 13th IEEE Computer Society ISORC 2010 Symposium. May 2010. Damian Dechev and Bjarne Stroustrup: Scalable Non-blocking Concurrent Objects for Mission Critical Code. ACM OOPSLA’09. October 2009 Damian Dechev, Peter Pirkelbauer, Nicolas Rouquette, and Bjarne Stroustrup: Semantically Enhanced Containers for Concurrent Real-Time Systems. Proc. 16th Annual IEEE International Conference and Workshop on the Engineering of Computer Based Systems (IEEE ECBS). April 2009. CP.110: Do not write your own double-checked locking for initializationReasonSince C++11, static local variables are now initialized in a thread-safe way. When combined with the RAII pattern, static local variables can replace the need for writing your own double-checked locking for initialization. std::call_once can also achieve the same purpose. Use either static local variables of C++11 or std::call_once instead of writing your own double-checked locking for initialization. ExampleExample with std::call_once. void f() { static std::once_flag my_once_flag; std::call_once(my_once_flag, []() { // do this only once }); // ... } Example with thread-safe static local variables of C++11. void f() { // Assuming the compiler is compliant with C++11 static My_class my_object; // Constructor called only once // ... } class My_class { public: My_class() { // do this only once } }; Enforcement??? Is it possible to detect the idiom? CP.111: Use a conventional pattern if you really need double-checked lockingReasonDouble-checked locking is easy to mess up. If you really need to write your own double-checked locking, in spite of the rules CP.110: Do not write your own double-checked locking for initialization and CP.100: Don’t use lock-free programming unless you absolutely have to, then do it in a conventional pattern. The uses of the double-checked locking pattern that are not in violation of CP.110: Do not write your own double-checked locking for initialization arise when a non-thread-safe action is both hard and rare, and there exists a fast thread-safe test that can be used to guarantee that the action is not needed, but cannot be used to guarantee the converse. Example, badThe use of volatile does not make the first check thread-safe, see also CP.200: Use volatile only to talk to non-C++ memory mutex action_mutex; volatile bool action_needed; if (action_needed) { std::lock_guard&lt;std::mutex&gt; lock(action_mutex); if (action_needed) { take_action(); action_needed = false; } } Example, goodmutex action_mutex; atomic&lt;bool&gt; action_needed; if (action_needed) { std::lock_guard&lt;std::mutex&gt; lock(action_mutex); if (action_needed) { take_action(); action_needed = false; } } Fine-tuned memory order may be beneficial where acquire load is more efficient than sequentially-consistent load mutex action_mutex; atomic&lt;bool&gt; action_needed; if (action_needed.load(memory_order_acquire)) { lock_guard&lt;std::mutex&gt; lock(action_mutex); if (action_needed.load(memory_order_relaxed)) { take_action(); action_needed.store(false, memory_order_release); } } Enforcement??? Is it possible to detect the idiom? CP.etc: Etc. concurrency rulesThese rules defy simple categorization: CP.200: Use volatile only to talk to non-C++ memory CP.201: ??? Signals CP.200: Use volatile only to talk to non-C++ memoryReasonvolatile is used to refer to objects that are shared with “non-C++” code or hardware that does not follow the C++ memory model. Exampleconst volatile long clock; This describes a register constantly updated by a clock circuit.clock is volatile because its value will change without any action from the C++ program that uses it.For example, reading clock twice will often yield two different values, so the optimizer had better not optimize away the second read in this code: long t1 = clock; // ... no use of clock here ... long t2 = clock; clock is const because the program should not try to write to clock. NoteUnless you are writing the lowest level code manipulating hardware directly, consider volatile an esoteric feature that is best avoided. ExampleUsually C++ code receives volatile memory that is owned Elsewhere (hardware or another language): int volatile* vi = get_hardware_memory_location(); // note: we get a pointer to someone else&apos;s memory here // volatile says &quot;treat this with extra respect&quot; Sometimes C++ code allocates the volatile memory and shares it with “elsewhere” (hardware or another language) by deliberately escaping a pointer: static volatile long vl; please_use_this(&amp;vl); // escape a reference to this to &quot;elsewhere&quot; (not C++) Example; badvolatile local variables are nearly always wrong – how can they be shared with other languages or hardware if they’re ephemeral?The same applies almost as strongly to member variables, for the same reason. void f() { volatile int i = 0; // bad, volatile local variable // etc. } class My_type { volatile int i = 0; // suspicious, volatile member variable // etc. }; NoteIn C++, unlike in some other languages, volatile has nothing to do with synchronization. Enforcement Flag volatile T local and member variables; almost certainly you intended to use atomic&lt;T&gt; instead. ??? CP.201: ??? Signals???UNIX signal handling???. May be worth reminding how little is async-signal-safe, and how to communicate with a signal handler (best is probably “not at all”) E: Error handlingError handling involves: Detecting an error Transmitting information about an error to some handler code Preserve the state of a program in a valid state Avoid resource leaks It is not possible to recover from all errors. If recovery from an error is not possible, it is important to quickly “get out” in a well-defined way. A strategy for error handling must be simple, or it becomes a source of even worse errors. Untested and rarely executed error-handling code is itself the source of many bugs. The rules are designed to help avoid several kinds of errors: Type violations (e.g., misuse of unions and casts) Resource leaks (including memory leaks) Bounds errors Lifetime errors (e.g., accessing an object after is has been deleted) Complexity errors (logical errors made likely by overly complex expression of ideas) Interface errors (e.g., an unexpected value is passed through an interface) Error-handling rule summary: E.1: Develop an error-handling strategy early in a design E.2: Throw an exception to signal that a function can’t perform its assigned task E.3: Use exceptions for error handling only E.4: Design your error-handling strategy around invariants E.5: Let a constructor establish an invariant, and throw if it cannot E.6: Use RAII to prevent leaks E.7: State your preconditions E.8: State your postconditions E.12: Use noexcept when exiting a function because of a throw is impossible or unacceptable E.13: Never throw while being the direct owner of an object E.14: Use purpose-designed user-defined types as exceptions (not built-in types) E.15: Catch exceptions from a hierarchy by reference E.16: Destructors, deallocation, and swap must never fail E.17: Don’t try to catch every exception in every function E.18: Minimize the use of explicit try/catch E.19: Use a final_action object to express cleanup if no suitable resource handle is available E.25: If you can’t throw exceptions, simulate RAII for resource management E.26: If you can’t throw exceptions, consider failing fast E.27: If you can’t throw exceptions, use error codes systematically E.28: Avoid error handling based on global state (e.g. errno) E.30: Don’t use exception specifications E.31: Properly order your catch-clauses E.1: Develop an error-handling strategy early in a designReasonA consistent and complete strategy for handling errors and resource leaks is hard to retrofit into a system. E.2: Throw an exception to signal that a function can’t perform its assigned taskReasonTo make error handling systematic, robust, and non-repetitive. Examplestruct Foo { vector&lt;Thing&gt; v; File_handle f; string s; }; void use() { Foo bar {{Thing{1}, Thing{2}, Thing{monkey}}, {&quot;my_file&quot;, &quot;r&quot;}, &quot;Here we go!&quot;}; // ... } Here, vector and strings constructors may not be able to allocate sufficient memory for their elements, vectors constructor may not be able copy the Things in its initializer list, and File_handle may not be able to open the required file.In each case, they throw an exception for use()‘s caller to handle.If use() could handle the failure to construct bar it can take control using try/catch.In either case, Foo‘s constructor correctly destroys constructed members before passing control to whatever tried to create a Foo.Note that there is no return value that could contain an error code. The File_handle constructor might be defined like this: File_handle::File_handle(const string&amp; name, const string&amp; mode) :f{fopen(name.c_str(), mode.c_str())} { if (!f) throw runtime_error{&quot;File_handle: could not open &quot; + name + &quot; as &quot; + mode}; } NoteIt is often said that exceptions are meant to signal exceptional events and failures.However, that’s a bit circular because “what is exceptional?”Examples: A precondition that cannot be met A constructor that cannot construct an object (failure to establish its class’s invariant) An out-of-range error (e.g., v[v.size()] = 7) Inability to acquire a resource (e.g., the network is down) In contrast, termination of an ordinary loop is not exceptional.Unless the loop was meant to be infinite, termination is normal and expected. NoteDon’t use a throw as simply an alternative way of returning a value from a function. ExceptionSome systems, such as hard-real-time systems require a guarantee that an action is taken in a (typically short) constant maximum time known before execution starts. Such systems can use exceptions only if there is tool support for accurately predicting the maximum time to recover from a throw. See also: RAII See also: discussion NoteBefore deciding that you cannot afford or don’t like exception-based error handling, have a look at the alternatives;they have their own complexities and problems.Also, as far as possible, measure before making claims about efficiency. E.3: Use exceptions for error handling onlyReasonTo keep error handling separated from “ordinary code.”C++ implementations tend to be optimized based on the assumption that exceptions are rare. Example, don’t// don&apos;t: exception not used for error handling int find_index(vector&lt;string&gt;&amp; vec, const string&amp; x) { try { for (gsl::index i = 0; i &lt; vec.size(); ++i) if (vec[i] == x) throw i; // found x } catch (int i) { return i; } return -1; // not found } This is more complicated and most likely runs much slower than the obvious alternative.There is nothing exceptional about finding a value in a vector. EnforcementWould need to be heuristic.Look for exception values “leaked” out of catch clauses. E.4: Design your error-handling strategy around invariantsReasonTo use an object it must be in a valid state (defined formally or informally by an invariant) and to recover from an error every object not destroyed must be in a valid state. NoteAn invariant is logical condition for the members of an object that a constructor must establish for the public member functions to assume. Enforcement??? E.5: Let a constructor establish an invariant, and throw if it cannotReasonLeaving an object without its invariant established is asking for trouble.Not all member functions can be called. Exampleclass Vector { // very simplified vector of doubles // if elem != nullptr then elem points to sz doubles public: Vector() : elem{nullptr}, sz{0}{} Vector(int s) : elem{new double[s]}, sz{s} { /* initialize elements */ } ~Vector() { delete [] elem; } double&amp; operator[](int s) { return elem[s]; } // ... private: owner&lt;double*&gt; elem; int sz; }; The class invariant - here stated as a comment - is established by the constructors.new throws if it cannot allocate the required memory.The operators, notably the subscript operator, relies on the invariant. See also: If a constructor cannot construct a valid object, throw an exception EnforcementFlag classes with private state without a constructor (public, protected, or private). E.6: Use RAII to prevent leaksReasonLeaks are typically unacceptable.Manual resource release is error-prone.RAII (“Resource Acquisition Is Initialization”) is the simplest, most systematic way of preventing leaks. Examplevoid f1(int i) // Bad: possibly leak { int* p = new int[12]; // ... if (i &lt; 17) throw Bad{&quot;in f()&quot;, i}; // ... } We could carefully release the resource before the throw: void f2(int i) // Clumsy and error-prone: explicit release { int* p = new int[12]; // ... if (i &lt; 17) { delete[] p; throw Bad{&quot;in f()&quot;, i}; } // ... } This is verbose. In larger code with multiple possible throws explicit releases become repetitive and error-prone. void f3(int i) // OK: resource management done by a handle (but see below) { auto p = make_unique&lt;int[]&gt;(12); // ... if (i &lt; 17) throw Bad{&quot;in f()&quot;, i}; // ... } Note that this works even when the throw is implicit because it happened in a called function: void f4(int i) // OK: resource management done by a handle (but see below) { auto p = make_unique&lt;int[]&gt;(12); // ... helper(i); // may throw // ... } Unless you really need pointer semantics, use a local resource object: void f5(int i) // OK: resource management done by local object { vector&lt;int&gt; v(12); // ... helper(i); // may throw // ... } That’s even simpler and safer, and often more efficient. NoteIf there is no obvious resource handle and for some reason defining a proper RAII object/handle is infeasible,as a last resort, cleanup actions can be represented by a final_action object. NoteBut what do we do if we are writing a program where exceptions cannot be used?First challenge that assumption; there are many anti-exceptions myths around.We know of only a few good reasons: We are on a system so small that the exception support would eat up most of our 2K memory. We are in a hard-real-time system and we don’t have tools that guarantee us that an exception is handled within the required time. We are in a system with tons of legacy code using lots of pointers in difficult-to-understand ways(in particular without a recognizable ownership strategy) so that exceptions could cause leaks. Our implementation of the C++ exception mechanisms is unreasonably poor(slow, memory consuming, failing to work correctly for dynamically linked libraries, etc.).Complain to your implementation purveyor; if no user complains, no improvement will happen. We get fired if we challenge our manager’s ancient wisdom. Only the first of these reasons is fundamental, so whenever possible, use exceptions to implement RAII, or design your RAII objects to never fail.When exceptions cannot be used, simulate RAII.That is, systematically check that objects are valid after construction and still release all resources in the destructor.One strategy is to add a valid() operation to every resource handle: void f() { vector&lt;string&gt; vs(100); // not std::vector: valid() added if (!vs.valid()) { // handle error or exit } ifstream fs(&quot;foo&quot;); // not std::ifstream: valid() added if (!fs.valid()) { // handle error or exit } // ... } // destructors clean up as usual Obviously, this increases the size of the code, doesn’t allow for implicit propagation of “exceptions” (valid() checks), and valid() checks can be forgotten.Prefer to use exceptions. See also: Use of noexcept Enforcement??? E.7: State your preconditionsReasonTo avoid interface errors. See also: precondition rule E.8: State your postconditionsReasonTo avoid interface errors. See also: postcondition rule E.12: Use noexcept when exiting a function because of a throw is impossible or unacceptableReasonTo make error handling systematic, robust, and efficient. Exampledouble compute(double d) noexcept { return log(sqrt(d &lt;= 0 ? 1 : d)); } Here, we know that compute will not throw because it is composed out of operations that don’t throw.By declaring compute to be noexcept, we give the compiler and human readers information that can make it easier for them to understand and manipulate compute. NoteMany standard-library functions are noexcept including all the standard-library functions “inherited” from the C Standard Library. Examplevector&lt;double&gt; munge(const vector&lt;double&gt;&amp; v) noexcept { vector&lt;double&gt; v2(v.size()); // ... do something ... } The noexcept here states that I am not willing or able to handle the situation where I cannot construct the local vector.That is, I consider memory exhaustion a serious design error (on par with hardware failures) so that I’m willing to crash the program if it happens. NoteDo not use traditional exception-specifications. See alsodiscussion. E.13: Never throw while being the direct owner of an objectReasonThat would be a leak. Examplevoid leak(int x) // don&apos;t: may leak { auto p = new int{7}; if (x &lt; 0) throw Get_me_out_of_here{}; // may leak *p // ... delete p; // we may never get here } One way of avoiding such problems is to use resource handles consistently: void no_leak(int x) { auto p = make_unique&lt;int&gt;(7); if (x &lt; 0) throw Get_me_out_of_here{}; // will delete *p if necessary // ... // no need for delete p } Another solution (often better) would be to use a local variable to eliminate explicit use of pointers: void no_leak_simplified(int x) { vector&lt;int&gt; v(7); // ... } NoteIf you have local “things” that requires cleanup, but is not represented by an object with a destructor, such cleanup mustalso be done before a throw.Sometimes, finally() can make such unsystematic cleanup a bit more manageable. E.14: Use purpose-designed user-defined types as exceptions (not built-in types)ReasonA user-defined type is unlikely to clash with other people’s exceptions. Examplevoid my_code() { // ... throw Moonphase_error{}; // ... } void your_code() { try { // ... my_code(); // ... } catch(const Bufferpool_exhausted&amp;) { // ... } } Example, don’tvoid my_code() // Don&apos;t { // ... throw 7; // 7 means &quot;moon in the 4th quarter&quot; // ... } void your_code() // Don&apos;t { try { // ... my_code(); // ... } catch(int i) { // i == 7 means &quot;input buffer too small&quot; // ... } } NoteThe standard-library classes derived from exception should be used only as base classes or for exceptions that require only “generic” handling. Like built-in types, their use could clash with other people’s use of them. Example, don’tvoid my_code() // Don&apos;t { // ... throw runtime_error{&quot;moon in the 4th quarter&quot;}; // ... } void your_code() // Don&apos;t { try { // ... my_code(); // ... } catch(const runtime_error&amp;) { // runtime_error means &quot;input buffer too small&quot; // ... } } See also: Discussion EnforcementCatch throw and catch of a built-in type. Maybe warn about throw and catch using a standard-library exception type. Obviously, exceptions derived from the std::exception hierarchy are fine. E.15: Catch exceptions from a hierarchy by referenceReasonTo prevent slicing. Examplevoid f() { try { // ... } catch (exception e) { // don&apos;t: may slice // ... } } Instead, use a reference: catch (exception&amp; e) { /* ... */ } of - typically better still - a const reference: catch (const exception&amp; e) { /* ... */ } Most handlers do not modify their exception and in general we recommend use of const. NoteTo rethrow a caught exception use throw; not throw e;. Using throw e; would throw a new copy of e (sliced to the static type std::exception) instead of rethrowing the original exception of type std::runtime_error. (But keep Don’t try to catch every exception in every function and Minimize the use of explicit try/catch in mind.) EnforcementFlag by-value exceptions if their types are part of a hierarchy (could require whole-program analysis to be perfect). E.16: Destructors, deallocation, and swap must never failReasonWe don’t know how to write reliable programs if a destructor, a swap, or a memory deallocation fails; that is, if it exits by an exception or simply doesn’t perform its required action. Example, don’tclass Connection { // ... public: ~Connection() // Don&apos;t: very bad destructor { if (cannot_disconnect()) throw I_give_up{information}; // ... } }; NoteMany have tried to write reliable code violating this rule for examples, such as a network connection that “refuses to close”.To the best of our knowledge nobody has found a general way of doing this.Occasionally, for very specific examples, you can get away with setting some state for future cleanup.For example, we might put a socket that does not want to close on a “bad socket” list,to be examined by a regular sweep of the system state.Every example we have seen of this is error-prone, specialized, and often buggy. NoteThe standard library assumes that destructors, deallocation functions (e.g., operator delete), and swap do not throw. If they do, basic standard-library invariants are broken. NoteDeallocation functions, including operator delete, must be noexcept. swap functions must be noexcept.Most destructors are implicitly noexcept by default.Also, make move operations noexcept. EnforcementCatch destructors, deallocation operations, and swaps that throw.Catch such operations that are not noexcept. See also: discussion E.17: Don’t try to catch every exception in every functionReasonCatching an exception in a function that cannot take a meaningful recovery action leads to complexity and waste.Let an exception propagate until it reaches a function that can handle it.Let cleanup actions on the unwinding path be handled by RAII. Example, don’tvoid f() // bad { try { // ... } catch (...) { // no action throw; // propagate exception } } Enforcement Flag nested try-blocks. Flag source code files with a too high ratio of try-blocks to functions. (??? Problem: define “too high”) E.18: Minimize the use of explicit try/catchReason try/catch is verbose and non-trivial uses error-prone. try/catch can be a sign of unsystematic and/or low-level resource management or error handling. Example, Badvoid f(zstring s) { Gadget* p; try { p = new Gadget(s); // ... delete p; } catch (Gadget_construction_failure) { delete p; throw; } } This code is messy.There could be a leak from the naked pointer in the try block.Not all exceptions are handled.deleting an object that failed to construct is almost certainly a mistake.Better: void f2(zstring s) { Gadget g {s}; } Alternatives proper resource handles and RAII finally Enforcement??? hard, needs a heuristic E.19: Use a final_action object to express cleanup if no suitable resource handle is availableReasonfinally is less verbose and harder to get wrong than try/catch. Examplevoid f(int n) { void* p = malloc(1, n); auto _ = finally([p] { free(p); }); // ... } Notefinally is not as messy as try/catch, but it is still ad-hoc.Prefer proper resource management objects.Consider finally a last resort. NoteUse of finally is a systematic and reasonably clean alternative to the old goto exit; techniquefor dealing with cleanup where resource management is not systematic. EnforcementHeuristic: Detect goto exit; E.25: If you can’t throw exceptions, simulate RAII for resource managementReasonEven without exceptions, RAII is usually the best and most systematic way of dealing with resources. NoteError handling using exceptions is the only complete and systematic way of handling non-local errors in C++.In particular, non-intrusively signaling failure to construct an object requires an exception.Signaling errors in a way that cannot be ignored requires exceptions.If you can’t use exceptions, simulate their use as best you can. A lot of fear of exceptions is misguided.When used for exceptional circumstances in code that is not littered with pointers and complicated control structures,exception handling is almost always affordable (in time and space) and almost always leads to better code.This, of course, assumes a good implementation of the exception handling mechanisms, which is not available on all systems.There are also cases where the problems above do not apply, but exceptions cannot be used for other reasons.Some hard-real-time systems are an example: An operation has to be completed within a fixed time with an error or a correct answer.In the absence of appropriate time estimation tools, this is hard to guarantee for exceptions.Such systems (e.g. flight control software) typically also ban the use of dynamic (heap) memory. So, the primary guideline for error handling is “use exceptions and RAII.”This section deals with the cases where you either do not have an efficient implementation of exceptions,or have such a rat’s nest of old-style code(e.g., lots of pointers, ill-defined ownership, and lots of unsystematic error handling based on tests of error codes)that it is infeasible to introduce simple and systematic exception handling. Before condemning exceptions or complaining too much about their cost, consider examples of the use of error codes.Consider the cost and complexity of the use of error codes.If performance is your worry, measure. ExampleAssume you wanted to write void func(zstring arg) { Gadget g {arg}; // ... } If the gadget isn’t correctly constructed, func exits with an exception.If we cannot throw an exception, we can simulate this RAII style of resource handling by adding a valid() member function to Gadget: error_indicator func(zstring arg) { Gadget g {arg}; if (!g.valid()) return gadget_construction_error; // ... return 0; // zero indicates &quot;good&quot; } The problem is of course that the caller now has to remember to test the return value. See also: Discussion EnforcementPossible (only) for specific versions of this idea: e.g., test for systematic test of valid() after resource handle construction E.26: If you can’t throw exceptions, consider failing fastReasonIf you can’t do a good job at recovering, at least you can get out before too much consequential damage is done. See also: Simulating RAII NoteIf you cannot be systematic about error handling, consider “crashing” as a response to any error that cannot be handled locally.That is, if you cannot recover from an error in the context of the function that detected it, call abort(), quick_exit(),or a similar function that will trigger some sort of system restart. In systems where you have lots of processes and/or lots of computers, you need to expect and handle fatal crashes anyway,say from hardware failures.In such cases, “crashing” is simply leaving error handling to the next level of the system. Examplevoid f(int n) { // ... p = static_cast&lt;X*&gt;(malloc(n, X)); if (!p) abort(); // abort if memory is exhausted // ... } Most programs cannot handle memory exhaustion gracefully anyway. This is roughly equivalent to void f(int n) { // ... p = new X[n]; // throw if memory is exhausted (by default, terminate) // ... } Typically, it is a good idea to log the reason for the “crash” before exiting. EnforcementAwkward E.27: If you can’t throw exceptions, use error codes systematicallyReasonSystematic use of any error-handling strategy minimizes the chance of forgetting to handle an error. See also: Simulating RAII NoteThere are several issues to be addressed: how do you transmit an error indicator from out of a function? how do you release all resources from a function before doing an error exit? What do you use as an error indicator? In general, returning an error indicator implies returning two values: The result and an error indicator.The error indicator can be part of the object, e.g. an object can have a valid() indicatoror a pair of values can be returned. ExampleGadget make_gadget(int n) { // ... } void user() { Gadget g = make_gadget(17); if (!g.valid()) { // error handling } // ... } This approach fits with simulated RAII resource management.The valid() function could return an error_indicator (e.g. a member of an error_indicator enumeration). ExampleWhat if we cannot or do not want to modify the Gadget type?In that case, we must return a pair of values.For example: std::pair&lt;Gadget, error_indicator&gt; make_gadget(int n) { // ... } void user() { auto r = make_gadget(17); if (!r.second) { // error handling } Gadget&amp; g = r.first; // ... } As shown, std::pair is a possible return type.Some people prefer a specific type.For example: Gval make_gadget(int n) { // ... } void user() { auto r = make_gadget(17); if (!r.err) { // error handling } Gadget&amp; g = r.val; // ... } One reason to prefer a specific return type is to have names for its members, rather than the somewhat cryptic first and secondand to avoid confusion with other uses of std::pair. ExampleIn general, you must clean up before an error exit.This can be messy: std::pair&lt;int, error_indicator&gt; user() { Gadget g1 = make_gadget(17); if (!g1.valid()) { return {0, g1_error}; } Gadget g2 = make_gadget(17); if (!g2.valid()) { cleanup(g1); return {0, g2_error}; } // ... if (all_foobar(g1, g2)) { cleanup(g1); cleanup(g2); return {0, foobar_error}; // ... cleanup(g1); cleanup(g2); return {res, 0}; } Simulating RAII can be non-trivial, especially in functions with multiple resources and multiple possible errors.A not uncommon technique is to gather cleanup at the end of the function to avoid repetition: std::pair&lt;int, error_indicator&gt; user() { error_indicator err = 0; Gadget g1 = make_gadget(17); if (!g1.valid()) { err = g1_error; goto exit; } Gadget g2 = make_gadget(17); if (!g2.valid()) { err = g2_error; goto exit; } if (all_foobar(g1, g2)) { err = foobar_error; goto exit; } // ... exit: if (g1.valid()) cleanup(g1); if (g2.valid()) cleanup(g2); return {res, err}; } The larger the function, the more tempting this technique becomes.finally can ease the pain a bit.Also, the larger the program becomes the harder it is to apply an error-indicator-based error-handling strategy systematically. We prefer exception-based error handling and recommend keeping functions short. See also: Discussion See also: Returning multiple values EnforcementAwkward. E.28: Avoid error handling based on global state (e.g. errno)ReasonGlobal state is hard to manage and it is easy to forget to check it.When did you last test the return value of printf()? See also: Simulating RAII Example, bad??? NoteC-style error handling is based on the global variable errno, so it is essentially impossible to avoid this style completely. EnforcementAwkward. E.30: Don’t use exception specificationsReasonException specifications make error handling brittle, impose a run-time cost, and have been removed from the C++ standard. Exampleint use(int arg) throw(X, Y) { // ... auto x = f(arg); // ... } If f() throws an exception different from X and Y the unexpected handler is invoked, which by default terminates.That’s OK, but say that we have checked that this cannot happen and f is changed to throw a new exception Z,we now have a crash on our hands unless we change use() (and re-test everything).The snag is that f() may be in a library we do not control and the new exception is not anything that use() can doanything about or is in any way interested in.We can change use() to pass Z through, but now use()‘s callers probably needs to be modified.This quickly becomes unmanageable.Alternatively, we can add a try-catch to use() to map Z into an acceptable exception.This too, quickly becomes unmanageable.Note that changes to the set of exceptions often happens at the lowest level of a system(e.g., because of changes to a network library or some middleware), so changes “bubble up” through long call chains.In a large code base, this could mean that nobody could update to a new version of a library until the last user was modified.If use() is part of a library, it may not be possible to update it because a change could affect unknown clients. The policy of letting exceptions propagate until they reach a function that potentially can handle it has proven itself over the years. NoteNo. This would not be any better had exception specifications been statically enforced.For example, see Stroustrup94. NoteIf no exception may be thrown, use noexcept or its equivalent throw(). EnforcementFlag every exception specification. E.31: Properly order your catch-clausesReasoncatch-clauses are evaluated in the order they appear and one clause can hide another. Examplevoid f() { // ... try { // ... } catch (Base&amp; b) { /* ... */ } catch (Derived&amp; d) { /* ... */ } catch (...) { /* ... */ } catch (std::exception&amp; e){ /* ... */ } } If Derivedis derived from Base the Derived-handler will never be invoked.The “catch everything” handler ensured that the std::exception-handler will never be invoked. EnforcementFlag all “hiding handlers”. Con: Constants and immutabilityYou can’t have a race condition on a constant.It is easier to reason about a program when many of the objects cannot change their values.Interfaces that promises “no change” of objects passed as arguments greatly increase readability. Constant rule summary: Con.1: By default, make objects immutable Con.2: By default, make member functions const Con.3: By default, pass pointers and references to consts Con.4: Use const to define objects with values that do not change after construction Con.5: Use constexpr for values that can be computed at compile time Con.1: By default, make objects immutableReasonImmutable objects are easier to reason about, so make objects non-const only when there is a need to change their value.Prevents accidental or hard-to-notice change of value. Examplefor (const int i : c) cout &lt;&lt; i &lt;&lt; &apos;\n&apos;; // just reading: const for (int i : c) cout &lt;&lt; i &lt;&lt; &apos;\n&apos;; // BAD: just reading ExceptionFunction arguments are rarely mutated, but also rarely declared const.To avoid confusion and lots of false positives, don’t enforce this rule for function arguments. void f(const char* const p); // pedantic void g(const int i); // pedantic Note that function parameter is a local variable so changes to it are local. Enforcement Flag non-const variables that are not modified (except for parameters to avoid many false positives) Con.2: By default, make member functions constReasonA member function should be marked const unless it changes the object’s observable state.This gives a more precise statement of design intent, better readability, more errors caught by the compiler, and sometimes more optimization opportunities. Example; badclass Point { int x, y; public: int getx() { return x; } // BAD, should be const as it doesn&apos;t modify the object&apos;s state // ... }; void f(const Point&amp; pt) { int x = pt.getx(); // ERROR, doesn&apos;t compile because getx was not marked const } NoteIt is not inherently bad to pass a pointer or reference to non-const,but that should be done only when the called function is supposed to modify the object.A reader of code must assume that a function that takes a “plain” T* or T&amp; will modify the object referred to.If it doesn’t now, it might do so later without forcing recompilation. NoteThere are code/libraries that are offer functions that declare aT* even thoughthose function do not modify that T.This is a problem for people modernizing code.You can update the library to be const-correct; preferred long-term solution “cast away const“; best avoided provide a wrapper function Example: void f(int* p); // old code: f() does not modify `*p` void f(const int* p) { f(const_cast&lt;int*&gt;(p)); } // wrapper Note that this wrapper solution is a patch that should be used only when the declaration of f() cannot be be modified,e.g. because it is in a library that you cannot modify. NoteA const member function can modify the value of an object that is mutable or accessed through a pointer member.A common use is to maintain a cache rather than repeatedly do a complicated computation.For example, here is a Date that caches (mnemonizes) its string representation to simplify repeated uses: class Date { public: // ... const string&amp; string_ref() const { if (string_val == &quot;&quot;) compute_string_rep(); return string_val; } // ... private: void compute_string_rep() const; // compute string representation and place it in string_val mutable string string_val; // ... }; Another way of saying this is that constness is not transitive.It is possible for a const member function to change the value of mutable members and the value of objects accessedthrough non-const pointers.It is the job of the class to ensure such mutation is done only when it makes sense according to the semantics (invariants)it offers to its users. See also: Pimpl Enforcement Flag a member function that is not marked const, but that does not perform a non-const operation on any member variable. Con.3: By default, pass pointers and references to constsReason To avoid a called function unexpectedly changing the value. It’s far easier to reason about programs when called functions don’t modify state. Examplevoid f(char* p); // does f modify *p? (assume it does) void g(const char* p); // g does not modify *p NoteIt is not inherently bad to pass a pointer or reference to non-const,but that should be done only when the called function is supposed to modify the object. NoteDo not cast away const. Enforcement Flag function that does not modify an object passed by pointer or reference to non-const Flag a function that (using a cast) modifies an object passed by pointer or reference to const Con.4: Use const to define objects with values that do not change after constructionReason Prevent surprises from unexpectedly changed object values. Examplevoid f() { int x = 7; const int y = 9; for (;;) { // ... } // ... } As x is not const, we must assume that it is modified somewhere in the loop. Enforcement Flag unmodified non-const variables. Con.5: Use constexpr for values that can be computed at compile timeReasonBetter performance, better compile-time checking, guaranteed compile-time evaluation, no possibility of race conditions. Exampledouble x = f(2); // possible run-time evaluation const double y = f(2); // possible run-time evaluation constexpr double z = f(2); // error unless f(2) can be evaluated at compile time NoteSee F.4. Enforcement Flag const definitions with constant expression initializers. T: Templates and generic programmingGeneric programming is programming using types and algorithms parameterized by types, values, and algorithms.In C++, generic programming is supported by the template language mechanisms. Arguments to generic functions are characterized by sets of requirements on the argument types and values involved.In C++, these requirements are expressed by compile-time predicates called concepts. Templates can also be used for meta-programming; that is, programs that compose code at compile time. A central notion in generic programming is “concepts”; that is, requirements on template arguments presented as compile-time predicates.“Concepts” are defined in an ISO Technical specification: concepts.A draft of a set of standard-library concepts can be found in another ISO TS: rangesConcepts are supported in GCC 6.1 and later.Consequently, we comment out uses of concepts in examples; that is, we use them as formalized comments only.If you use GCC 6.1 or later, you can uncomment them. Template use rule summary: T.1: Use templates to raise the level of abstraction of code T.2: Use templates to express algorithms that apply to many argument types T.3: Use templates to express containers and ranges T.4: Use templates to express syntax tree manipulation T.5: Combine generic and OO techniques to amplify their strengths, not their costs Concept use rule summary: T.10: Specify concepts for all template arguments T.11: Whenever possible use standard concepts T.12: Prefer concept names over auto for local variables T.13: Prefer the shorthand notation for simple, single-type argument concepts ??? Concept definition rule summary: T.20: Avoid “concepts” without meaningful semantics T.21: Require a complete set of operations for a concept T.22: Specify axioms for concepts T.23: Differentiate a refined concept from its more general case by adding new use patterns T.24: Use tag classes or traits to differentiate concepts that differ only in semantics T.25: Avoid complementary constraints T.26: Prefer to define concepts in terms of use-patterns rather than simple syntax T.30: Use concept negation (!C&lt;T&gt;) sparingly to express a minor difference T.31: Use concept disjunction (C1&lt;T&gt; || C2&lt;T&gt;) sparingly to express alternatives ??? Template interface rule summary: T.40: Use function objects to pass operations to algorithms T.41: Require only essential properties in a template’s concepts T.42: Use template aliases to simplify notation and hide implementation details T.43: Prefer using over typedef for defining aliases T.44: Use function templates to deduce class template argument types (where feasible) T.46: Require template arguments to be at least Regular or SemiRegular T.47: Avoid highly visible unconstrained templates with common names T.48: If your compiler does not support concepts, fake them with enable_if T.49: Where possible, avoid type-erasure Template definition rule summary: T.60: Minimize a template’s context dependencies T.61: Do not over-parameterize members (SCARY) T.62: Place non-dependent class template members in a non-templated base class T.64: Use specialization to provide alternative implementations of class templates T.65: Use tag dispatch to provide alternative implementations of functions T.67: Use specialization to provide alternative implementations for irregular types T.68: Use {} rather than () within templates to avoid ambiguities T.69: Inside a template, don’t make an unqualified nonmember function call unless you intend it to be a customization point Template and hierarchy rule summary: T.80: Do not naively templatize a class hierarchy T.81: Do not mix hierarchies and arrays // ??? somewhere in “hierarchies” T.82: Linearize a hierarchy when virtual functions are undesirable T.83: Do not declare a member function template virtual T.84: Use a non-template core implementation to provide an ABI-stable interface T.??: ???? Variadic template rule summary: T.100: Use variadic templates when you need a function that takes a variable number of arguments of a variety of types T.101: ??? How to pass arguments to a variadic template ??? T.102: ??? How to process arguments to a variadic template ??? T.103: Don’t use variadic templates for homogeneous argument lists T.??: ???? Metaprogramming rule summary: T.120: Use template metaprogramming only when you really need to T.121: Use template metaprogramming primarily to emulate concepts T.122: Use templates (usually template aliases) to compute types at compile time T.123: Use constexpr functions to compute values at compile time T.124: Prefer to use standard-library TMP facilities T.125: If you need to go beyond the standard-library TMP facilities, use an existing library T.??: ???? Other template rules summary: T.140: Name all operations with potential for reuse T.141: Use an unnamed lambda if you need a simple function object in one place only T.142: Use template variables to simplify notation T.143: Don’t write unintentionally nongeneric code T.144: Don’t specialize function templates T.150: Check that a class matches a concept using static_assert T.??: ???? T.gp: Generic programmingGeneric programming is programming using types and algorithms parameterized by types, values, and algorithms. T.1: Use templates to raise the level of abstraction of codeReasonGenerality. Reuse. Efficiency. Encourages consistent definition of user types. Example, badConceptually, the following requirements are wrong because what we want of T is more than just the very low-level concepts of “can be incremented” or “can be added”: template&lt;typename T&gt; // requires Incrementable&lt;T&gt; T sum1(vector&lt;T&gt;&amp; v, T s) { for (auto x : v) s += x; return s; } template&lt;typename T&gt; // requires Simple_number&lt;T&gt; T sum2(vector&lt;T&gt;&amp; v, T s) { for (auto x : v) s = s + x; return s; } Assuming that Incrementable does not support + and Simple_number does not support +=, we have overconstrained implementers of sum1 and sum2.And, in this case, missed an opportunity for a generalization. Exampletemplate&lt;typename T&gt; // requires Arithmetic&lt;T&gt; T sum(vector&lt;T&gt;&amp; v, T s) { for (auto x : v) s += x; return s; } Assuming that Arithmetic requires both + and +=, we have constrained the user of sum to provide a complete arithmetic type.That is not a minimal requirement, but it gives the implementer of algorithms much needed freedom and ensures that any Arithmetic typecan be used for a wide variety of algorithms. For additional generality and reusability, we could also use a more general Container or Range concept instead of committing to only one container, vector. NoteIf we define a template to require exactly the operations required for a single implementation of a single algorithm(e.g., requiring just += rather than also = and +) and only those, we have overconstrained maintainers.We aim to minimize requirements on template arguments, but the absolutely minimal requirements of an implementation is rarely a meaningful concept. NoteTemplates can be used to express essentially everything (they are Turing complete), but the aim of generic programming (as expressed using templates)is to efficiently generalize operations/algorithms over a set of types with similar semantic properties. NoteThe requires in the comments are uses of concepts.“Concepts” are defined in an ISO Technical specification: concepts.Concepts are supported in GCC 6.1 and later.Consequently, we comment out uses of concepts in examples; that is, we use them as formalized comments only.If you use GCC 6.1 or later, you can uncomment them. Enforcement Flag algorithms with “overly simple” requirements, such as direct use of specific operators without a concept. Do not flag the definition of the “overly simple” concepts themselves; they may simply be building blocks for more useful concepts. T.2: Use templates to express algorithms that apply to many argument typesReasonGenerality. Minimizing the amount of source code. Interoperability. Reuse. ExampleThat’s the foundation of the STL. A single find algorithm easily works with any kind of input range: template&lt;typename Iter, typename Val&gt; // requires Input_iterator&lt;Iter&gt; // &amp;&amp; Equality_comparable&lt;Value_type&lt;Iter&gt;, Val&gt; Iter find(Iter b, Iter e, Val v) { // ... } NoteDon’t use a template unless you have a realistic need for more than one template argument type.Don’t overabstract. Enforcement??? tough, probably needs a human T.3: Use templates to express containers and rangesReasonContainers need an element type, and expressing that as a template argument is general, reusable, and type safe.It also avoids brittle or inefficient workarounds. Convention: That’s the way the STL does it. Exampletemplate&lt;typename T&gt; // requires Regular&lt;T&gt; class Vector { // ... T* elem; // points to sz Ts int sz; }; Vector&lt;double&gt; v(10); v[7] = 9.9; Example, badclass Container { // ... void* elem; // points to size elements of some type int sz; }; Container c(10, sizeof(double)); ((double*) c.elem)[] = 9.9; This doesn’t directly express the intent of the programmer and hides the structure of the program from the type system and optimizer. Hiding the void* behind macros simply obscures the problems and introduces new opportunities for confusion. Exceptions: If you need an ABI-stable interface, you might have to provide a base implementation and express the (type-safe) template in terms of that.See Stable base. Enforcement Flag uses of void*s and casts outside low-level implementation code T.4: Use templates to express syntax tree manipulationReason ??? Example??? Exceptions: ??? T.5: Combine generic and OO techniques to amplify their strengths, not their costsReasonGeneric and OO techniques are complementary. ExampleStatic helps dynamic: Use static polymorphism to implement dynamically polymorphic interfaces. class Command { // pure virtual functions }; // implementations template&lt;/*...*/&gt; class ConcreteCommand : public Command { // implement virtuals }; ExampleDynamic helps static: Offer a generic, comfortable, statically bound interface, but internally dispatch dynamically, so you offer a uniform object layout.Examples include type erasure as with std::shared_ptr‘s deleter (but don’t overuse type erasure). NoteIn a class template, nonvirtual functions are only instantiated if they’re used – but virtual functions are instantiated every time.This can bloat code size, and may overconstrain a generic type by instantiating functionality that is never needed.Avoid this, even though the standard-library facets made this mistake. See also ref ??? ref ??? ref ??? EnforcementSee the reference to more specific rules. T.concepts: Concept rulesConcepts is a facility for specifying requirements for template arguments.It is an ISO technical specification, but currently supported only by GCC.Concepts are, however, crucial in the thinking about generic programming and the basis of much work on future C++ libraries(standard and other). This section assumes concept support Concept use rule summary: T.10: Specify concepts for all template arguments T.11: Whenever possible use standard concepts T.12: Prefer concept names over auto T.13: Prefer the shorthand notation for simple, single-type argument concepts ??? Concept definition rule summary: T.20: Avoid “concepts” without meaningful semantics T.21: Require a complete set of operations for a concept T.22: Specify axioms for concepts T.23: Differentiate a refined concept from its more general case by adding new use patterns T.24: Use tag classes or traits to differentiate concepts that differ only in semantics T.25: Avoid complimentary constraints T.26: Prefer to define concepts in terms of use-patterns rather than simple syntax ??? T.con-use: Concept useT.10: Specify concepts for all template argumentsReasonCorrectness and readability.The assumed meaning (syntax and semantics) of a template argument is fundamental to the interface of a template.A concept dramatically improves documentation and error handling for the template.Specifying concepts for template arguments is a powerful design tool. Exampletemplate&lt;typename Iter, typename Val&gt; // requires Input_iterator&lt;Iter&gt; // &amp;&amp; Equality_comparable&lt;Value_type&lt;Iter&gt;, Val&gt; Iter find(Iter b, Iter e, Val v) { // ... } or equivalently and more succinctly: template&lt;Input_iterator Iter, typename Val&gt; // requires Equality_comparable&lt;Value_type&lt;Iter&gt;, Val&gt; Iter find(Iter b, Iter e, Val v) { // ... } Note“Concepts” are defined in an ISO Technical specification: concepts.A draft of a set of standard-library concepts can be found in another ISO TS: rangesConcepts are supported in GCC 6.1 and later.Consequently, we comment out uses of concepts in examples; that is, we use them as formalized comments only.If you use GCC 6.1 or later, you can uncomment them: template&lt;typename Iter, typename Val&gt; requires Input_iterator&lt;Iter&gt; &amp;&amp; Equality_comparable&lt;Value_type&lt;Iter&gt;, Val&gt; Iter find(Iter b, Iter e, Val v) { // ... } NotePlain typename (or auto) is the least constraining concept.It should be used only rarely when nothing more than “it’s a type” can be assumed.This is typically only needed when (as part of template metaprogramming code) we manipulate pure expression trees, postponing type checking. References: TC++PL4, Palo Alto TR, Sutton EnforcementFlag template type arguments without concepts T.11: Whenever possible use standard conceptsReason “Standard” concepts (as provided by the GSL and the Ranges TS, and hopefully soon the ISO standard itself)saves us the work of thinking up our own concepts, are better thought out than we can manage to do in a hurry, and improves interoperability. NoteUnless you are creating a new generic library, most of the concepts you need will already be defined by the standard library. Example (using TS concepts)template&lt;typename T&gt; // don&apos;t define this: Sortable is in the GSL concept Ordered_container = Sequence&lt;T&gt; &amp;&amp; Random_access&lt;Iterator&lt;T&gt;&gt; &amp;&amp; Ordered&lt;Value_type&lt;T&gt;&gt;; void sort(Ordered_container&amp; s); This Ordered_container is quite plausible, but it is very similar to the Sortable concept in the GSL (and the Range TS).Is it better? Is it right? Does it accurately reflect the standard’s requirements for sort?It is better and simpler just to use Sortable: void sort(Sortable&amp; s); // better NoteThe set of “standard” concepts is evolving as we approach an ISO standard including concepts. NoteDesigning a useful concept is challenging. EnforcementHard. Look for unconstrained arguments, templates that use “unusual”/non-standard concepts, templates that use “homebrew” concepts without axioms. Develop a concept-discovery tool (e.g., see an early experiment). T.12: Prefer concept names over auto for local variablesReason auto is the weakest concept. Concept names convey more meaning than just auto. Example (using TS concepts)vector&lt;string&gt; v{ &quot;abc&quot;, &quot;xyz&quot; }; auto&amp; x = v.front(); // bad String&amp; s = v.front(); // good (String is a GSL concept) Enforcement ??? T.13: Prefer the shorthand notation for simple, single-type argument conceptsReasonReadability. Direct expression of an idea. Example (using TS concepts)To say “T is Sortable“: template&lt;typename T&gt; // Correct but verbose: &quot;The parameter is // requires Sortable&lt;T&gt; // of type T which is the name of a type void sort(T&amp;); // that is Sortable&quot; template&lt;Sortable T&gt; // Better (assuming support for concepts): &quot;The parameter is of type T void sort(T&amp;); // which is Sortable&quot; void sort(Sortable&amp;); // Best (assuming support for concepts): &quot;The parameter is Sortable&quot; The shorter versions better match the way we speak. Note that many templates don’t need to use the template keyword. Note“Concepts” are defined in an ISO Technical specification: concepts.A draft of a set of standard-library concepts can be found in another ISO TS: rangesConcepts are supported in GCC 6.1 and later.Consequently, we comment out uses of concepts in examples; that is, we use them as formalized comments only.If you use a compiler that supports concepts (e.g., GCC 6.1 or later), you can remove the //. Enforcement Not feasible in the short term when people convert from the &lt;typename T&gt; and &lt;class T&gt; notation. Later, flag declarations that first introduces a typename and then constrains it with a simple, single-type-argument concept. T.concepts.def: Concept definition rulesDefining good concepts is non-trivial.Concepts are meant to represent fundamental concepts in an application domain (hence the name “concepts”).Similarly throwing together a set of syntactic constraints to be used for a the arguments for a single class or algorithm is not what concepts were designed forand will not give the full benefits of the mechanism. Obviously, defining concepts will be most useful for code that can use an implementation (e.g., GCC 6.1 or later),but defining concepts is in itself a useful design technique and help catch conceptual errors and clean up the concepts (sic!) of an implementation. T.20: Avoid “concepts” without meaningful semanticsReasonConcepts are meant to express semantic notions, such as “a number”, “a range” of elements, and “totally ordered.”Simple constraints, such as “has a + operator” and “has a &gt; operator” cannot be meaningfully specified in isolationand should be used only as building blocks for meaningful concepts, rather than in user code. Example, bad (using TS concepts)template&lt;typename T&gt; concept Addable = has_plus&lt;T&gt;; // bad; insufficient template&lt;Addable N&gt; auto algo(const N&amp; a, const N&amp; b) // use two numbers { // ... return a + b; } int x = 7; int y = 9; auto z = algo(x, y); // z = 16 string xx = &quot;7&quot;; string yy = &quot;9&quot;; auto zz = algo(xx, yy); // zz = &quot;79&quot; Maybe the concatenation was expected. More likely, it was an accident. Defining minus equivalently would give dramatically different sets of accepted types.This Addable violates the mathematical rule that addition is supposed to be commutative: a+b == b+a. NoteThe ability to specify a meaningful semantics is a defining characteristic of a true concept, as opposed to a syntactic constraint. Example (using TS concepts)template&lt;typename T&gt; // The operators +, -, *, and / for a number are assumed to follow the usual mathematical rules concept Number = has_plus&lt;T&gt; &amp;&amp; has_minus&lt;T&gt; &amp;&amp; has_multiply&lt;T&gt; &amp;&amp; has_divide&lt;T&gt;; template&lt;Number N&gt; auto algo(const N&amp; a, const N&amp; b) { // ... return a + b; } int x = 7; int y = 9; auto z = algo(x, y); // z = 16 string xx = &quot;7&quot;; string yy = &quot;9&quot;; auto zz = algo(xx, yy); // error: string is not a Number NoteConcepts with multiple operations have far lower chance of accidentally matching a type than a single-operation concept. Enforcement Flag single-operation concepts when used outside the definition of other concepts. Flag uses of enable_if that appears to simulate single-operation concepts. T.21: Require a complete set of operations for a conceptReasonEase of comprehension.Improved interoperability.Helps implementers and maintainers. NoteThis is a specific variant of the general rule that a concept must make semantic sense. Example, bad (using TS concepts)template&lt;typename T&gt; concept Subtractable = requires(T a, T, b) { a-b; }; This makes no semantic sense.You need at least + to make - meaningful and useful. Examples of complete sets are Arithmetic: +, -, *, /, +=, -=, *=, /= Comparable: &lt;, &gt;, &lt;=, &gt;=, ==, != NoteThis rule applies whether we use direct language support for concepts or not.It is a general design rule that even applies to non-templates: class Minimal { // ... }; bool operator==(const Minimal&amp;, const Minimal&amp;); bool operator&lt;(const Minimal&amp;, const Minimal&amp;); Minimal operator+(const Minimal&amp;, const Minimal&amp;); // no other operators void f(const Minimal&amp; x, const Minimal&amp; y) { if (!(x == y)) { /* ... */ } // OK if (x != y) { /* ... */ } // surprise! error while (!(x &lt; y)) { /* ... */ } // OK while (x &gt;= y) { /* ... */ } // surprise! error x = x + y; // OK x += y; // surprise! error } This is minimal, but surprising and constraining for users.It could even be less efficient. The rule supports the view that a concept should reflect a (mathematically) coherent set of operations. Exampleclass Convenient { // ... }; bool operator==(const Convenient&amp;, const Convenient&amp;); bool operator&lt;(const Convenient&amp;, const Convenient&amp;); // ... and the other comparison operators ... Minimal operator+(const Convenient&amp;, const Convenient&amp;); // .. and the other arithmetic operators ... void f(const Convenient&amp; x, const Convenient&amp; y) { if (!(x == y)) { /* ... */ } // OK if (x != y) { /* ... */ } // OK while (!(x &lt; y)) { /* ... */ } // OK while (x &gt;= y) { /* ... */ } // OK x = x + y; // OK x += y; // OK } It can be a nuisance to define all operators, but not hard.Ideally, that rule should be language supported by giving you comparison operators by default. Enforcement Flag classes that support “odd” subsets of a set of operators, e.g., == but not != or + but not -.Yes, std::string is “odd”, but it’s too late to change that. T.22: Specify axioms for conceptsReasonA meaningful/useful concept has a semantic meaning.Expressing these semantics in an informal, semi-formal, or formal way makes the concept comprehensible to readers and the effort to express it can catch conceptual errors.Specifying semantics is a powerful design tool. Example (using TS concepts)template&lt;typename T&gt; // The operators +, -, *, and / for a number are assumed to follow the usual mathematical rules // axiom(T a, T b) { a + b == b + a; a - a == 0; a * (b + c) == a * b + a * c; /*...*/ } concept Number = requires(T a, T b) { {a + b} -&gt; T; // the result of a + b is convertible to T {a - b} -&gt; T; {a * b} -&gt; T; {a / b} -&gt; T; } NoteThis is an axiom in the mathematical sense: something that may be assumed without proof.In general, axioms are not provable, and when they are the proof is often beyond the capability of a compiler.An axiom may not be general, but the template writer may assume that it holds for all inputs actually used (similar to a precondition). NoteIn this context axioms are Boolean expressions.See the Palo Alto TR for examples.Currently, C++ does not support axioms (even the ISO Concepts TS), so we have to make do with comments for a longish while.Once language support is available, the // in front of the axiom can be removed NoteThe GSL concepts have well-defined semantics; see the Palo Alto TR and the Ranges TS. Exception (using TS concepts)Early versions of a new “concept” still under development will often just define simple sets of constraints without a well-specified semantics.Finding good semantics can take effort and time.An incomplete set of constraints can still be very useful: // balancer for a generic binary tree template&lt;typename Node&gt; concept bool Balancer = requires(Node* p) { add_fixup(p); touch(p); detach(p); } So a Balancer must supply at least thee operations on a tree Node,but we are not yet ready to specify detailed semantics because a new kind of balanced tree might require more operationsand the precise general semantics for all nodes is hard to pin down in the early stages of design. A “concept” that is incomplete or without a well-specified semantics can still be useful.For example, it allows for some checking during initial experimentation.However, it should not be assumed to be stable.Each new use case may require such an incomplete concepts to be improved. Enforcement Look for the word “axiom” in concept definition comments T.23: Differentiate a refined concept from its more general case by adding new use patterns.ReasonOtherwise they cannot be distinguished automatically by the compiler. Example (using TS concepts)template&lt;typename I&gt; concept bool Input_iter = requires(I iter) { ++iter; }; template&lt;typename I&gt; concept bool Fwd_iter = Input_iter&lt;I&gt; &amp;&amp; requires(I iter) { iter++; } The compiler can determine refinement based on the sets of required operations (here, suffix ++).This decreases the burden on implementers of these types sincethey do not need any special declarations to “hook into the concept”.If two concepts have exactly the same requirements, they are logically equivalent (there is no refinement). Enforcement Flag a concept that has exactly the same requirements as another already-seen concept (neither is more refined).To disambiguate them, see T.24. T.24: Use tag classes or traits to differentiate concepts that differ only in semantics.ReasonTwo concepts requiring the same syntax but having different semantics leads to ambiguity unless the programmer differentiates them. Example (using TS concepts)template&lt;typename I&gt; // iterator providing random access concept bool RA_iter = ...; template&lt;typename I&gt; // iterator providing random access to contiguous data concept bool Contiguous_iter = RA_iter&lt;I&gt; &amp;&amp; is_contiguous&lt;I&gt;::value; // using is_contiguous trait The programmer (in a library) must define is_contiguous (a trait) appropriately. Wrapping a tag class into a concept leads to a simpler expression of this idea: template&lt;typename I&gt; concept Contiguous = is_contiguous&lt;I&gt;::value; template&lt;typename I&gt; concept bool Contiguous_iter = RA_iter&lt;I&gt; &amp;&amp; Contiguous&lt;I&gt;; The programmer (in a library) must define is_contiguous (a trait) appropriately. NoteTraits can be trait classes or type traits.These can be user-defined or standard-library ones.Prefer the standard-library ones. Enforcement The compiler flags ambiguous use of identical concepts. Flag the definition of identical concepts. T.25: Avoid complementary constraintsReasonClarity. Maintainability.Functions with complementary requirements expressed using negation are brittle. Example (using TS concepts)Initially, people will try to define functions with complementary requirements: template&lt;typename T&gt; requires !C&lt;T&gt; // bad void f(); template&lt;typename T&gt; requires C&lt;T&gt; void f(); This is better: template&lt;typename T&gt; // general template void f(); template&lt;typename T&gt; // specialization by concept requires C&lt;T&gt; void f(); The compiler will choose the unconstrained template only when C&lt;T&gt; isunsatisfied. If you do not want to (or cannot) define an unconstrainedversion of f(), then delete it. template&lt;typename T&gt; void f() = delete; The compiler will select the overload and emit an appropriate error. NoteComplementary constraints are unfortunately common in enable_if code: template&lt;typename T&gt; enable_if&lt;!C&lt;T&gt;, void&gt; // bad f(); template&lt;typename T&gt; enable_if&lt;C&lt;T&gt;, void&gt; f(); NoteComplementary requirements on one requirements is sometimes (wrongly) considered manageable.However, for two or more requirements the number of definitions needs can go up exponentially (2,4,9,16,…): C1&lt;T&gt; &amp;&amp; C2&lt;T&gt; !C1&lt;T&gt; &amp;&amp; C2&lt;T&gt; C1&lt;T&gt; &amp;&amp; !C2&lt;T&gt; !C1&lt;T&gt; &amp;&amp; !C2&lt;T&gt; Now the opportunities for errors multiply. Enforcement Flag pairs of functions with C&lt;T&gt; and !C&lt;T&gt; constraints T.26: Prefer to define concepts in terms of use-patterns rather than simple syntaxReasonThe definition is more readable and corresponds directly to what a user has to write.Conversions are taken into account. You don’t have to remember the names of all the type traits. Example (using TS concepts)You might be tempted to define a concept Equality like this: template&lt;typename T&gt; concept Equality = has_equal&lt;T&gt; &amp;&amp; has_not_equal&lt;T&gt;; Obviously, it would be better and easier just to use the standard EqualityComparable,but - just as an example - if you had to define such a concept, prefer: template&lt;typename T&gt; concept Equality = requires(T a, T b) { bool == { a == b } bool == { a != b } // axiom { !(a == b) == (a != b) } // axiom { a = b; =&gt; a == b } // =&gt; means &quot;implies&quot; } as opposed to defining two meaningless concepts has_equal and has_not_equal just as helpers in the definition of Equality.By “meaningless” we mean that we cannot specify the semantics of has_equal in isolation. Enforcement??? Template interfacesOver the years, programming with templates have suffered from a weak distinction between the interface of a templateand its implementation.Before concepts, that distinction had no direct language support.However, the interface to a template is a critical concept - a contract between a user and an implementer - and should be carefully designed. T.40: Use function objects to pass operations to algorithmsReasonFunction objects can carry more information through an interface than a “plain” pointer to function.In general, passing function objects gives better performance than passing pointers to functions. Example (using TS concepts)bool greater(double x, double y) { return x &gt; y; } sort(v, greater); // pointer to function: potentially slow sort(v, [](double x, double y) { return x &gt; y; }); // function object sort(v, std::greater&lt;&gt;); // function object bool greater_than_7(double x) { return x &gt; 7; } auto x = find_if(v, greater_than_7); // pointer to function: inflexible auto y = find_if(v, [](double x) { return x &gt; 7; }); // function object: carries the needed data auto z = find_if(v, Greater_than&lt;double&gt;(7)); // function object: carries the needed data You can, of course, generalize those functions using auto or (when and where available) concepts. For example: auto y1 = find_if(v, [](Ordered x) { return x &gt; 7; }); // require an ordered type auto z1 = find_if(v, [](auto x) { return x &gt; 7; }); // hope that the type has a &gt; NoteLambdas generate function objects. NoteThe performance argument depends on compiler and optimizer technology. Enforcement Flag pointer to function template arguments. Flag pointers to functions passed as arguments to a template (risk of false positives). T.41: Require only essential properties in a template’s conceptsReasonKeep interfaces simple and stable. Example (using TS concepts)Consider, a sort instrumented with (oversimplified) simple debug support: void sort(Sortable&amp; s) // sort sequence s { if (debug) cerr &lt;&lt; &quot;enter sort( &quot; &lt;&lt; s &lt;&lt; &quot;)\n&quot;; // ... if (debug) cerr &lt;&lt; &quot;exit sort( &quot; &lt;&lt; s &lt;&lt; &quot;)\n&quot;; } Should this be rewritten to: template&lt;Sortable S&gt; requires Streamable&lt;S&gt; void sort(S&amp; s) // sort sequence s { if (debug) cerr &lt;&lt; &quot;enter sort( &quot; &lt;&lt; s &lt;&lt; &quot;)\n&quot;; // ... if (debug) cerr &lt;&lt; &quot;exit sort( &quot; &lt;&lt; s &lt;&lt; &quot;)\n&quot;; } After all, there is nothing in Sortable that requires iostream support.On the other hand, there is nothing in the fundamental idea of sorting that says anything about debugging. NoteIf we require every operation used to be listed among the requirements, the interface becomes unstable:Every time we change the debug facilities, the usage data gathering, testing support, error reporting, etc.The definition of the template would need change and every use of the template would have to be recompiled.This is cumbersome, and in some environments infeasible. Conversely, if we use an operation in the implementation that is not guaranteed by concept checking,we may get a late compile-time error. By not using concept checking for properties of a template argument that is not considered essential,we delay checking until instantiation time.We consider this a worthwhile tradeoff. Note that using non-local, non-dependent names (such as debug and cerr) also introduces context dependencies that may lead to “mysterious” errors. NoteIt can be hard to decide which properties of a type is essential and which are not. Enforcement??? T.42: Use template aliases to simplify notation and hide implementation detailsReasonImproved readability.Implementation hiding.Note that template aliases replace many uses of traits to compute a type.They can also be used to wrap a trait. Exampletemplate&lt;typename T, size_t N&gt; class Matrix { // ... using Iterator = typename std::vector&lt;T&gt;::iterator; // ... }; This saves the user of Matrix from having to know that its elements are stored in a vector and also saves the user from repeatedly typing typename std::vector&lt;T&gt;::. Exampletemplate&lt;typename T&gt; void user(T&amp; c) { // ... typename container_traits&lt;T&gt;::value_type x; // bad, verbose // ... } template&lt;typename T&gt; using Value_type = typename container_traits&lt;T&gt;::value_type; This saves the user of Value_type from having to know the technique used to implement value_types. template&lt;typename T&gt; void user2(T&amp; c) { // ... Value_type&lt;T&gt; x; // ... } NoteA simple, common use could be expressed: “Wrap traits!” Enforcement Flag use of typename as a disambiguator outside using declarations. ??? T.43: Prefer using over typedef for defining aliasesReasonImproved readability: With using, the new name comes first rather than being embedded somewhere in a declaration.Generality: using can be used for template aliases, whereas typedefs can’t easily be templates.Uniformity: using is syntactically similar to auto. Exampletypedef int (*PFI)(int); // OK, but convoluted using PFI2 = int (*)(int); // OK, preferred template&lt;typename T&gt; typedef int (*PFT)(T); // error template&lt;typename T&gt; using PFT2 = int (*)(T); // OK Enforcement Flag uses of typedef. This will give a lot of “hits” :-( T.44: Use function templates to deduce class template argument types (where feasible)ReasonWriting the template argument types explicitly can be tedious and unnecessarily verbose. Exampletuple&lt;int, string, double&gt; t1 = {1, &quot;Hamlet&quot;, 3.14}; // explicit type auto t2 = make_tuple(1, &quot;Ophelia&quot;s, 3.14); // better; deduced type Note the use of the s suffix to ensure that the string is a std::string, rather than a C-style string. NoteSince you can trivially write a make_T function, so could the compiler. Thus, make_T functions may become redundant in the future. ExceptionSometimes there isn’t a good way of getting the template arguments deduced and sometimes, you want to specify the arguments explicitly: vector&lt;double&gt; v = { 1, 2, 3, 7.9, 15.99 }; list&lt;Record*&gt; lst; NoteNote that C++17 will make this rule redundant by allowing the template arguments to be deduced directly from constructor arguments:Template parameter deduction for constructors (Rev. 3).For example: tuple t1 = {1, &quot;Hamlet&quot;s, 3.14}; // deduced: tuple&lt;int, string, double&gt; EnforcementFlag uses where an explicitly specialized type exactly matches the types of the arguments used. T.46: Require template arguments to be at least Regular or SemiRegularReason Readability. Preventing surprises and errors. Most uses support that anyway. Exampleclass X { // ... public: explicit X(int); X(const X&amp;); // copy X operator=(const X&amp;); X(X&amp;&amp;) noexcept; // move X&amp; operator=(X&amp;&amp;) noexcept; ~X(); // ... no more constructors ... }; X x {1}; // fine X y = x; // fine std::vector&lt;X&gt; v(10); // error: no default constructor NoteSemiregular requires default constructible. Enforcement Flag types that are not at least SemiRegular. T.47: Avoid highly visible unconstrained templates with common namesReason An unconstrained template argument is a perfect match for anything so such a template can be preferred over more specific types that require minor conversions. This is particularly annoying/dangerous when ADL is used. Common names make this problem more likely. Examplenamespace Bad { struct S { int m; }; template&lt;typename T1, typename T2&gt; bool operator==(T1, T2) { cout &lt;&lt; &quot;Bad\n&quot;; return true; } } namespace T0 { bool operator==(int, Bad::S) { cout &lt;&lt; &quot;T0\n&quot;; return true; } // compare to int void test() { Bad::S bad{ 1 }; vector&lt;int&gt; v(10); bool b = 1 == bad; bool b2 = v.size() == bad; } } This prints T0 and Bad. Now the == in Bad was designed to cause trouble, but would you have spotted the problem in real code?The problem is that v.size() returns an unsigned integer so that a conversion is needed to call the local ==;the == in Bad requires no conversions.Realistic types, such as the standard-library iterators can be made to exhibit similar anti-social tendencies. NoteIf an unconstrained template is defined in the same namespace as a type,that unconstrained template can be found by ADL (as happened in the example).That is, it is highly visible. NoteThis rule should not be necessary, but the committee cannot agree to exclude unconstrained templated from ADL. Unfortunately this will get many false positives; the standard library violates this widely, by putting many unconstrained templates and types into the single namespace std. EnforcementFlag templates defined in a namespace where concrete types are also defined (maybe not feasible until we have concepts). T.48: If your compiler does not support concepts, fake them with enable_ifReasonBecause that’s the best we can do without direct concept support.enable_if can be used to conditionally define functions and to select among a set of functions. Exampleenable_if&lt;???&gt; NoteBeware of complementary constraints.Faking concept overloading using enable_if sometimes forces us to use that error-prone design technique. Enforcement??? T.49: Where possible, avoid type-erasureReasonType erasure incurs an extra level of indirection by hiding type information behind a separate compilation boundary. Example??? Exceptions: Type erasure is sometimes appropriate, such as for std::function. Enforcement??? NoteT.def: Template definitionsA template definition (class or function) can contain arbitrary code, so only a comprehensive review of C++ programming techniques would cover this topic.However, this section focuses on what is specific to template implementation.In particular, it focuses on a template definition’s dependence on its context. T.60: Minimize a template’s context dependenciesReasonEases understanding.Minimizes errors from unexpected dependencies.Eases tool creation. Exampletemplate&lt;typename C&gt; void sort(C&amp; c) { std::sort(begin(c), end(c)); // necessary and useful dependency } template&lt;typename Iter&gt; Iter algo(Iter first, Iter last) { for (; first != last; ++first) { auto x = sqrt(*first); // potentially surprising dependency: which sqrt()? helper(first, x); // potentially surprising dependency: // helper is chosen based on first and x TT var = 7; // potentially surprising dependency: which TT? } } NoteTemplates typically appear in header files so their context dependencies are more vulnerable to #include order dependencies than functions in .cpp files. NoteHaving a template operate only on its arguments would be one way of reducing the number of dependencies to a minimum, but that would generally be unmanageable.For example, an algorithm usually uses other algorithms and invoke operations that does not exclusively operate on arguments.And don’t get us started on macros! See also: T.69 Enforcement??? Tricky T.61: Do not over-parameterize members (SCARY)ReasonA member that does not depend on a template parameter cannot be used except for a specific template argument.This limits use and typically increases code size. Example, badtemplate&lt;typename T, typename A = std::allocator{}&gt; // requires Regular&lt;T&gt; &amp;&amp; Allocator&lt;A&gt; class List { public: struct Link { // does not depend on A T elem; T* pre; T* suc; }; using iterator = Link*; iterator first() const { return head; } // ... private: Link* head; }; List&lt;int&gt; lst1; List&lt;int, My_allocator&gt; lst2; ??? This looks innocent enough, but ??? template&lt;typename T&gt; struct Link { T elem; T* pre; T* suc; }; template&lt;typename T, typename A = std::allocator{}&gt; // requires Regular&lt;T&gt; &amp;&amp; Allocator&lt;A&gt; class List2 { public: using iterator = Link&lt;T&gt;*; iterator first() const { return head; } // ... private: Link* head; }; List&lt;int&gt; lst1; List&lt;int, My_allocator&gt; lst2; ??? Enforcement Flag member types that do not depend on every template argument Flag member functions that do not depend on every template argument T.62: Place non-dependent class template members in a non-templated base classReason Allow the base class members to be used without specifying template arguments and without template instantiation. Exampletemplate&lt;typename T&gt; class Foo { public: enum { v1, v2 }; // ... }; ??? struct Foo_base { enum { v1, v2 }; // ... }; template&lt;typename T&gt; class Foo : public Foo_base { public: // ... }; NoteA more general version of this rule would be“If a template class member depends on only N template parameters out of M, place it in a base class with only N parameters.”For N == 1, we have a choice of a base class of a class in the surrounding scope as in T.61. ??? What about constants? class statics? Enforcement Flag ??? T.64: Use specialization to provide alternative implementations of class templatesReasonA template defines a general interface.Specialization offers a powerful mechanism for providing alternative implementations of that interface. Example??? string specialization (==) ??? representation specialization ? Note??? Enforcement??? T.65: Use tag dispatch to provide alternative implementations of a functionReason A template defines a general interface. Tag dispatch allows us to select implementations based on specific properties of an argument type. Performance. ExampleThis is a simplified version of std::copy (ignoring the possibility of non-contiguous sequences) struct pod_tag {}; struct non_pod_tag {}; template&lt;class T&gt; struct copy_trait { using tag = non_pod_tag; }; // T is not &quot;plain old data&quot; template&lt;&gt; struct copy_trait&lt;int&gt; { using tag = pod_tag; }; // int is &quot;plain old data&quot; template&lt;class Iter&gt; Out copy_helper(Iter first, Iter last, Iter out, pod_tag) { // use memmove } template&lt;class Iter&gt; Out copy_helper(Iter first, Iter last, Iter out, non_pod_tag) { // use loop calling copy constructors } template&lt;class Itert&gt; Out copy(Iter first, Iter last, Iter out) { return copy_helper(first, last, out, typename copy_trait&lt;Iter&gt;::tag{}) } void use(vector&lt;int&gt;&amp; vi, vector&lt;int&gt;&amp; vi2, vector&lt;string&gt;&amp; vs, vector&lt;string&gt;&amp; vs2) { copy(vi.begin(), vi.end(), vi2.begin()); // uses memmove copy(vs.begin(), vs.end(), vs2.begin()); // uses a loop calling copy constructors } This is a general and powerful technique for compile-time algorithm selection. NoteWhen concepts become widely available such alternatives can be distinguished directly: template&lt;class Iter&gt; requires Pod&lt;Value_type&lt;iter&gt;&gt; Out copy_helper(In, first, In last, Out out) { // use memmove } template&lt;class Iter&gt; Out copy_helper(In, first, In last, Out out) { // use loop calling copy constructors } Enforcement??? T.67: Use specialization to provide alternative implementations for irregular typesReason ??? Example??? Enforcement??? T.68: Use {} rather than () within templates to avoid ambiguitiesReason () is vulnerable to grammar ambiguities. Exampletemplate&lt;typename T, typename U&gt; void f(T t, U u) { T v1(x); // is v1 a function of a variable? T v2 {x}; // variable auto x = T(u); // construction or cast? } f(1, &quot;asdf&quot;); // bad: cast from const char* to int Enforcement flag () initializers flag function-style casts T.69: Inside a template, don’t make an unqualified nonmember function call unless you intend it to be a customization pointReason Provide only intended flexibility. Avoid vulnerability to accidental environmental changes. ExampleThere are three major ways to let calling code customize a template. template&lt;class T&gt; // Call a member function void test1(T t) { t.f(); // require T to provide f() } template&lt;class T&gt; void test2(T t) // Call a nonmember function without qualification { f(t); // require f(/*T*/) be available in caller&apos;s scope or in T&apos;s namespace } template&lt;class T&gt; void test3(T t) // Invoke a &quot;trait&quot; { test_traits&lt;T&gt;::f(t); // require customizing test_traits&lt;&gt; // to get non-default functions/types } A trait is usually a type alias to compute a type,a constexpr function to compute a value,or a traditional traits template to be specialized on the user’s type. NoteIf you intend to call your own helper function helper(t) with a value t that depends on a template type parameter,put it in a ::detail namespace and qualify the call as detail::helper(t);.An unqualified call becomes a customization point where any function helper in the namespace of t‘s type can be invoked;this can cause problems like unintentionally invoking unconstrained function templates. Enforcement In a template, flag an unqualified call to a nonmember function that passes a variable of dependent type when there is a nonmember function of the same name in the template’s namespace. T.temp-hier: Template and hierarchy rules:Templates are the backbone of C++’s support for generic programming and class hierarchies the backbone of its supportfor object-oriented programming.The two language mechanisms can be used effectively in combination, but a few design pitfalls must be avoided. T.80: Do not naively templatize a class hierarchyReasonTemplating a class hierarchy that has many functions, especially many virtual functions, can lead to code bloat. Example, badtemplate&lt;typename T&gt; struct Container { // an interface virtual T* get(int i); virtual T* first(); virtual T* next(); virtual void sort(); }; template&lt;typename T&gt; class Vector : public Container&lt;T&gt; { public: // ... }; Vector&lt;int&gt; vi; Vector&lt;string&gt; vs; It is probably a dumb idea to define a sort as a member function of a container, but it is not unheard of and it makes a good example of what not to do. Given this, the compiler cannot know if vector&lt;int&gt;::sort() is called, so it must generate code for it.Similar for vector&lt;string&gt;::sort().Unless those two functions are called that’s code bloat.Imagine what this would do to a class hierarchy with dozens of member functions and dozens of derived classes with many instantiations. NoteIn many cases you can provide a stable interface by not parameterizing a base;see “stable base” and OO and GP Enforcement Flag virtual functions that depend on a template argument. ??? False positives T.81: Do not mix hierarchies and arraysReasonAn array of derived classes can implicitly “decay” to a pointer to a base class with potential disastrous results. ExampleAssume that Apple and Pear are two kinds of Fruits. void maul(Fruit* p) { *p = Pear{}; // put a Pear into *p p[1] = Pear{}; // put a Pear into p[1] } Apple aa [] = { an_apple, another_apple }; // aa contains Apples (obviously!) maul(aa); Apple&amp; a0 = &amp;aa[0]; // a Pear? Apple&amp; a1 = &amp;aa[1]; // a Pear? Probably, aa[0] will be a Pear (without the use of a cast!).If sizeof(Apple) != sizeof(Pear) the access to aa[1] will not be aligned to the proper start of an object in the array.We have a type violation and possibly (probably) a memory corruption.Never write such code. Note that maul() violates the a T* points to an individual object rule. Alternative: Use a proper (templatized) container: void maul2(Fruit* p) { *p = Pear{}; // put a Pear into *p } vector&lt;Apple&gt; va = { an_apple, another_apple }; // va contains Apples (obviously!) maul2(va); // error: cannot convert a vector&lt;Apple&gt; to a Fruit* maul2(&amp;va[0]); // you asked for it Apple&amp; a0 = &amp;va[0]; // a Pear? Note that the assignment in maul2() violated the no-slicing rule. Enforcement Detect this horror! T.82: Linearize a hierarchy when virtual functions are undesirableReason ??? Example??? Enforcement??? T.83: Do not declare a member function template virtualReasonC++ does not support that.If it did, vtbls could not be generated until link time.And in general, implementations must deal with dynamic linking. Example, don’tclass Shape { // ... template&lt;class T&gt; virtual bool intersect(T* p); // error: template cannot be virtual }; NoteWe need a rule because people keep asking about this AlternativeDouble dispatch, visitors, calculate which function to call EnforcementThe compiler handles that. T.84: Use a non-template core implementation to provide an ABI-stable interfaceReasonImprove stability of code.Avoid code bloat. ExampleIt could be a base class: struct Link_base { // stable Link_base* suc; Link_base* pre; }; template&lt;typename T&gt; // templated wrapper to add type safety struct Link : Link_base { T val; }; struct List_base { Link_base* first; // first element (if any) int sz; // number of elements void add_front(Link_base* p); // ... }; template&lt;typename T&gt; class List : List_base { public: void put_front(const T&amp; e) { add_front(new Link&lt;T&gt;{e}); } // implicit cast to Link_base T&amp; front() { static_cast&lt;Link&lt;T&gt;*&gt;(first).val; } // explicit cast back to Link&lt;T&gt; // ... }; List&lt;int&gt; li; List&lt;string&gt; ls; Now there is only one copy of the operations linking and unlinking elements of a List.The Link and List classes do nothing but type manipulation. Instead of using a separate “base” type, another common technique is to specialize for void or void* and have the general template for T be just the safely-encapsulated casts to and from the core void implementation. Alternative: Use a Pimpl implementation. Enforcement??? T.var: Variadic template rules??? T.100: Use variadic templates when you need a function that takes a variable number of arguments of a variety of typesReasonVariadic templates is the most general mechanism for that, and is both efficient and type-safe. Don’t use C varargs. Example??? printf Enforcement Flag uses of va_arg in user code. T.101: ??? How to pass arguments to a variadic template ???Reason ??? Example??? beware of move-only and reference arguments Enforcement??? T.102: How to process arguments to a variadic templateReason ??? Example??? forwarding, type checking, references Enforcement??? T.103: Don’t use variadic templates for homogeneous argument listsReasonThere are more precise ways of specifying a homogeneous sequence, such as an initializer_list. Example??? Enforcement??? T.meta: Template metaprogramming (TMP)Templates provide a general mechanism for compile-time programming. Metaprogramming is programming where at least one input or one result is a type.Templates offer Turing-complete (modulo memory capacity) duck typing at compile time.The syntax and techniques needed are pretty horrendous. T.120: Use template metaprogramming only when you really need toReasonTemplate metaprogramming is hard to get right, slows down compilation, and is often very hard to maintain.However, there are real-world examples where template metaprogramming provides better performance than any alternative short of expert-level assembly code.Also, there are real-world examples where template metaprogramming expresses the fundamental ideas better than run-time code.For example, if you really need AST manipulation at compile time (e.g., for optional matrix operation folding) there may be no other way in C++. Example, bad??? Example, badenable_if Instead, use concepts. But see How to emulate concepts if you don’t have language support. Example??? good Alternative: If the result is a value, rather than a type, use a constexpr function. NoteIf you feel the need to hide your template metaprogramming in macros, you have probably gone too far. T.121: Use template metaprogramming primarily to emulate conceptsReasonUntil concepts become generally available, we need to emulate them using TMP.Use cases that require concepts (e.g. overloading based on concepts) are among the most common (and simple) uses of TMP. Exampletemplate&lt;typename Iter&gt; /*requires*/ enable_if&lt;random_access_iterator&lt;Iter&gt;, void&gt; advance(Iter p, int n) { p += n; } template&lt;typename Iter&gt; /*requires*/ enable_if&lt;forward_iterator&lt;Iter&gt;, void&gt; advance(Iter p, int n) { assert(n &gt;= 0); while (n--) ++p;} NoteSuch code is much simpler using concepts: void advance(RandomAccessIterator p, int n) { p += n; } void advance(ForwardIterator p, int n) { assert(n &gt;= 0); while (n--) ++p;} Enforcement??? T.122: Use templates (usually template aliases) to compute types at compile timeReasonTemplate metaprogramming is the only directly supported and half-way principled way of generating types at compile time. Note“Traits” techniques are mostly replaced by template aliases to compute types and constexpr functions to compute values. Example??? big object / small object optimization Enforcement??? T.123: Use constexpr functions to compute values at compile timeReasonA function is the most obvious and conventional way of expressing the computation of a value.Often a constexpr function implies less compile-time overhead than alternatives. Note“Traits” techniques are mostly replaced by template aliases to compute types and constexpr functions to compute values. Exampletemplate&lt;typename T&gt; // requires Number&lt;T&gt; constexpr T pow(T v, int n) // power/exponential { T res = 1; while (n--) res *= v; return res; } constexpr auto f7 = pow(pi, 7); Enforcement Flag template metaprograms yielding a value. These should be replaced with constexpr functions. T.124: Prefer to use standard-library TMP facilitiesReasonFacilities defined in the standard, such as conditional, enable_if, and tuple, are portable and can be assumed to be known. Example??? Enforcement??? T.125: If you need to go beyond the standard-library TMP facilities, use an existing libraryReasonGetting advanced TMP facilities is not easy and using a library makes you part of a (hopefully supportive) community.Write your own “advanced TMP support” only if you really have to. Example??? Enforcement??? Other template rulesT.140: Name all operations with potential for reuseReasonDocumentation, readability, opportunity for reuse. Examplestruct Rec { string name; string addr; int id; // unique identifier }; bool same(const Rec&amp; a, const Rec&amp; b) { return a.id == b.id; } vector&lt;Rec*&gt; find_id(const string&amp; name); // find all records for &quot;name&quot; auto x = find_if(vr.begin(), vr.end(), [&amp;](Rec&amp; r) { if (r.name.size() != n.size()) return false; // name to compare to is in n for (int i = 0; i &lt; r.name.size(); ++i) if (tolower(r.name[i]) != tolower(n[i])) return false; return true; } ); There is a useful function lurking here (case insensitive string comparison), as there often is when lambda arguments get large. bool compare_insensitive(const string&amp; a, const string&amp; b) { if (a.size() != b.size()) return false; for (int i = 0; i &lt; a.size(); ++i) if (tolower(a[i]) != tolower(b[i])) return false; return true; } auto x = find_if(vr.begin(), vr.end(), [&amp;](Rec&amp; r) { compare_insensitive(r.name, n); } ); Or maybe (if you prefer to avoid the implicit name binding to n): auto cmp_to_n = [&amp;n](const string&amp; a) { return compare_insensitive(a, n); }; auto x = find_if(vr.begin(), vr.end(), [](const Rec&amp; r) { return cmp_to_n(r.name); } ); Notewhether functions, lambdas, or operators. Exception Lambdas logically used only locally, such as an argument to for_each and similar control flow algorithms. Lambdas as initializers Enforcement (hard) flag similar lambdas ??? T.141: Use an unnamed lambda if you need a simple function object in one place onlyReasonThat makes the code concise and gives better locality than alternatives. Exampleauto earlyUsersEnd = std::remove_if(users.begin(), users.end(), [](const User &amp;a) { return a.id &gt; 100; }); ExceptionNaming a lambda can be useful for clarity even if it is used only once. Enforcement Look for identical and near identical lambdas (to be replaced with named functions or named lambdas). T.142?: Use template variables to simplify notationReasonImproved readability. Example??? Enforcement??? T.143: Don’t write unintentionally nongeneric codeReasonGenerality. Reusability. Don’t gratuitously commit to details; use the most general facilities available. ExampleUse != instead of &lt; to compare iterators; != works for more objects because it doesn’t rely on ordering. for (auto i = first; i &lt; last; ++i) { // less generic // ... } for (auto i = first; i != last; ++i) { // good; more generic // ... } Of course, range-for is better still where it does what you want. ExampleUse the least-derived class that has the functionality you need. class Base { public: Bar f(); Bar g(); }; class Derived1 : public Base { public: Bar h(); }; class Derived2 : public Base { public: Bar j(); }; // bad, unless there is a specific reason for limiting to Derived1 objects only void my_func(Derived1&amp; param) { use(param.f()); use(param.g()); } // good, uses only Base interface so only commit to that void my_func(Base&amp; param) { use(param.f()); use(param.g()); } Enforcement Flag comparison of iterators using &lt; instead of !=. Flag x.size() == 0 when x.empty() or x.is_empty() is available. Emptiness works for more containers than size(), because some containers don’t know their size or are conceptually of unbounded size. Flag functions that take a pointer or reference to a more-derived type but only use functions declared in a base type. T.144: Don’t specialize function templatesReasonYou can’t partially specialize a function template per language rules. You can fully specialize a function template but you almost certainly want to overload instead – because function template specializations don’t participate in overloading, they don’t act as you probably wanted. Rarely, you should actually specialize by delegating to a class template that you can specialize properly. Example??? Exceptions: If you do have a valid reason to specialize a function template, just write a single function template that delegates to a class template, then specialize the class template (including the ability to write partial specializations). Enforcement Flag all specializations of a function template. Overload instead. T.150: Check that a class matches a concept using static_assertReasonIf you intend for a class to match a concept, verifying that early saves users pain. Exampleclass X { public: X() = delete; X(const X&amp;) = default; X(X&amp;&amp;) = default; X&amp; operator=(const X&amp;) = default; // ... }; Somewhere, possibly in an implementation file, let the compiler check the desired properties of X: static_assert(Default_constructible&lt;X&gt;); // error: X has no default constructor static_assert(Copyable&lt;X&gt;); // error: we forgot to define X&apos;s move constructor EnforcementNot feasible. CPL: C-style programmingC and C++ are closely related languages.They both originate in “Classic C” from 1978 and have evolved in ISO committees since then.Many attempts have been made to keep them compatible, but neither is a subset of the other. C rule summary: CPL.1: Prefer C++ to C CPL.2: If you must use C, use the common subset of C and C++, and compile the C code as C++ CPL.3: If you must use C for interfaces, use C++ in the calling code using such interfaces CPL.1: Prefer C++ to CReasonC++ provides better type checking and more notational support.It provides better support for high-level programming and often generates faster code. Examplechar ch = 7; void* pv = &amp;ch; int* pi = pv; // not C++ *pi = 999; // overwrite sizeof(int) bytes near &amp;ch The rules for implicit casting to and from void* in C are subtle and unenforced.In particular, this example violates a rule against converting to a type with stricter alignment. EnforcementUse a C++ compiler. CPL.2: If you must use C, use the common subset of C and C++, and compile the C code as C++ReasonThat subset can be compiled with both C and C++ compilers, and when compiled as C++ is better type checked than “pure C.” Exampleint* p1 = malloc(10 * sizeof(int)); // not C++ int* p2 = static_cast&lt;int*&gt;(malloc(10 * sizeof(int))); // not C, C-style C++ int* p3 = new int[10]; // not C int* p4 = (int*) malloc(10 * sizeof(int)); // both C and C++ Enforcement Flag if using a build mode that compiles code as C. The C++ compiler will enforce that the code is valid C++ unless you use C extension options. CPL.3: If you must use C for interfaces, use C++ in the calling code using such interfacesReasonC++ is more expressive than C and offers better support for many types of programming. ExampleFor example, to use a 3rd party C library or C systems interface, define the low-level interface in the common subset of C and C++ for better type checking.Whenever possible encapsulate the low-level interface in an interface that follows the C++ guidelines (for better abstraction, memory safety, and resource safety) and use that C++ interface in C++ code. ExampleYou can call C from C++: // in C: double sqrt(double); // in C++: extern &quot;C&quot; double sqrt(double); sqrt(2); ExampleYou can call C++ from C: // in C: X call_f(struct Y*, int); // in C++: extern &quot;C&quot; X call_f(Y* p, int i) { return p-&gt;f(i); // possibly a virtual function call } EnforcementNone needed SF: Source filesDistinguish between declarations (used as interfaces) and definitions (used as implementations).Use header files to represent interfaces and to emphasize logical structure. Source file rule summary: SF.1: Use a .cpp suffix for code files and .h for interface files if your project doesn’t already follow another convention SF.2: A .h file may not contain object definitions or non-inline function definitions SF.3: Use .h files for all declarations used in multiple source files SF.4: Include .h files before other declarations in a file SF.5: A .cpp file must include the .h file(s) that defines its interface SF.6: Use using namespace directives for transition, for foundation libraries (such as std), or within a local scope (only) SF.7: Don’t write using namespace at global scope in a header file SF.8: Use #include guards for all .h files SF.9: Avoid cyclic dependencies among source files SF.10: Avoid dependencies on implicitly #included names SF.11: Header files should be self-contained SF.20: Use namespaces to express logical structure SF.21: Don’t use an unnamed (anonymous) namespace in a header SF.22: Use an unnamed (anonymous) namespace for all internal/nonexported entities SF.1: Use a .cpp suffix for code files and .h for interface files if your project doesn’t already follow another conventionReasonIt’s a longstanding convention.But consistency is more important, so if your project uses something else, follow that. NoteThis convention reflects a common use pattern:Headers are more often shared with C to compile as both C++ and C, which typically uses .h,and it’s easier to name all headers .h instead of having different extensions for just those headers that are intended to be shared with C.On the other hand, implementation files are rarely shared with C and so should typically be distinguished from .c files,so it’s normally best to name all C++ implementation files something else (such as .cpp). The specific names .h and .cpp are not required (just recommended as a default) and other names are in widespread use.Examples are .hh, .C, and .cxx. Use such names equivalently.In this document, we refer to .h and .cpp as a shorthand for header and implementation files,even though the actual extension may be different. Your IDE (if you use one) may have strong opinions about suffices. Example// foo.h: extern int a; // a declaration extern void foo(); // foo.cpp: int a; // a definition void foo() { ++a; } foo.h provides the interface to foo.cpp. Global variables are best avoided. Example, bad// foo.h: int a; // a definition void foo() { ++a; } #include &lt;foo.h&gt; twice in a program and you get a linker error for two one-definition-rule violations. Enforcement Flag non-conventional file names. Check that .h and .cpp (and equivalents) follow the rules below. SF.2: A .h file may not contain object definitions or non-inline function definitionsReasonIncluding entities subject to the one-definition rule leads to linkage errors. Example// file.h: namespace Foo { int x = 7; int xx() { return x+x; } } // file1.cpp: #include &lt;file.h&gt; // ... more ... // file2.cpp: #include &lt;file.h&gt; // ... more ... Linking file1.cpp and file2.cpp will give two linker errors. Alternative formulation: A .h file must contain only: #includes of other .h files (possibly with include guards) templates class definitions function declarations extern declarations inline function definitions constexpr definitions const definitions using alias definitions ??? EnforcementCheck the positive list above. SF.3: Use .h files for all declarations used in multiple source filesReasonMaintainability. Readability. Example, bad// bar.cpp: void bar() { cout &lt;&lt; &quot;bar\n&quot;; } // foo.cpp: extern void bar(); void foo() { bar(); } A maintainer of bar cannot find all declarations of bar if its type needs changing.The user of bar cannot know if the interface used is complete and correct. At best, error messages come (late) from the linker. Enforcement Flag declarations of entities in other source files not placed in a .h. SF.4: Include .h files before other declarations in a fileReasonMinimize context dependencies and increase readability. Example#include &lt;vector&gt; #include &lt;algorithm&gt; #include &lt;string&gt; // ... my code here ... Example, bad#include &lt;vector&gt; // ... my code here ... #include &lt;algorithm&gt; #include &lt;string&gt; NoteThis applies to both .h and .cpp files. NoteThere is an argument for insulating code from declarations and macros in header files by #including headers after the code we want to protect(as in the example labeled “bad”).However that only works for one file (at one level): Use that technique in a header included with other headers and the vulnerability reappears. a namespace (an “implementation namespace”) can protect against many context dependencies. full protection and flexibility require modules. See also: Working Draft, Extensions to C++ for Modules Modules, Componentization, and Transition EnforcementEasy. SF.5: A .cpp file must include the .h file(s) that defines its interfaceReasonThis enables the compiler to do an early consistency check. Example, bad// foo.h: void foo(int); int bar(long); int foobar(int); // foo.cpp: void foo(int) { /* ... */ } int bar(double) { /* ... */ } double foobar(int); The errors will not be caught until link time for a program calling bar or foobar. Example// foo.h: void foo(int); int bar(long); int foobar(int); // foo.cpp: #include &lt;foo.h&gt; void foo(int) { /* ... */ } int bar(double) { /* ... */ } double foobar(int); // error: wrong return type The return-type error for foobar is now caught immediately when foo.cpp is compiled.The argument-type error for bar cannot be caught until link time because of the possibility of overloading, but systematic use of .h files increases the likelihood that it is caught earlier by the programmer. Enforcement??? SF.6: Use using namespace directives for transition, for foundation libraries (such as std), or within a local scope (only)Reason using namespace can lead to name clashes, so it should be used sparingly. However, it is not always possible to qualify every name from a namespace in user code (e.g., during transition) and sometimes a namespace is so fundamental and prevalent in a code base, that consistent qualification would be verbose and distracting. Example#include &lt;string&gt; #include &lt;vector&gt; #include &lt;iostream&gt; #include &lt;memory&gt; #include &lt;algorithm&gt; using namespace std; // ... Here (obviously), the standard library is used pervasively and apparently no other library is used, so requiring std:: everywherecould be distracting. ExampleThe use of using namespace std; leaves the programmer open to a name clash with a name from the standard library #include &lt;cmath&gt; using namespace std; int g(int x) { int sqrt = 7; // ... return sqrt(x); // error } However, this is not particularly likely to lead to a resolution that is not an error andpeople who use using namespace std are supposed to know about std and about this risk. NoteA .cpp file is a form of local scope.There is little difference in the opportunities for name clashes in an N-line .cpp containing a using namespace X,an N-line function containing a using namespace X,and M functions each containing a using namespace Xwith N lines of code in total. NoteDon’t write using namespace in a header file. EnforcementFlag multiple using namespace directives for different namespaces in a single source file. SF.7: Don’t write using namespace at global scope in a header fileReasonDoing so takes away an #includer’s ability to effectively disambiguate and to use alternatives. It also makes #included headers order-dependent as they may have different meaning when included in different orders. Example// bad.h #include &lt;iostream&gt; using namespace std; // bad // user.cpp #include &quot;bad.h&quot; bool copy(/*... some parameters ...*/); // some function that happens to be named copy int main() { copy(/*...*/); // now overloads local ::copy and std::copy, could be ambiguous } EnforcementFlag using namespace at global scope in a header file. SF.8: Use #include guards for all .h filesReasonTo avoid files being #included several times. In order to avoid include guard collisions, do not just name the guard after the filename.Be sure to also include a key and good differentiator, such as the name of library or componentthe header file is part of. Example// file foobar.h: #ifndef LIBRARY_FOOBAR_H #define LIBRARY_FOOBAR_H // ... declarations ... #endif // LIBRARY_FOOBAR_H EnforcementFlag .h files without #include guards. NoteSome implementations offer vendor extensions like #pragma once as alternative to include guards.It is not standard and it is not portable. It injects the hosting machine’s filesystem semanticsinto your program, in addition to locking you down to a vendor.Our recommendation is to write in ISO C++: See rule P.2. SF.9: Avoid cyclic dependencies among source filesReasonCycles complicates comprehension and slows down compilation.Complicates conversion to use language-supported modules (when they become available). NoteEliminate cycles; don’t just break them with #include guards. Example, bad// file1.h: #include &quot;file2.h&quot; // file2.h: #include &quot;file3.h&quot; // file3.h: #include &quot;file1.h&quot; EnforcementFlag all cycles. SF.10: Avoid dependencies on implicitly #included namesReasonAvoid surprises.Avoid having to change #includes if an #included header changes.Avoid accidentally becoming dependent on implementation details and logically separate entities included in a header. Example#include &lt;iostream&gt; using namespace std; void use() // bad { string s; cin &gt;&gt; s; // fine getline(cin, s); // error: getline() not defined if (s == &quot;surprise&quot;) { // error == not defined // ... } } &lt;iostream&gt; exposes the definition of std::string (“why?” makes for a fun trivia question),but it is not required to do so by transitively including the entire &lt;string&gt; header,resulting in the popular beginner question “why doesn’t getline(cin,s); work?”or even an occasional “strings cannot be compared with ==). The solution is to explicitly #include &lt;string&gt;: #include &lt;iostream&gt; #include &lt;string&gt; using namespace std; void use() { string s; cin &gt;&gt; s; // fine getline(cin, s); // fine if (s == &quot;surprise&quot;) { // fine // ... } } NoteSome headers exist exactly to collect a set of consistent declarations from a variety of headers.For example: // basic_std_lib.h: #include &lt;vector&gt; #include &lt;string&gt; #include &lt;map&gt; #include &lt;iostream&gt; #include &lt;random&gt; #include &lt;vector&gt; a user can now get that set of declarations with a single #include“ #include &quot;basic_std_lib.h&quot; This rule against implicit inclusion is not meant to prevent such deliberate aggregation. EnforcementEnforcement would require some knowledge about what in a header is meant to be “exported” to users and what is there to enable implementation.No really good solution is possible until we have modules. SF.11: Header files should be self-containedReasonUsability, headers should be simple to use and work when included on their own.Headers should encapsulate the functionality they provide.Avoid clients of a header having to manage that header’s dependencies. Example#include &quot;helpers.h&quot; // helpers.h depends on std::string and includes &lt;string&gt; NoteFailing to follow this results in difficult to diagnose errors for clients of a header. EnforcementA test should verify that the header file itself compiles or that a cpp file which only includes the header file compiles. SF.20: Use namespaces to express logical structureReason ??? Example??? Enforcement??? SF.21: Don’t use an unnamed (anonymous) namespace in a headerReasonIt is almost always a bug to mention an unnamed namespace in a header file. Example??? Enforcement Flag any use of an anonymous namespace in a header file. SF.22: Use an unnamed (anonymous) namespace for all internal/nonexported entitiesReasonNothing external can depend on an entity in a nested unnamed namespace.Consider putting every definition in an implementation source file in an unnamed namespace unless that is defining an “external/exported” entity. ExampleAn API class and its members can’t live in an unnamed namespace; but any “helper” class or function that is defined in an implementation source file should be at an unnamed namespace scope. ??? Enforcement ??? SL: The Standard LibraryUsing only the bare language, every task is tedious (in any language).Using a suitable library any task can be reasonably simple. The standard library has steadily grown over the years.Its description in the standard is now larger than that of the language features.So, it is likely that this library section of the guidelines will eventually grow in size to equal or exceed all the rest. &lt;&lt; ??? We need another level of rule numbering ??? &gt;&gt; C++ Standard Library component summary: SL.con: Containers SL.str: String SL.io: Iostream SL.regex: Regex SL.chrono: Time SL.C: The C Standard Library Standard-library rule summary: SL.1: Use libraries wherever possible SL.2: Prefer the standard library to other libraries SL.3: Do not add non-standard entities to namespace std SL.4: Use the standard library in a type-safe manner ??? SL.1: Use libraries wherever possibleReasonSave time. Don’t re-invent the wheel.Don’t replicate the work of others.Benefit from other people’s work when they make improvements.Help other people when you make improvements. SL.2: Prefer the standard library to other librariesReasonMore people know the standard library.It is more likely to be stable, well-maintained, and widely available than your own code or most other libraries. SL.3: Do not add non-standard entities to namespace stdReasonAdding to std may change the meaning of otherwise standards conforming code.Additions to std may clash with future versions of the standard. Example??? EnforcementPossible, but messy and likely to cause problems with platforms. SL.4: Use the standard library in a type-safe mannerReasonBecause, obviously, breaking this rule can lead to undefined behavior, memory corruption, and all kinds of other bad errors. NoteThis is a semi-philosophical meta-rule, which needs many supporting concrete rules.We need it as an umbrella for the more specific rules. Summary of more specific rules: SL.4: Use the standard library in a type-safe manner SL.con: Containers??? Container rule summary: SL.con.1: Prefer using STL array or vector instead of a C array SL.con.2: Prefer using STL vector by default unless you have a reason to use a different container SL.con.3: Avoid bounds errors ??? SL.con.1: Prefer using STL array or vector instead of a C arrayReasonC arrays are less safe, and have no advantages over array and vector.For a fixed-length array, use std::array, which does not degenerate to a pointer when passed to a function and does know its size.Also, like a built-in array, a stack-allocated std::array keeps its elements on the stack.For a variable-length array, use std::vector, which additionally can change its size and handles memory allocation. Exampleint v[SIZE]; // BAD std::array&lt;int, SIZE&gt; w; // ok Exampleint* v = new int[initial_size]; // BAD, owning raw pointer delete[] v; // BAD, manual delete std::vector&lt;int&gt; w(initial_size); // ok NoteUse gsl::span for non-owning references into a container. NoteComparing the performance of a fixed-sized array allocated on the stack against a vector with its elements on the free store is bogus.You could just as well compare a std::array on the stack against the result of a malloc() accessed through a pointer.For most code, even the difference between stack allocation and free-store allocation doesn’t matter, but the convenience and safety of vector does.People working with code for which that difference matters are quite capable of choosing between array and vector. Enforcement Flag declaration of a C array inside a function or class that also declares an STL container (to avoid excessive noisy warnings on legacy non-STL code). To fix: At least change the C array to a std::array. SL.con.2: Prefer using STL vector by default unless you have a reason to use a different containerReasonvector and array are the only standard containers that offer the fastest general-purpose access (random access, including being vectorization-friendly), the fastest default access pattern (begin-to-end or end-to-begin is prefetcher-friendly), and the lowest space overhead (contiguous layout has zero per-element overhead, which is cache-friendly).Usually you need to add and remove elements from the container, so use vector by default; if you don’t need to modify the container’s size, use array. Even when other containers seem more suited, such a map for O(log N) lookup performance or a list for efficient insertion in the middle, a vector will usually still perform better for containers up to a few KB in size. Notestring should not be used as a container of individual characters. A string is a textual string; if you want a container of characters, use vector&lt;/*char_type*/&gt; or array&lt;/*char_type*/&gt; instead. ExceptionsIf you have a good reason to use another container, use that instead. For example: If vector suits your needs but you don’t need the container to be variable size, use array instead. If you want a dictionary-style lookup container that guarantees O(K) or O(log N) lookups, the container will be larger (more than a few KB) and you perform frequent inserts so that the overhead of maintaining a sorted vector is infeasible, go ahead and use an unordered_map or map instead. Enforcement Flag a vector whose size never changes after construction (such as because it’s const or because no non-const functions are called on it). To fix: Use an array instead. SL.con.3: Avoid bounds errorsReasonRead or write beyond an allocated range of elements typically leads to bad errors, wrong results, crashes, and security violations. NoteThe standard-library functions that apply to ranges of elements all have (or could have) bounds-safe overloads that take span.Standard types such as vector can be modified to perform bounds-checks under the bounds profile (in a compatible way, such as by adding contracts), or used with at(). Ideally, the in-bounds guarantee should be statically enforced.For example: a range-for cannot loop beyond the range of the container to which it is applied a v.begin(),v.end() is easily determined to be bounds safe Such loops are as fast as any unchecked/unsafe equivalent. Often a simple pre-check can eliminate the need for checking of individual indices.For example for v.begin(),v.begin()+i the i can easily be checked against v.size() Such loops can be much faster than individually checked element accesses. Example, badvoid f() { array&lt;int, 10&gt; a, b; memset(a.data(), 0, 10); // BAD, and contains a length error (length = 10 * sizeof(int)) memcmp(a.data(), b.data(), 10); // BAD, and contains a length error (length = 10 * sizeof(int)) } Also, std::array&lt;&gt;::fill() or std::fill() or even an empty initializer are better candidate than memset(). Example, goodvoid f() { array&lt;int, 10&gt; a, b, c{}; // c is initialized to zero a.fill(0); fill(b.begin(), b.end(), 0); // std::fill() fill(b, 0); // std::fill() + Ranges TS if ( a == b ) { // ... } } ExampleIf code is using an unmodified standard library, then there are still workarounds that enable use of std::array and std::vector in a bounds-safe manner. Code can call the .at() member function on each class, which will result in an std::out_of_range exception being thrown. Alternatively, code can call the at() free function, which will result in fail-fast (or a customized action) on a bounds violation. void f(std::vector&lt;int&gt;&amp; v, std::array&lt;int, 12&gt; a, int i) { v[0] = a[0]; // BAD v.at(0) = a[0]; // OK (alternative 1) at(v, 0) = a[0]; // OK (alternative 2) v.at(0) = a[i]; // BAD v.at(0) = a.at(i); // OK (alternative 1) v.at(0) = at(a, i); // OK (alternative 2) } Enforcement Issue a diagnostic for any call to a standard-library function that is not bounds-checked.??? insert link to a list of banned functions This rule is part of the bounds profile. TODO Notes: Impact on the standard library will require close coordination with WG21, if only to ensure compatibility even if never standardized. We are considering specifying bounds-safe overloads for stdlib (especially C stdlib) functions like memcmp and shipping them in the GSL. For existing stdlib functions and types like vector that are not fully bounds-checked, the goal is for these features to be bounds-checked when called from code with the bounds profile on, and unchecked when called from legacy code, possibly using contracts (concurrently being proposed by several WG21 members). SL.str: StringText manipulation is a huge topic.std::string doesn’t cover all of it.This section primarily tries to clarify std::string‘s relation to char*, zstring, string_view, and gsl::string_span.The important issue of non-ASCII character sets and encodings (e.g., wchar_t, Unicode, and UTF-8) will be covered elsewhere. See also: regular expressions Here, we use “sequence of characters” or “string” to refer to a sequence of characters meant to be read as text (somehow, eventually).We don’t consider String summary: SL.str.1: Use std::string to own character sequences SL.str.2: Use std::string_view or gsl::string_span to refer to character sequences SL.str.3: Use zstring or czstring to refer to a C-style, zero-terminated, sequence of characters SL.str.4: Use char* to refer to a single character SL.str.5: Use std::byte to refer to byte values that do not necessarily represent characters SL.str.10: Use std::string when you need to perform locale-sensitive string operations SL.str.11: Use gsl::string_span rather than std::string_view when you need to mutate a string SL.str.12: Use the s suffix for string literals meant to be standard-library strings See also: F.24 span F.25 zstring SL.str.1: Use std::string to own character sequencesReasonstring correctly handles allocation, ownership, copying, gradual expansion, and offers a variety of useful operations. Examplevector&lt;string&gt; read_until(const string&amp; terminator) { vector&lt;string&gt; res; for (string s; cin &gt;&gt; s &amp;&amp; s != terminator; ) // read a word res.push_back(s); return res; } Note how &gt;&gt; and != are provided for string (as examples of useful operations) and there are no explicitallocations, deallocations, or range checks (string takes care of those). In C++17, we might use string_view as the argument, rather than const string* to allow more flexibility to callers: vector&lt;string&gt; read_until(string_view terminator) // C++17 { vector&lt;string&gt; res; for (string s; cin &gt;&gt; s &amp;&amp; s != terminator; ) // read a word res.push_back(s); return res; } The gsl::string_span is a current alternative offering most of the benefits of std::string_view for simple examples: vector&lt;string&gt; read_until(string_span terminator) { vector&lt;string&gt; res; for (string s; cin &gt;&gt; s &amp;&amp; s != terminator; ) // read a word res.push_back(s); return res; } Example, badDon’t use C-style strings for operations that require non-trivial memory management char* cat(const char* s1, const char* s2) // beware! // return s1 + &apos;.&apos; + s2 { int l1 = strlen(s1); int l2 = strlen(s2); char* p = (char*) malloc(l1 + l2 + 2); strcpy(p, s1, l1); p[l1] = &apos;.&apos;; strcpy(p + l1 + 1, s2, l2); p[l1 + l2 + 1] = 0; return p; } Did we get that right?Will the caller remember to free() the returned pointer?Will this code pass a security review? NoteDo not assume that string is slower than lower-level techniques without measurement and remember than not all code is performance critical.Don’t optimize prematurely Enforcement??? SL.str.2: Use std::string_view or gsl::string_span to refer to character sequencesReasonstd::string_view or gsl::string_span provides simple and (potentially) safe access to character sequences independently of howthose sequences are allocated and stored. Examplevector&lt;string&gt; read_until(string_span terminator); void user(zstring p, const string&amp; s, string_span ss) { auto v1 = read_until(p); auto v2 = read_until(s); auto v3 = read_until(ss); // ... } Notestd::string_view (C++17) is read-only. Enforcement??? SL.str.3: Use zstring or czstring to refer to a C-style, zero-terminated, sequence of charactersReasonReadability.Statement of intent.A plain char* can be a pointer to a single character, a pointer to an array of characters, a pointer to a C-style (zero-terminated) string, or even to a small integer.Distinguishing these alternatives prevents misunderstandings and bugs. Examplevoid f1(const char* s); // s is probably a string All we know is that it is supposed to be the nullptr or point to at least one character void f1(zstring s); // s is a C-style string or the nullptr void f1(czstring s); // s is a C-style string constant or the nullptr void f1(std::byte* s); // s is a pointer to a byte (C++17) NoteDon’t convert a C-style string to string unless there is a reason to. NoteLike any other “plain pointer”, a zstring should not represent ownership. NoteThere are billions of lines of C++ “out there”, most use char* and const char* without documenting intent.They are used in a wide variety of ways, including to represent ownership and as generic pointers to memory (instead of void*).It is hard to separate these uses, so this guideline is hard to follow.This is one of the major sources of bugs in C and C++ programs, so it is worthwhile to follow this guideline wherever feasible.. Enforcement Flag uses of [] on a char* Flag uses of delete on a char* Flag uses of free() on a char* SL.str.4: Use char* to refer to a single characterReasonThe variety of uses of char* in current code is a major source of errors. Example, badchar arr[] = {&apos;a&apos;, &apos;b&apos;, &apos;c&apos;}; void print(const char* p) { cout &lt;&lt; p &lt;&lt; &apos;\n&apos;; } void use() { print(arr); // run-time error; potentially very bad } The array arr is not a C-style string because it is not zero-terminated. AlternativeSee zstring, string, and string_span. Enforcement Flag uses of [] on a char* SL.str.5: Use std::byte to refer to byte values that do not necessarily represent charactersReasonUse of char* to represent a pointer to something that is not necessarily a character causes confusionand disables valuable optimizations. Example??? NoteC++17 Enforcement??? SL.str.10: Use std::string when you need to perform locale-sensitive string operationsReasonstd::string supports standard-library locale facilities Example??? Note??? Enforcement??? SL.str.11: Use gsl::string_span rather than std::string_view when you need to mutate a stringReasonstd::string_view is read-only. Example??? Note??? EnforcementThe compiler will flag attempts to write to a string_view. SL.str.12: Use the s suffix for string literals meant to be standard-library stringsReasonDirect expression of an idea minimizes mistakes. Exampleauto pp1 = make_pair(&quot;Tokyo&quot;, 9.00); // {C-style string,double} intended? pair&lt;string, double&gt; pp2 = {&quot;Tokyo&quot;, 9.00}; // a bit verbose auto pp3 = make_pair(&quot;Tokyo&quot;s, 9.00); // {std::string,double} // C++14 pair pp4 = {&quot;Tokyo&quot;s, 9.00}; // {std::string,double} // C++17 NoteC++14 Enforcement??? SL.io: Iostreamiostreams is a type safe, extensible, formatted and unformatted I/O library for streaming I/O.It supports multiple (and user extensible) buffering strategies and multiple locales.It can be used for conventional I/O, reading and writing to memory (string streams),and user-defines extensions, such as streaming across networks (asio: not yet standardized). Iostream rule summary: SL.io.1: Use character-level input only when you have to SL.io.2: When reading, always consider ill-formed input SL.io.3: Prefer iostreams for I/O SL.io.10: Unless you use printf-family functions call ios_base::sync_with_stdio(false) SL.io.50: Avoid endl ??? SL.io.1: Use character-level input only when you have toReasonUnless you genuinely just deal with individual characters, using character-level input leads to the user code performing potentially error-proneand potentially inefficient composition of tokens out of characters. Examplechar c; char buf[128]; int i = 0; while (cin.get(c) &amp;&amp; !isspace(c) &amp;&amp; i &lt; 128) buf[i++] = c; if (i == 128) { // ... handle too long string .... } Better (much simpler and probably faster): string s; s.reserve(128); cin &gt;&gt; s; and the reserve(128) is probably not worthwhile. Enforcement??? SL.io.2: When reading, always consider ill-formed inputReasonErrors are typically best handled as soon as possible.If input isn’t validated, every function must be written to cope with bad data (and that is not practical). Example??? Enforcement??? SL.io.3: Prefer iostreams for I/OReasoniostreams are safe, flexible, and extensible. Example// write a complex number: complex&lt;double&gt; z{ 3, 4 }; cout &lt;&lt; z &lt;&lt; &apos;\n&apos;; complex is a user-defined type and its I/O is defined without modifying the iostream library. Example// read a file of complex numbers: for (complex&lt;double&gt; z; cin &gt;&gt; z; ) v.push_back(z); Exception??? performance ??? Discussion: iostreams vs. the printf() familyIt is often (and often correctly) pointed out that the printf() family has two advantages compared to iostreams:flexibility of formatting and performance.This has to be weighed against iostreams advantages of extensibility to handle user-defined types, resilient against security violations,implicit memory management, and locale handling. If you need I/O performance, you can almost always do better than printf(). gets() scanf() using s, and printf() using %s are security hazards (vulnerable to buffer overflow and generally error-prone).In C11, they are replaced by gets_s(), scanf_s(), and printf_s() as safer alternatives, but they are still not type safe. EnforcementOptionally flag &lt;cstdio&gt; and &lt;stdio.h&gt;. SL.io.10: Unless you use printf-family functions call ios_base::sync_with_stdio(false)ReasonSynchronizing iostreams with printf-style I/O can be costly.cin and cout are by default synchronized with printf. Exampleint main() { ios_base::sync_with_stdio(false); // ... use iostreams ... } Enforcement??? SL.io.50: Avoid endlReasonThe endl manipulator is mostly equivalent to &#39;\n&#39; and &quot;\n&quot;;as most commonly used it simply slows down output by doing redundant flush()s.This slowdown can be significant compared to printf-style output. Examplecout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; endl; // two output operations and a flush cout &lt;&lt; &quot;Hello, World!\n&quot;; // one output operation and no flush NoteFor cin/cout (and equivalent) interaction, there is no reason to flush; that’s done automatically.For writing to a file, there is rarely a need to flush. NoteApart from the (occasionally important) issue of performance,the choice between &#39;\n&#39; and endl is almost completely aesthetic. SL.regex: Regex&lt;regex&gt; is the standard C++ regular expression library.It supports a variety of regular expression pattern conventions. SL.chrono: Time&lt;chrono&gt; (defined in namespace std::chrono) provides the notions of time_point and duration together with functions foroutputting time in various units.It provides clocks for registering time_points. SL.C: The C Standard Library??? C Standard Library rule summary: S.C.1: Don’t use setjmp/longjmp ??? ??? SL.C.1: Don’t use setjmp/longjmpReasona longjmp ignores destructors, thus invalidating all resource-management strategies relying on RAII EnforcementFlag all occurrences of longjmpand setjmp A: Architectural ideasThis section contains ideas about higher-level architectural ideas and libraries. Architectural rule summary: A.1: Separate stable from less stable part of code A.2: Express potentially reusable parts as a library A.4: There should be no cycles among libraries ??? ??? ??? ??? ??? ??? A.1: Separate stable from less stable part of code??? A.2: Express potentially reusable parts as a libraryReasonNoteA library is a collection of declarations and definitions maintained, documented, and shipped together.A library could be a set of headers (a “header only library”) or a set of headers plus a set of object files.A library can be statically or dynamically linked into a program, or it may be #included A.4: There should be no cycles among librariesReason A cycle implies complication of the build process. Cycles are hard to understand and may introduce indeterminism (unspecified behavior). NoteA library can contain cyclic references in the definition of its components.For example: ??? However, a library should not depend on another that depends on it. NR: Non-Rules and mythsThis section contains rules and guidelines that are popular somewhere, but that we deliberately don’t recommend.We know full well that there have been times and places where these rules made sense, and we have used them ourselves at times.However, in the context of the styles of programming we recommend and support with the guidelines, these “non-rules” would do harm. Even today, there can be contexts where the rules make sense.For example, lack of suitable tool support can make exceptions unsuitable in hard-real-time systems,but please don’t blindly trust “common wisdom” (e.g., unsupported statements about “efficiency”);such “wisdom” may be based on decades-old information or experienced from languages with very different properties than C++(e.g., C or Java). The positive arguments for alternatives to these non-rules are listed in the rules offered as “Alternatives”. Non-rule summary: NR.1: Don’t: All declarations should be at the top of a function NR.2: Don’t: Have only a single return-statement in a function NR.3: Don’t: Don’t use exceptions NR.4: Don’t: Place each class declaration in its own source file NR.5: Don’t: Don’t do substantive work in a constructor; instead use two-phase initialization NR.6: Don’t: Place all cleanup actions at the end of a function and goto exit NR.7: Don’t: Make all data members protected ??? NR.1: Don’t: All declarations should be at the top of a functionReason (not to follow this rule)This rule is a legacy of old programming languages that didn’t allow initialization of variables and constants after a statement.This leads to longer programs and more errors caused by uninitialized and wrongly initialized variables. Example, badint use(int x) { int i; char c; double d; // ... some stuff ... if (x &lt; i) { // ... i = f(x, d); } if (i &lt; x) { // ... i = g(x, c); } return i; } The larger the distance between the uninitialized variable and its use, the larger the chance of a bug.Fortunately, compilers catch many “used before set” errors.Unfortunately, compilers cannot catch all such errors and unfortunately, the bugs aren’t always as simple to spot as in this small example. Alternative Always initialize an object ES.21: Don’t introduce a variable (or constant) before you need to use it NR.2: Don’t: Have only a single return-statement in a functionReason (not to follow this rule)The single-return rule can lead to unnecessarily convoluted code and the introduction of extra state variables.In particular, the single-return rule makes it harder to concentrate error checking at the top of a function. Exampletemplate&lt;class T&gt; // requires Number&lt;T&gt; string sign(T x) { if (x &lt; 0) return &quot;negative&quot;; else if (x &gt; 0) return &quot;positive&quot;; return &quot;zero&quot;; } to use a single return only we would have to do something like template&lt;class T&gt; // requires Number&lt;T&gt; string sign(T x) // bad { string res; if (x &lt; 0) res = &quot;negative&quot;; else if (x &gt; 0) res = &quot;positive&quot;; else res = &quot;zero&quot;; return res; } This is both longer and likely to be less efficient.The larger and more complicated the function is, the more painful the workarounds get.Of course many simple functions will naturally have just one return because of their simpler inherent logic. Exampleint index(const char* p) { if (!p) return -1; // error indicator: alternatively &quot;throw nullptr_error{}&quot; // ... do a lookup to find the index for p return i; } If we applied the rule, we’d get something like int index2(const char* p) { int i; if (!p) i = -1; // error indicator else { // ... do a lookup to find the index for p } return i; } Note that we (deliberately) violated the rule against uninitialized variables because this style commonly leads to that.Also, this style is a temptation to use the goto exit non-rule. Alternative Keep functions short and simple Feel free to use multiple return statements (and to throw exceptions). NR.3: Don’t: Don’t use exceptionsReason (not to follow this rule)There seem to be three main reasons given for this non-rule: exceptions are inefficient exceptions lead to leaks and errors exception performance is not predictable There is no way we can settle this issue to the satisfaction of everybody.After all, the discussions about exceptions have been going on for 40+ years.Some languages cannot be used without exceptions, but others do not support them.This leads to strong traditions for the use and non-use of exceptions, and to heated debates. However, we can briefly outline why we consider exceptions the best alternative for general-purpose programmingand in the context of these guidelines.Simple arguments for and against are often inconclusive.There are specialized applications where exceptions indeed can be inappropriate(e.g., hard-real-time systems without support for reliable estimates of the cost of handling an exception). Consider the major objections to exceptions in turn Exceptions are inefficient:Compared to what?When comparing make sure that the same set of errors are handled and that they are handled equivalently.In particular, do not compare a program that immediately terminate on seeing an error with a programthat carefully cleans up resources before logging an error.Yes, some systems have poor exception handling implementations; sometimes, such implementations force us to useother error-handling approaches, but that’s not a fundamental problem with exceptions.When using an efficiency argument - in any context - be careful that you have good data that actually providesinsight into the problem under discussion. Exceptions lead to leaks and errors.They do not.If your program is a rat’s nest of pointers without an overall strategy for resource management,you have a problem whatever you do.If your system consists of a million lines of such code,you probably will not be able to use exceptions,but that’s a problem with excessive and undisciplined pointer use, rather than with exceptions.In our opinion, you need RAII to make exception-based error handling simple and safe – simpler and safer than alternatives. Exception performance is not predictable.If you are in a hard-real-time system where you must guarantee completion of a task in a given time,you need tools to back up such guarantees.As far as we know such tools are not available (at least not to most programmers). Many, possibly most, problems with exceptions stem from historical needs to interact with messy old code. The fundamental arguments for the use of exceptions are They clearly differentiate between erroneous return and ordinary return They cannot be forgotten or ignored They can be used systematically Remember Exceptions are for reporting errors (in C++; other languages can have different uses for exceptions). Exceptions are not for errors that can be handled locally. Don’t try to catch every exception in every function (that’s tedious, clumsy, and leads to slow code). Exceptions are not for errors that require instant termination of a module/system after a non-recoverable error. Example??? Alternative RAII Contracts/assertions: Use GSL’s Expects and Ensures (until we get language support for contracts) NR.4: Don’t: Place each class declaration in its own source fileReason (not to follow this rule)The resulting number of files are hard to manage and can slow down compilation.Individual classes are rarely a good logical unit of maintenance and distribution. Example??? Alternative Use namespaces containing logically cohesive sets of classes and functions. NR.5: Don’t: Don’t do substantive work in a constructor; instead use two-phase initializationReason (not to follow this rule)Following this rule leads to weaker invariants,more complicated code (having to deal with semi-constructed objects),and errors (when we didn’t deal correctly with semi-constructed objects consistently). Example??? Alternative Always establish a class invariant in a constructor. Don’t define an object before it is needed. NR.6: Don’t: Place all cleanup actions at the end of a function and goto exitReason (not to follow this rule)goto is error-prone.This technique is a pre-exception technique for RAII-like resource and error handling. Example, badvoid do_something(int n) { if (n &lt; 100) goto exit; // ... int* p = (int*) malloc(n); // ... if (some_error) goto_exit; // ... exit: free(p); } and spot the bug. Alternative Use exceptions and RAII for non-RAII resources, use finally. NR.7: Don’t: Make all data members protectedReason (not to follow this rule)protected data is a source of errors.protected data can be manipulated from an unbounded amount of code in various places.protected data is the class hierarchy equivalent to global data. Example??? Alternative Make member data public or (preferably) private RF: ReferencesMany coding standards, rules, and guidelines have been written for C++, and especially for specialized uses of C++.Many focus on lower-level issues, such as the spelling of identifiers are written by C++ novices see “stopping programmers from doing unusual things” as their primary aim aim at portability across many compilers (some 10 years old) are written to preserve decades old code bases aim at a single application domain are downright counterproductive are ignored (must be ignored by programmers to get their work done well) A bad coding standard is worse than no coding standard.However an appropriate set of guidelines are much better than no standards: “Form is liberating.” Why can’t we just have a language that allows all we want and disallows all we don’t want (“a perfect language”)?Fundamentally, because affordable languages (and their tool chains) also serve people with needs that differ from yours and serve more needs than you have today.Also, your needs change over time and a general-purpose language is needed to allow you to adapt.A language that is ideal for today would be overly restrictive tomorrow. Coding guidelines adapt the use of a language to specific needs.Thus, there cannot be a single coding style for everybody.We expect different organizations to provide additions, typically with more restrictions and firmer style rules. Reference sections: RF.rules: Coding rules RF.books: Books with coding guidelines RF.C++: C++ Programming (C++11/C++14) RF.web: Websites RS.video: Videos about “modern C++” RF.man: Manuals RF.core: Core Guidelines materials RF.rules: Coding rules Boost Library Requirements and Guidelines.???. Bloomberg: BDE C++ Coding.Has a strong emphasis on code organization and layout. Facebook: ??? GCC Coding Conventions.C++03 and (reasonably) a bit backwards looking. Google C++ Style Guide.Geared toward C++03 and (also) older code bases. Google experts are now actively collaborating here on helping to improve these Guidelines, and hopefully to merge efforts so these can be a modern common set they could also recommend. JSF++: JOINT STRIKE FIGHTER AIR VEHICLE C++ CODING STANDARDS.Document Number 2RDU00001 Rev C. December 2005.For flight control software.For hard-real-time.This means that it is necessarily very restrictive (“if the program fails somebody dies”).For example, no free store allocation or deallocation may occur after the plane takes off (no memory overflow and no fragmentation allowed).No exception may be used (because there was no available tool for guaranteeing that an exception would be handled within a fixed short time).Libraries used have to have been approved for mission critical applications.Any similarities to this set of guidelines are unsurprising because Bjarne Stroustrup was an author of JSF++.Recommended, but note its very specific focus. Mozilla Portability Guide.As the name indicates, this aims for portability across many (old) compilers.As such, it is restrictive. Geosoft.no: C++ Programming Style Guidelines.???. Possibility.com: C++ Coding Standard.???. SEI CERT: Secure C++ Coding Standard.A very nicely done set of rules (with examples and rationales) done for security-sensitive code.Many of their rules apply generally. High Integrity C++ Coding Standard. llvm.Somewhat brief, pre-C++11, and (not unreasonably) adjusted to its domain. ??? RF.books: Books with coding guidelines Meyers96 Scott Meyers: More Effective C++. Addison-Wesley 1996. Meyers97 Scott Meyers: Effective C++, Second Edition. Addison-Wesley 1997. Meyers01 Scott Meyers: Effective STL. Addison-Wesley 2001. Meyers05 Scott Meyers: Effective C++, Third Edition. Addison-Wesley 2005. Meyers15 Scott Meyers: Effective Modern C++. O’Reilly 2015. SuttAlex05 Sutter and Alexandrescu: C++ Coding Standards. Addison-Wesley 2005. More a set of meta-rules than a set of rules. Pre-C++11. Stroustrup05 Bjarne Stroustrup: A rationale for semantically enhanced library languages.LCSD05. October 2005. Stroustrup14 Stroustrup: A Tour of C++.Addison Wesley 2014.Each chapter ends with an advice section consisting of a set of recommendations. Stroustrup13 Stroustrup: The C++ Programming Language (4th Edition).Addison Wesley 2013.Each chapter ends with an advice section consisting of a set of recommendations. Stroustrup: Style Guidefor Programming: Principles and Practice using C++.Mostly low-level naming and layout rules.Primarily a teaching tool. RF.C++: C++ Programming (C++11/C++14) TC++PL4:A thorough description of the C++ language and standard libraries for experienced programmers. Tour++:An overview of the C++ language and standard libraries for experienced programmers. Programming: Principles and Practice using C++:A textbook for beginners and relative novices. RF.web: Websites isocpp.org Bjarne Stroustrup’s home pages WG21 Boost Adobe open source Poco libraries Sutter’s Mill? ??? RS.video: Videos about “modern C++” Bjarne Stroustrup: C++11 Style. 2012. Bjarne Stroustrup: The Essence of C++: With Examples in C++84, C++98, C++11, and C++14. 2013 All the talks from CppCon ‘14 Bjarne Stroustrup: The essence of C++ at the University of Edinburgh. 2014. Bjarne Stroustrup: The Evolution of C++ Past, Present and Future. CppCon 2016 keynote. Bjarne Stroustrup: Make Simple Tasks Simple!. CppCon 2014 keynote. Bjarne Stroustrup: Writing Good C++14. CppCon 2015 keynote about the Core Guidelines. Herb Sutter: Writing Good C++14… By Default. CppCon 2015 keynote about the Core Guidelines. CppCon 15 ??? C++ Next ??? Meting C++ ??? more ??? RF.man: Manuals ISO C++ Standard C++11. ISO C++ Standard C++14. ISO C++ Standard C++17 CD. Committee Draft. Palo Alto “Concepts” TR. ISO C++ Concepts TS. WG21 Ranges report. Draft. RF.core: Core Guidelines materialsThis section contains materials that has been useful for presenting the core guidelines and the ideas behind them: Our documents directory Stroustrup, Sutter, and Dos Reis: A brief introduction to C++’s model for type- and resource-safety. A paper with lots of examples. Sergey Zubkov: a Core Guidelines talkand here are the slides. In Russian. 2017. Neil MacIntosh: The Guideline Support Library: One Year Later. CppCon 2016. Bjarne Stroustrup: Writing Good C++14. CppCon 2015 keynote. Herb Sutter: Writing Good C++14… By Default. CppCon 2015 keynote. Peter Sommerlad: C++ Core Guidelines - Modernize your C++ Code Base. ACCU 2017. Bjarne Stroustrup: No Littering!. Bay Area ACCU 2016.It gives some idea of the ambition level for the Core Guidelines. Note that slides for CppCon presentations are available (links with the posted videos). Contributions to this list would be most welcome. AcknowledgementsThanks to the many people who contributed rules, suggestions, supporting information, references, etc.: Peter Juhl Neil MacIntosh Axel Naumann Andrew Pardoe Gabriel Dos Reis Zhuang, Jiangang (Jeff) Sergey Zubkov and see the contributor list on the github. Pro: ProfilesIdeally, we would follow all of the guidelines.That would give the cleanest, most regular, least error-prone, and often the fastest code.Unfortunately, that is usually impossible because we have to fit our code into large code bases and use existing libraries.Often, such code has been written over decades and does not follow these guidelines.We must aim for gradual adoption. Whatever strategy for gradual adoption we adopt, we need to be able to apply sets of related guidelines to address some setof problems first and leave the rest until later.A similar idea of “related guidelines” becomes important when some, but not all, guidelines are considered relevant to a code baseor if a set of specialized guidelines is to be applied for a specialized application area.We call such a set of related guidelines a “profile”.We aim for such a set of guidelines to be coherent so that they together help us reach a specific goal, such as “absence of range errors”or “static type safety.”Each profile is designed to eliminate a class of errors.Enforcement of “random” rules in isolation is more likely to be disruptive to a code base than delivering a definite improvement. A “profile” is a set of deterministic and portably enforceable subset rules (i.e., restrictions) that are designed to achieve a specific guarantee.“Deterministic” means they require only local analysis and could be implemented in a compiler (though they don’t need to be).“Portably enforceable” means they are like language rules, so programmers can count on different enforcement tools giving the same answer for the same code. Code written to be warning-free using such a language profile is considered to conform to the profile.Conforming code is considered to be safe by construction with regard to the safety properties targeted by that profile.Conforming code will not be the root cause of errors for that property,although such errors may be introduced into a program by other code, libraries or the external environment.A profile may also introduce additional library types to ease conformance and encourage correct code. Profiles summary: Pro.type: Type safety Pro.bounds: Bounds safety Pro.lifetime: Lifetime safety In the future, we expect to define many more profiles and add more checks to existing profiles.Candidates include: narrowing arithmetic promotions/conversions (likely part of a separate safe-arithmetic profile) arithmetic cast from negative floating point to unsigned integral type (ditto) selected undefined behavior: Start with Gabriel Dos Reis’s UB list developed for the WG21 study group selected unspecified behavior: Addressing portability concerns. const violations: Mostly done by compilers already, but we can catch inappropriate casting and underuse of const. Enabling a profile is implementation defined; typically, it is set in the analysis tool used. To suppress enforcement of a profile check, place a suppress annotation on a language contract. For example: [[suppress(bounds)]] char* raw_find(char* p, int n, char x) // find x in p[0]..p[n - 1] { // ... } Now raw_find() can scramble memory to its heart’s content.Obviously, suppression should be very rare. Pro.safety: Type-safety profileThis profile makes it easier to construct code that uses types correctly and avoids inadvertent type punning.It does so by focusing on removing the primary sources of type violations, including unsafe uses of casts and unions. For the purposes of this section,type-safety is defined to be the property that a variable is not used in a way that doesn’t obey the rules for the type of its definition.Memory accessed as a type T should not be valid memory that actually contains an object of an unrelated type U.Note that the safety is intended to be complete when combined also with Bounds safety and Lifetime safety. An implementation of this profile shall recognize the following patterns in source code as non-conforming and issue a diagnostic. Type safety profile summary: Type.1: Avoid casts:a. Don’t use reinterpret_cast; A strict version of Avoid casts and prefer named casts.b. Don’t use static_cast for arithmetic types; A strict version of Avoid casts and prefer named casts.c. Don’t cast between pointer types where the source type and the target type are the same; A strict version of Avoid casts.d. Don’t cast between pointer types when the conversion could be implicit; A strict version of Avoid casts. Type.2: Don’t use static_cast to downcast:Use dynamic_cast instead. Type.3: Don’t use const_cast to cast away const (i.e., at all):Don’t cast away const. Type.4: Don’t use C-style (T)expression or functional T(expression) casts:Prefer construction or named casts. Type.5: Don’t use a variable before it has been initialized:always initialize. Type.6: Always initialize a member variable:always initialize,possibly using default constructors ordefault member initializers. Type.7: Avoid naked union:Use variant instead. Type.8: Avoid varargs:Don’t use va_arg arguments. ImpactWith the type-safety profile you can trust that every operation is applied to a valid object.Exception may be thrown to indicate errors that cannot be detected statically (at compile time).Note that this type-safety can be complete only if we also have Bounds safety and Lifetime safety.Without those guarantees, a region of memory could be accessed independent of which object, objects, or parts of objects are stored in it. Pro.bounds: Bounds safety profileThis profile makes it easier to construct code that operates within the bounds of allocated blocks of memory.It does so by focusing on removing the primary sources of bounds violations: pointer arithmetic and array indexing.One of the core features of this profile is to restrict pointers to only refer to single objects, not arrays. We define bounds-safety to be the property that a program does not use an object to access memory outside of the range that was allocated for it.Bounds safety is intended to be complete only when combined with Type safety and Lifetime safety,which cover other unsafe operations that allow bounds violations. Bounds safety profile summary: Bounds.1: Don’t use pointer arithmetic. Use span instead:Pass pointers to single objects (only) and Keep pointer arithmetic simple. Bounds.2: Only index into arrays using constant expressions:Pass pointers to single objects (only) and Keep pointer arithmetic simple. Bounds.3: No array-to-pointer decay:Pass pointers to single objects (only) and Keep pointer arithmetic simple. Bounds.4: Don’t use standard-library functions and types that are not bounds-checked:Use the standard library in a type-safe manner. ImpactBounds safety implies that access to an object - notably arrays - does not access beyond the object’s memory allocation.This eliminates a large class of insidious and hard-to-find errors, including the (in)famous “buffer overflow” errors.This closes security loopholes as well as a prominent source of memory corruption (when writing out of bounds).Even an out-of-bounds access is “just a read”, it can lead to invariant violations (when the accessed isn’t of the assumed type)and “mysterious values.” Pro.lifetime: Lifetime safety profileAccessing through a pointer that doesn’t point to anything is a major source of errors,and very hard to avoid in many traditional C or C++ styles of programming.For example, a pointer may be uninitialized, the nullptr, point beyond the range of an array, or to a deleted object. See /docs folder for the initial design. The detailed formal rules are in progress (as of May 2017). Lifetime safety profile summary: Lifetime.1: Don’t dereference a possibly invalid pointer:detect or avoid. ImpactOnce completely enforced through a combination of style rules, static analysis, and library support, this profile eliminates one of the major sources of nasty errors in C++ eliminates a major source of potential security violations improves performance by eliminating redundant “paranoia” checks increases confidence in correctness of code avoids undefined behavior by enforcing a key C++ language rule GSL: Guideline support libraryThe GSL is a small library of facilities designed to support this set of guidelines.Without these facilities, the guidelines would have to be far more restrictive on language details. The Core Guidelines support library is defined in namespace gsl and the names may be aliases for standard library or other well-known library names. Using the (compile-time) indirection through the gsl namespace allows for experimentation and for local variants of the support facilities. The GSL is header only, and can be found at GSL: Guideline support library.The support library facilities are designed to be extremely lightweight (zero-overhead) so that they impose no overhead compared to using conventional alternatives.Where desirable, they can be “instrumented” with additional functionality (e.g., checks) for tasks such as debugging. These Guidelines assume a variant type, but this is not currently in GSL.Eventually, use the one voted into C++17. Summary of GSL components: GSL.view: Views GSL.owner GSL.assert: Assertions GSL.util: Utilities GSL.concept: Concepts We plan for a “ISO C++ standard style” semi-formal specification of the GSL. We rely on the ISO C++ Standard Library and hope for parts of the GSL to be absorbed into the standard library. GSL.view: ViewsThese types allow the user to distinguish between owning and non-owning pointers and between pointers to a single object and pointers to the first element of a sequence. These “views” are never owners. References are never owners (see R.4. Note: References have many opportunities to outlive the objects they refer to (returning a local variable by reference, holding a reference to an element of a vector and doing push_back, binding to std::max(x, y + 1), etc. The Lifetime safety profile aims to address those things, but even so owner&lt;T&amp;&gt; does not make sense and is discouraged. The names are mostly ISO standard-library style (lower case and underscore): T* // The T* is not an owner, may be null; assumed to be pointing to a single element. T&amp; // The T&amp; is not an owner and can never be a “null reference”; references are always bound to objects. The “raw-pointer” notation (e.g. int*) is assumed to have its most common meaning; that is, a pointer points to an object, but does not own it.Owners should be converted to resource handles (e.g., unique_ptr or vector&lt;T&gt;) or marked owner&lt;T*&gt;. owner&lt;T*&gt; // a T* that owns the object pointed/referred to; may be nullptr. owner is used to mark owning pointers in code that cannot be upgraded to use proper resource handles.Reasons for that include: Cost of conversion. The pointer is used with an ABI. The pointer is part of the implementation of a resource handle. An owner&lt;T&gt; differs from a resource handle for a T by still requiring an explicit delete. An owner&lt;T&gt; is assumed to refer to an object on the free store (heap). If something is not supposed to be nullptr, say so: not_null&lt;T&gt; // T is usually a pointer type (e.g., not_null&lt;int*&gt; and not_null&lt;owner&lt;Foo*&gt;&gt;) that may not be nullptr.T can be any type for which ==nullptr is meaningful. span&lt;T&gt; // [p:p+n), constructor from {p, q} and {p, n}; T is the pointer type span_p&lt;T&gt; // {p, predicate} [p:q) where q is the first element for which predicate(*p) is true string_span // span&lt;char&gt; cstring_span // span&lt;const char&gt; A span&lt;T&gt; refers to zero or more mutable Ts unless T is a const type. “Pointer arithmetic” is best done within spans.A char* that points to more than one char but is not a C-style string (e.g., a pointer into an input buffer) should be represented by a span. zstring // a char* supposed to be a C-style string; that is, a zero-terminated sequence of char or nullptr czstring // a const char* supposed to be a C-style string; that is, a zero-terminated sequence of const char or nullptr Logically, those last two aliases are not needed, but we are not always logical, and they make the distinction between a pointer to one char and a pointer to a C-style string explicit.A sequence of characters that is not assumed to be zero-terminated should be a char*, rather than a zstring.French accent optional. Use not_null&lt;zstring&gt; for C-style strings that cannot be nullptr. ??? Do we need a name for not_null&lt;zstring&gt;? or is its ugliness a feature? GSL.owner: Ownership pointers unique_ptr&lt;T&gt; // unique ownership: std::unique_ptr&lt;T&gt; shared_ptr&lt;T&gt; // shared ownership: std::shared_ptr&lt;T&gt; (a counted pointer) stack_array&lt;T&gt; // A stack-allocated array. The number of elements are determined at construction and fixed thereafter. The elements are mutable unless T is a const type. dyn_array&lt;T&gt; // ??? needed ??? A heap-allocated array. The number of elements are determined at construction and fixed thereafter.The elements are mutable unless T is a const type. Basically a span that allocates and owns its elements. GSL.assert: Assertions Expects // precondition assertion. Currently placed in function bodies. Later, should be moved to declarations.// `Expects(p)` terminates the program unless `p == true` // `Expect` in under control of some options (enforcement, error message, alternatives to terminate) Ensures // postcondition assertion. Currently placed in function bodies. Later, should be moved to declarations. These assertions are currently macros (yuck!) and must appear in function definitions (only)pending standard committee decisions on contracts and assertion syntax.See the contract proposal; using the attribute syntax,for example, Expects(p) will become [[expects: p]]. GSL.util: Utilities finally // finally(f) makes a final_action{f} with a destructor that invokes f narrow_cast // narrow_cast&lt;T&gt;(x) is static_cast&lt;T&gt;(x) narrow // narrow&lt;T&gt;(x) is static_cast&lt;T&gt;(x) if static_cast&lt;T&gt;(x) == x or it throws narrowing_error [[implicit]] // “Marker” to put on single-argument constructors to explicitly make them non-explicit. move_owner // p = move_owner(q) means p = q but ??? joining_thread // a RAII style version of std::thread that joins. index // a type to use for all container and array indexing (currently an alias for ptrdiff_t) GSL.concept: ConceptsThese concepts (type predicates) are borrowed fromAndrew Sutton’s Origin library,the Range proposal,and the ISO WG21 Palo Alto TR.They are likely to be very similar to what will become part of the ISO C++ standard.The notation is that of the ISO WG21 Concepts TS.Most of the concepts below are defined in the Ranges TS. Range String // ??? Number // ??? Sortable Pointer // A type with *, -&gt;, ==, and default construction (default construction is assumed to set the singular “null” value); see smart pointers Unique_ptr // A type that matches Pointer, has move (not copy), and matches the Lifetime profile criteria for a unique owner type; see smart pointers Shared_ptr // A type that matches Pointer, has copy, and matches the Lifetime profile criteria for a shared owner type; see smart pointers EqualityComparable // ???Must we suffer CaMelcAse??? Convertible Common Boolean Integral SignedIntegral SemiRegular // ??? Copyable? Regular TotallyOrdered Function RegularFunction Predicate Relation … GSL.ptr: Smart pointer conceptsSee Lifetimes paper. NL: Naming and layout rulesConsistent naming and layout are helpful.If for no other reason because it minimizes “my style is better than your style” arguments.However, there are many, many, different styles around and people are passionate about them (pro and con).Also, most real-world projects includes code from many sources, so standardizing on a single style for all code is often impossible.We present a set of rules that you might use if you have no better ideas, but the real aim is consistency, rather than any particular rule set.IDEs and tools can help (as well as hinder). Naming and layout rules: NL.1: Don’t say in comments what can be clearly stated in code NL.2: State intent in comments NL.3: Keep comments crisp NL.4: Maintain a consistent indentation style NL.5: Avoid encoding type information in names NL.7: Make the length of a name roughly proportional to the length of its scope NL.8: Use a consistent naming style NL.9: Use ALL_CAPS for macro names only NL.10: Prefer underscore_style names NL.11: Make literals readable NL.15: Use spaces sparingly NL.16: Use a conventional class member declaration order NL.17: Use K&amp;R-derived layout NL.18: Use C++-style declarator layout NL.19: Avoid names that are easily misread NL.20: Don’t place two statements on the same line NL.21: Declare one name (only) per declaration NL.25: Don’t use void as an argument type NL.26: Use conventional const notation Most of these rules are aesthetic and programmers hold strong opinions.IDEs also tend to have defaults and a range of alternatives.These rules are suggested defaults to follow unless you have reasons not to. We have had comments to the effect that naming and layout are so personal and/or arbitrary that we should not try to “legislate” them.We are not “legislating” (see the previous paragraph).However, we have had many requests for a set of naming and layout conventions to use when there are no external constraints. More specific and detailed rules are easier to enforce. These rules bear a strong resemblance to the recommendations in the PPP Style Guidewritten in support of Stroustrup’s Programming: Principles and Practice using C++. NL.1: Don’t say in comments what can be clearly stated in codeReasonCompilers do not read comments.Comments are less precise than code.Comments are not updated as consistently as code. Example, badauto x = m * v1 + vv; // multiply m with v1 and add the result to vv EnforcementBuild an AI program that interprets colloquial English text and see if what is said could be better expressed in C++. NL.2: State intent in commentsReasonCode says what is done, not what is supposed to be done. Often intent can be stated more clearly and concisely than the implementation. Examplevoid stable_sort(Sortable&amp; c) // sort c in the order determined by &lt;, keep equal elements (as defined by ==) in // their original relative order { // ... quite a few lines of non-trivial code ... } NoteIf the comment and the code disagree, both are likely to be wrong. NL.3: Keep comments crispReasonVerbosity slows down understanding and makes the code harder to read by spreading it around in the source file. NoteUse intelligible English.I may be fluent in Danish, but most programmers are not; the maintainers of my code may not be.Avoid SMS lingo and watch your grammar, punctuation, and capitalization.Aim for professionalism, not “cool.” Enforcementnot possible. NL.4: Maintain a consistent indentation styleReasonReadability. Avoidance of “silly mistakes.” Example, badint i; for (i = 0; i &lt; max; ++i); // bug waiting to happen if (i == j) return i; NoteAlways indenting the statement after if (...), for (...), and while (...) is usually a good idea: if (i &lt; 0) error(&quot;negative argument&quot;); if (i &lt; 0) error(&quot;negative argument&quot;); EnforcementUse a tool. NL.5: Avoid encoding type information in namesRationaleIf names reflect types rather than functionality, it becomes hard to change the types used to provide that functionality.Also, if the type of a variable is changed, code using it will have to be modified.Minimize unintentional conversions. Example, badvoid print_int(int i); void print_string(const char*); print_int(1); // repetitive, manual type matching print_string(&quot;xyzzy&quot;); // repetitive, manual type matching Example, goodvoid print(int i); void print(string_view); // also works on any string-like sequence print(1); // clear, automatic type matching print(&quot;xyzzy&quot;); // clear, automatic type matching NoteNames with types encoded are either verbose or cryptic. printS // print a std::string prints // print a C-style string printi // print an int Requiring techniques like Hungarian notation to encode a type in a name is needed in C, but is generally unnecessary and actively harmful in a strongly statically-typed language like C++, because the annotations get out of date (the warts are just like comments and rot just like them) and they interfere with good use of the language (use the same name and overload resolution instead). NoteSome styles use very general (not type-specific) prefixes to denote the general use of a variable. auto p = new User(); auto p = make_unique&lt;User&gt;(); // note: &quot;p&quot; is not being used to say &quot;raw pointer to type User,&quot; // just generally to say &quot;this is an indirection&quot; auto cntHits = calc_total_of_hits(/*...*/); // note: &quot;cnt&quot; is not being used to encode a type, // just generally to say &quot;this is a count of something&quot; This is not harmful and does not fall under this guideline because it does not encode type information. NoteSome styles distinguishes members from local variable, and/or from global variable. struct S { int m_; S(int m) :m_{abs(m)} { } }; This is not harmful and does not fall under this guideline because it does not encode type information. NoteLike C++, some styles distinguishes types from non-types.For example, by capitalizing type names, but not the names of functions and variables. typename&lt;typename T&gt; class HashTable { // maps string to T // ... }; HashTable&lt;int&gt; index; This is not harmful and does not fall under this guideline because it does not encode type information. NL.7: Make the length of a name roughly proportional to the length of its scopeRationale: The larger the scope the greater the chance of confusion and of an unintended name clash. Exampledouble sqrt(double x); // return the square root of x; x must be non-negative int length(const char* p); // return the number of characters in a zero-terminated C-style string int length_of_string(const char zero_terminated_array_of_char[]) // bad: verbose int g; // bad: global variable with a cryptic name int open; // bad: global variable with a short, popular name The use of p for pointer and x for a floating-point variable is conventional and non-confusing in a restricted scope. Enforcement??? NL.8: Use a consistent naming styleRationale: Consistence in naming and naming style increases readability. NoteThere are many styles and when you use multiple libraries, you can’t follow all their different conventions.Choose a “house style”, but leave “imported” libraries with their original style. ExampleISO Standard, use lower case only and digits, separate words with underscores: int vector my_map Avoid double underscores __. ExampleStroustrup:ISO Standard, but with upper case used for your own types and concepts: int vector My_map ExampleCamelCase: capitalize each word in a multi-word identifier: int vector MyMap myMap Some conventions capitalize the first letter, some don’t. NoteTry to be consistent in your use of acronyms and lengths of identifiers: int mtbf {12}; int mean_time_between_failures {12}; // make up your mind EnforcementWould be possible except for the use of libraries with varying conventions. NL.9: Use ALL_CAPS for macro names onlyReasonTo avoid confusing macros with names that obey scope and type rules. Examplevoid f() { const int SIZE{1000}; // Bad, use &apos;size&apos; instead int v[SIZE]; } NoteThis rule applies to non-macro symbolic constants: enum bad { BAD, WORSE, HORRIBLE }; // BAD Enforcement Flag macros with lower-case letters Flag ALL_CAPS non-macro names NL.10: Prefer underscore_style namesReasonThe use of underscores to separate parts of a name is the original C and C++ style and used in the C++ Standard Library. NoteThis rule is a default to use only if you have a choice.Often, you don’t have a choice and must follow an established style for consistency.The need for consistency beats personal taste. ExampleStroustrup:ISO Standard, but with upper case used for your own types and concepts: int vector My_map EnforcementImpossible. NL.15: Use spaces sparinglyReasonToo much space makes the text larger and distracts. Example, bad#include &lt; map &gt; int main(int argc, char * argv [ ]) { // ... } Example#include &lt;map&gt; int main(int argc, char* argv[]) { // ... } NoteSome IDEs have their own opinions and add distracting space. NoteWe value well-placed whitespace as a significant help for readability. Just don’t overdo it. NL.11: Make literals readableReasonReadability. ExampleUse digit separators to avoid long strings of digits auto c = 299&apos;792&apos;458; // m/s2 auto q2 = 0b0000&apos;1111&apos;0000&apos;0000; auto ss_number = 123&apos;456&apos;7890; ExampleUse literal suffixes where clarification is needed auto hello = &quot;Hello!&quot;s; // a std::string auto world = &quot;world&quot;; // a C-style string auto interval = 100ms; // using &lt;chrono&gt; NoteLiterals should not be sprinkled all over the code as “magic constants”,but it is still a good idea to make them readable where they are defined.It is easy to make a typo in a long string of integers. EnforcementFlag long digit sequences. The trouble is to define “long”; maybe 7. NL.16: Use a conventional class member declaration orderReasonA conventional order of members improves readability. When declaring a class use the following order types: classes, enums, and aliases (using) constructors, assignments, destructor functions data Use the public before protected before private order. Exampleclass X { public: // interface protected: // unchecked function for use by derived class implementations private: // implementation details }; ExampleSometimes, the default order of members conflicts with a desire to separate the public interface from implementation details.In such cases, private types and functions can be placed with private data. class X { public: // interface protected: // unchecked function for use by derived class implementations private: // implementation details (types, functions, and data) }; Example, badAvoid multiple blocks of declarations of one access (e.g., public) dispersed among blocks of declarations with different access (e.g. private). class X { // bad public: void f(); public: int g(); // ... }; The use of macros to declare groups of members often leads to violation of any ordering rules.However, macros obscures what is being expressed anyway. EnforcementFlag departures from the suggested order. There will be a lot of old code that doesn’t follow this rule. NL.17: Use K&amp;R-derived layoutReasonThis is the original C and C++ layout. It preserves vertical space well. It distinguishes different language constructs (such as functions and classes) well. NoteIn the context of C++, this style is often called “Stroustrup”. Examplestruct Cable { int x; // ... }; double foo(int x) { if (0 &lt; x) { // ... } switch (x) { case 0: // ... break; case amazing: // ... break; default: // ... break; } if (0 &lt; x) ++x; if (x &lt; 0) something(); else something_else(); return some_value; } Note the space between if and ( NoteUse separate lines for each statement, the branches of an if, and the body of a for. NoteThe { for a class and a struct is not on a separate line, but the { for a function is. NoteCapitalize the names of your user-defined types to distinguish them from standards-library types. NoteDo not capitalize function names. EnforcementIf you want enforcement, use an IDE to reformat. NL.18: Use C++-style declarator layoutReasonThe C-style layout emphasizes use in expressions and grammar, whereas the C++-style emphasizes types.The use in expressions argument doesn’t hold for references. ExampleT&amp; operator[](size_t); // OK T &amp;operator[](size_t); // just strange T &amp; operator[](size_t); // undecided EnforcementImpossible in the face of history. NL.19: Avoid names that are easily misreadReasonReadability.Not everyone has screens and printers that make it easy to distinguish all characters.We easily confuse similarly spelled and slightly misspelled words. Exampleint oO01lL = 6; // bad int splunk = 7; int splonk = 8; // bad: splunk and splonk are easily confused Enforcement??? NL.20: Don’t place two statements on the same lineReasonReadability.It is really easy to overlook a statement when there is more on a line. Exampleint x = 7; char* p = 29; // don&apos;t int x = 7; f(x); ++x; // don&apos;t EnforcementEasy. NL.21: Declare one name (only) per declarationReasonReadability.Minimizing confusion with the declarator syntax. NoteFor details, see ES.10. NL.25: Don’t use void as an argument typeReasonIt’s verbose and only needed where C compatibility matters. Examplevoid f(void); // bad void g(); // better NoteEven Dennis Ritchie deemed void f(void) an abomination.You can make an argument for that abomination in C when function prototypes were rare so that banning: int f(); f(1, 2, &quot;weird but valid C89&quot;); // hope that f() is defined int f(a, b, c) char* c; { /* ... */ } would have caused major problems, but not in the 21st century and in C++. NL.26: Use conventional const notationReasonConventional notation is more familiar to more programmers.Consistency in large code bases. Exampleconst int x = 7; // OK int const y = 9; // bad const int *const p = nullptr; // OK, constant pointer to constant int int const *const p = nullptr; // bad, constant pointer to constant int NoteWe are well aware that you could claim the “bad” examples more logical than the ones marked “OK”,but they also confuse more people, especially novices relying on teaching material using the far more common, conventional OK style. As ever, remember that the aim of these naming and layout rules is consistency and that aesthetics vary immensely. EnforcementFlag const used as a suffix for a type. FAQ: Answers to frequently asked questionsThis section covers answers to frequently asked questions about these guidelines. FAQ.1: What do these guidelines aim to achieve?See the top of this page. This is an open-source project to maintain modern authoritative guidelines for writing C++ code using the current C++ Standard (as of this writing, C++14). The guidelines are designed to be modern, machine-enforceable wherever possible, and open to contributions and forking so that organizations can easily incorporate them into their own corporate coding guidelines. FAQ.2: When and where was this work first announced?It was announced by Bjarne Stroustrup in his CppCon 2015 opening keynote, “Writing Good C++14”. See also the accompanying isocpp.org blog post, and for the rationale of the type and memory safety guidelines see Herb Sutter’s follow-up CppCon 2015 talk, “Writing Good C++14 … By Default”. FAQ.3: Who are the authors and maintainers of these guidelines?The initial primary authors and maintainers are Bjarne Stroustrup and Herb Sutter, and the guidelines so far were developed with contributions from experts at CERN, Microsoft, Morgan Stanley, and several other organizations. At the time of their release, the guidelines are in a “0.6” state, and contributions are welcome. As Stroustrup said in his announcement: “We need help!” FAQ.4: How can I contribute?See CONTRIBUTING.md. We appreciate volunteer help! FAQ.5: How can I become an editor/maintainer?By contributing a lot first and having the consistent quality of your contributions recognized. See CONTRIBUTING.md. We appreciate volunteer help! FAQ.6: Have these guidelines been approved by the ISO C++ standards committee? Do they represent the consensus of the committee?No. These guidelines are outside the standard. They are intended to serve the standard, and be maintained as current guidelines about how to use the current Standard C++ effectively. We aim to keep them in sync with the standard as that is evolved by the committee. FAQ.7: If these guidelines are not approved by the committee, why are they under github.com/isocpp?Because isocpp is the Standard C++ Foundation; the committee’s repositories are under github.com/cplusplus. Some neutral organization has to own the copyright and license to make it clear this is not being dominated by any one person or vendor. The natural entity is the Foundation, which exists to promote the use and up-to-date understanding of modern Standard C++ and the work of the committee. This follows the same pattern that isocpp.org did for the C++ FAQ, which was initially the work of Bjarne Stroustrup, Marshall Cline, and Herb Sutter and contributed to the open project in the same way. FAQ.8: Will there be a C++98 version of these Guidelines? a C++11 version?No. These guidelines are about how to best use Standard C++14 (and, if you have an implementation available, the Concepts Technical Specification) and write code assuming you have a modern conforming compiler. FAQ.9: Do these guidelines propose new language features?No. These guidelines are about how to best use Standard C++14 + the Concepts Technical Specification, and they limit themselves to recommending only those features. FAQ.10: What version of Markdown do these guidelines use?These coding standards are written using CommonMark, and &lt;a&gt; HTML anchors. We are considering the following extensions from GitHub Flavored Markdown (GFM): fenced code blocks (consistently using indented vs. fenced is under discussion) tables (none yet but we’ll likely need them, and this is a GFM extension) Avoid other HTML tags and other extensions. Note: We are not yet consistent with this style. FAQ.50: What is the GSL (guideline support library)?The GSL is the small set of types and aliases specified in these guidelines. As of this writing, their specification herein is too sparse; we plan to add a WG21-style interface specification to ensure that different implementations agree, and to propose as a contribution for possible standardization, subject as usual to whatever the committee decides to accept/improve/alter/reject. FAQ.51: Is github.com/Microsoft/GSL the GSL?No. That is just a first implementation contributed by Microsoft. Other implementations by other vendors are encouraged, as are forks of and contributions to that implementation. As of this writing one week into the public project, at least one GPLv3 open-source implementation already exists. We plan to produce a WG21-style interface specification to ensure that different implementations agree. FAQ.52: Why not supply an actual GSL implementation in/with these guidelines?We are reluctant to bless one particular implementation because we do not want to make people think there is only one, and inadvertently stifle parallel implementations. And if these guidelines included an actual implementation, then whoever contributed it could be mistakenly seen as too influential. We prefer to follow the long-standing approach of the committee, namely to specify interfaces, not implementations. But at the same time we want at least one implementation available; we hope for many. FAQ.53: Why weren’t the GSL types proposed through Boost?Because we want to use them immediately, and because they are temporary in that we want to retire them as soon as types that fill the same needs exist in the standard library. FAQ.54: Has the GSL (guideline support library) been approved by the ISO C++ standards committee?No. The GSL exists only to supply a few types and aliases that are not currently in the standard library. If the committee decides on standardized versions (of these or other types that fill the same need) then they can be removed from the GSL. FAQ.55: If you’re using the standard types where available, why is the GSL string_span different from the string_view in the Library Fundamentals 1 Technical Specification and C++17 Working Paper? Why not just use the committee-approved string_view?The consensus on the taxonomy of views for the C++ Standard Library was that “view” means “read-only”, and “span” means “read/write”. The read-only string_view was the first such component to complete the standardization process, while span and string_span are currently being considered for standardization. FAQ.56: Is owner the same as the proposed observer_ptr?No. owner owns, is an alias, and can be applied to any indirection type. The main intent of observer_ptr is to signify a non-owning pointer. FAQ.57: Is stack_array the same as the standard array?No. stack_array is guaranteed to be allocated on the stack. Although a std::array contains its storage directly inside itself, the array object can be put anywhere, including the heap. FAQ.58: Is dyn_array the same as vector or the proposed dynarray?No. dyn_array is not resizable, and is a safe way to refer to a heap-allocated fixed-size array. Unlike vector, it is intended to replace array-new[]. Unlike the dynarray that has been proposed in the committee, this does not anticipate compiler/language magic to somehow allocate it on the stack when it is a member of an object that is allocated on the stack; it simply refers to a “dynamic” or heap-based array. FAQ.59: Is Expects the same as assert?No. It is a placeholder for language support for contract preconditions. FAQ.60: Is Ensures the same as assert?No. It is a placeholder for language support for contract postconditions. Appendix A: LibrariesThis section lists recommended libraries, and explicitly recommends a few. ??? Suitable for the general guide? I think not ??? Appendix B: Modernizing codeIdeally, we follow all rules in all code.Realistically, we have to deal with a lot of old code: application code written before the guidelines were formulated or known libraries written to older/different standards code written under “unusual” constraints code that we just haven’t gotten around to modernizing If we have a million lines of new code, the idea of “just changing it all at once” is typically unrealistic.Thus, we need a way of gradually modernizing a code base. Upgrading older code to modern style can be a daunting task.Often, the old code is both a mess (hard to understand) and working correctly (for the current range of uses).Typically, the original programmer is not around and the test cases incomplete.The fact that the code is a mess dramatically increases the effort needed to make any change and the risk of introducing errors.Often, messy old code runs unnecessarily slowly because it requires outdated compilers and cannot take advantage of modern hardware.In many cases, automated “modernizer”-style tool support would be required for major upgrade efforts. The purpose of modernizing code is to simplify adding new functionality, to ease maintenance, and to increase performance (throughput or latency), and to better utilize modern hardware.Making code “look pretty” or “follow modern style” are not by themselves reasons for change.There are risks implied by every change and costs (including the cost of lost opportunities) implied by having an outdated code base.The cost reductions must outweigh the risks. But how? There is no one approach to modernizing code.How best to do it depends on the code, the pressure for updates, the backgrounds of the developers, and the available tool.Here are some (very general) ideas: The ideal is “just upgrade everything.” That gives the most benefits for the shortest total time.In most circumstances, it is also impossible. We could convert a code base module for module, but any rules that affects interfaces (especially ABIs), such as use span, cannot be done on a per-module basis. We could convert code “bottom up” starting with the rules we estimate will give the greatest benefits and/or the least trouble in a given code base. We could start by focusing on the interfaces, e.g., make sure that no resources are lost and no pointer is misused.This would be a set of changes across the whole code base, but would most likely have huge benefits.Afterwards, code hidden behind those interfaces can be gradually modernized without affecting other code. Whichever way you choose, please note that the most advantages come with the highest conformance to the guidelines.The guidelines are not a random set of unrelated rules where you can randomly pick and choose with an expectation of success. We would dearly love to hear about experience and about tools used.Modernization can be much faster, simpler, and safer when supported with analysis tools and even code transformation tools. Appendix C: DiscussionThis section contains follow-up material on rules and sets of rules.In particular, here we present further rationale, longer examples, and discussions of alternatives. Discussion: Define and initialize member variables in the order of member declarationMember variables are always initialized in the order they are declared in the class definition, so write them in that order in the constructor initialization list. Writing them in a different order just makes the code confusing because it won’t run in the order you see, and that can make it hard to see order-dependent bugs. class Employee { string email, first, last; public: Employee(const char* firstName, const char* lastName); // ... }; Employee::Employee(const char* firstName, const char* lastName) : first(firstName), last(lastName), // BAD: first and last not yet constructed email(first + &quot;.&quot; + last + &quot;@acme.com&quot;) {} In this example, email will be constructed before first and last because it is declared first. That means its constructor will attempt to use first and last too soon – not just before they are set to the desired values, but before they are constructed at all. If the class definition and the constructor body are in separate files, the long-distance influence that the order of member variable declarations has over the constructor’s correctness will be even harder to spot. References: [Cline99] §22.03-11, [Dewhurst03] §52-53, [Koenig97] §4, [Lakos96] §10.3.5, [Meyers97] §13, [Murray93] §2.1.3, [Sutter00] §47 Discussion: Use of =, {}, and () as initializers??? Discussion: Use a factory function if you need “virtual behavior” during initializationIf your design wants virtual dispatch into a derived class from a base class constructor or destructor for functions like f and g, you need other techniques, such as a post-constructor – a separate member function the caller must invoke to complete initialization, which can safely call f and g because in member functions virtual calls behave normally. Some techniques for this are shown in the References. Here’s a non-exhaustive list of options: Pass the buck: Just document that user code must call the post-initialization function right after constructing an object. Post-initialize lazily: Do it during the first call of a member function. A Boolean flag in the base class tells whether or not post-construction has taken place yet. Use virtual base class semantics: Language rules dictate that the constructor most-derived class decides which base constructor will be invoked; you can use that to your advantage. (See [Taligent94].) Use a factory function: This way, you can easily force a mandatory invocation of a post-constructor function. Here is an example of the last option: class B { public: B() { /* ... */ f(); /* ... */ } // BAD: see Item 49.1 virtual void f() = 0; // ... }; class B { protected: B() { /* ... */ } virtual void post_initialize() // called right after construction { /* ... */ f(); /* ... */ } // GOOD: virtual dispatch is safe public: virtual void f() = 0; template&lt;class T&gt; static shared_ptr&lt;T&gt; create() // interface for creating objects { auto p = make_shared&lt;T&gt;(); p-&gt;post_initialize(); return p; } }; class D : public B { // some derived class public: void f() override { /* ... */ }; protected: D() {} template&lt;class T&gt; friend shared_ptr&lt;T&gt; B::Create(); }; shared_ptr&lt;D&gt; p = D::Create&lt;D&gt;(); // creating a D object This design requires the following discipline: Derived classes such as D must not expose a public constructor. Otherwise, D‘s users could create D objects that don’t invoke PostInitialize. Allocation is limited to operator new. B can, however, override new (see Items 45 and 46). D must define a constructor with the same parameters that B selected. Defining several overloads of Create can assuage this problem, however; and the overloads can even be templated on the argument types. If the requirements above are met, the design guarantees that PostInitialize has been called for any fully constructed B-derived object. PostInitialize doesn’t need to be virtual; it can, however, invoke virtual functions freely. In summary, no post-construction technique is perfect. The worst techniques dodge the whole issue by simply asking the caller to invoke the post-constructor manually. Even the best require a different syntax for constructing objects (easy to check at compile time) and/or cooperation from derived class authors (impossible to check at compile time). References: [Alexandrescu01] §3, [Boost], [Dewhurst03] §75, [Meyers97] §46, [Stroustrup00] §15.4.3, [Taligent94] Discussion: Make base class destructors public and virtual, or protected and nonvirtualShould destruction behave virtually? That is, should destruction through a pointer to a base class be allowed? If yes, then base‘s destructor must be public in order to be callable, and virtual otherwise calling it results in undefined behavior. Otherwise, it should be protected so that only derived classes can invoke it in their own destructors, and nonvirtual since it doesn’t need to behave virtually virtual. ExampleThe common case for a base class is that it’s intended to have publicly derived classes, and so calling code is just about sure to use something like a shared_ptr&lt;base&gt;: class Base { public: ~Base(); // BAD, not virtual virtual ~Base(); // GOOD // ... }; class Derived : public Base { /* ... */ }; { unique_ptr&lt;Base&gt; pb = make_unique&lt;Derived&gt;(); // ... } // ~pb invokes correct destructor only when ~Base is virtual In rarer cases, such as policy classes, the class is used as a base class for convenience, not for polymorphic behavior. It is recommended to make those destructors protected and nonvirtual: class My_policy { public: virtual ~My_policy(); // BAD, public and virtual protected: ~My_policy(); // GOOD // ... }; template&lt;class Policy&gt; class customizable : Policy { /* ... */ }; // note: private inheritance NoteThis simple guideline illustrates a subtle issue and reflects modern uses of inheritance and object-oriented design principles. For a base class Base, calling code might try to destroy derived objects through pointers to Base, such as when using a unique_ptr&lt;Base&gt;. If Base‘s destructor is public and nonvirtual (the default), it can be accidentally called on a pointer that actually points to a derived object, in which case the behavior of the attempted deletion is undefined. This state of affairs has led older coding standards to impose a blanket requirement that all base class destructors must be virtual. This is overkill (even if it is the common case); instead, the rule should be to make base class destructors virtual if and only if they are public. To write a base class is to define an abstraction (see Items 35 through 37). Recall that for each member function participating in that abstraction, you need to decide: Whether it should behave virtually or not. Whether it should be publicly available to all callers using a pointer to Base or else be a hidden internal implementation detail. As described in Item 39, for a normal member function, the choice is between allowing it to be called via a pointer to Base nonvirtually (but possibly with virtual behavior if it invokes virtual functions, such as in the NVI or Template Method patterns), virtually, or not at all. The NVI pattern is a technique to avoid public virtual functions. Destruction can be viewed as just another operation, albeit with special semantics that make nonvirtual calls dangerous or wrong. For a base class destructor, therefore, the choice is between allowing it to be called via a pointer to Base virtually or not at all; “nonvirtually” is not an option. Hence, a base class destructor is virtual if it can be called (i.e., is public), and nonvirtual otherwise. Note that the NVI pattern cannot be applied to the destructor because constructors and destructors cannot make deep virtual calls. (See Items 39 and 55.) Corollary: When writing a base class, always write a destructor explicitly, because the implicitly generated one is public and nonvirtual. You can always =default the implementation if the default body is fine and you’re just writing the function to give it the proper visibility and virtuality. ExceptionSome component architectures (e.g., COM and CORBA) don’t use a standard deletion mechanism, and foster different protocols for object disposal. Follow the local patterns and idioms, and adapt this guideline as appropriate. Consider also this rare case: B is both a base class and a concrete class that can be instantiated by itself, and so the destructor must be public for B objects to be created and destroyed. Yet B also has no virtual functions and is not meant to be used polymorphically, and so although the destructor is public it does not need to be virtual. Then, even though the destructor has to be public, there can be great pressure to not make it virtual because as the first virtual function it would incur all the run-time type overhead when the added functionality should never be needed. In this rare case, you could make the destructor public and nonvirtual but clearly document that further-derived objects must not be used polymorphically as B‘s. This is what was done with std::unary_function. In general, however, avoid concrete base classes (see Item 35). For example, unary_function is a bundle-of-typedefs that was never intended to be instantiated standalone. It really makes no sense to give it a public destructor; a better design would be to follow this Item’s advice and give it a protected nonvirtual destructor. References: [C++CS] Item 50, [Cargill92] pp. 77-79, 207, [Cline99] §21.06, 21.12-13, [Henricson97] pp. 110-114, [Koenig97] Chapters 4, 11, [Meyers97] §14, [Stroustrup00] §12.4.2, [Sutter02] §27, [Sutter04] §18 Discussion: Usage of noexcept??? Discussion: Destructors, deallocation, and swap must never failNever allow an error to be reported from a destructor, a resource deallocation function (e.g., operator delete), or a swap function using throw. It is nearly impossible to write useful code if these operations can fail, and even if something does go wrong it nearly never makes any sense to retry. Specifically, types whose destructors may throw an exception are flatly forbidden from use with the C++ Standard Library. Most destructors are now implicitly noexcept by default. Exampleclass Nefarious { public: Nefarious() { /* code that could throw */ } // ok ~Nefarious() { /* code that could throw */ } // BAD, should not throw // ... }; Nefarious objects are hard to use safely even as local variables: void test(string&amp; s) { Nefarious n; // trouble brewing string copy = s; // copy the string } // destroy copy and then n Here, copying `s` could throw, and if that throws and if `n`&apos;s destructor then also throws, the program will exit via `std::terminate` because two exceptions can&apos;t be propagated simultaneously. Classes with Nefarious members or bases are also hard to use safely, because their destructors must invoke Nefarious‘ destructor, and are similarly poisoned by its poor behavior: class Innocent_bystander { Nefarious member; // oops, poisons the enclosing class&apos;s destructor // ... }; void test(string&amp; s) { Innocent_bystander i; // more trouble brewing string copy2 = s; // copy the string } // destroy copy and then i Here, if constructing `copy2` throws, we have the same problem because `i`&apos;s destructor now also can throw, and if so we&apos;ll invoke `std::terminate`. You can’t reliably create global or static Nefarious objects either: static Nefarious n; // oops, any destructor exception can&apos;t be caught You can’t reliably create arrays of Nefarious: void test() { std::array&lt;Nefarious, 10&gt; arr; // this line can std::terminate(!) } The behavior of arrays is undefined in the presence of destructors that throw because there is no reasonable rollback behavior that could ever be devised. Just think: What code can the compiler generate for constructing an `arr` where, if the fourth object&apos;s constructor throws, the code has to give up and in its cleanup mode tries to call the destructors of the already-constructed objects ... and one or more of those destructors throws? There is no satisfactory answer. You can’t use Nefarious objects in standard containers: std::vector&lt;Nefarious&gt; vec(10); // this line can std::terminate() The standard library forbids all destructors used with it from throwing. You can&apos;t store `Nefarious` objects in standard containers or use them with any other part of the standard library. NoteThese are key functions that must not fail because they are necessary for the two key operations in transactional programming: to back out work if problems are encountered during processing, and to commit work if no problems occur. If there’s no way to safely back out using no-fail operations, then no-fail rollback is impossible to implement. If there’s no way to safely commit state changes using a no-fail operation (notably, but not limited to, swap), then no-fail commit is impossible to implement. Consider the following advice and requirements found in the C++ Standard: If a destructor called during stack unwinding exits with an exception, terminate is called (15.5.1). So destructors should generally catch exceptions and not let them propagate out of the destructor. –[C++03] §15.2(3) No destructor operation defined in the C++ Standard Library (including the destructor of any type that is used to instantiate a standard-library template) will throw an exception. –[C++03] §17.4.4.8(3) Deallocation functions, including specifically overloaded operator delete and operator delete[], fall into the same category, because they too are used during cleanup in general, and during exception handling in particular, to back out of partial work that needs to be undone.Besides destructors and deallocation functions, common error-safety techniques rely also on swap operations never failing – in this case, not because they are used to implement a guaranteed rollback, but because they are used to implement a guaranteed commit. For example, here is an idiomatic implementation of operator= for a type T that performs copy construction followed by a call to a no-fail swap: T&amp; T::operator=(const T&amp; other) { auto temp = other; swap(temp); } (See also Item 56. ???) Fortunately, when releasing a resource, the scope for failure is definitely smaller. If using exceptions as the error reporting mechanism, make sure such functions handle all exceptions and other errors that their internal processing might generate. (For exceptions, simply wrap everything sensitive that your destructor does in a try/catch(...) block.) This is particularly important because a destructor might be called in a crisis situation, such as failure to allocate a system resource (e.g., memory, files, locks, ports, windows, or other system objects). When using exceptions as your error handling mechanism, always document this behavior by declaring these functions noexcept. (See Item 75.) References: [C++CS] Item 51; [C++03] §15.2(3), §17.4.4.8(3), [Meyers96] §11, [Stroustrup00] §14.4.7, §E.2-4, [Sutter00] §8, §16, [Sutter02] §18-19 Define Copy, move, and destroy consistentlyReason ??? NoteIf you define a copy constructor, you must also define a copy assignment operator. NoteIf you define a move constructor, you must also define a move assignment operator. Exampleclass X { // ... public: X(const X&amp;) { /* stuff */ } // BAD: failed to also define a copy assignment operator X(x&amp;&amp;) noexcept { /* stuff */ } // BAD: failed to also define a move assignment operator }; X x1; X x2 = x1; // ok x2 = x1; // pitfall: either fails to compile, or does something suspicious If you define a destructor, you should not use the compiler-generated copy or move operation; you probably need to define or suppress copy and/or move. class X { HANDLE hnd; // ... public: ~X() { /* custom stuff, such as closing hnd */ } // suspicious: no mention of copying or moving -- what happens to hnd? }; X x1; X x2 = x1; // pitfall: either fails to compile, or does something suspicious x2 = x1; // pitfall: either fails to compile, or does something suspicious If you define copying, and any base or member has a type that defines a move operation, you should also define a move operation. class X { string s; // defines more efficient move operations // ... other data members ... public: X(const X&amp;) { /* stuff */ } X&amp; operator=(const X&amp;) { /* stuff */ } // BAD: failed to also define a move construction and move assignment // (why wasn&apos;t the custom &quot;stuff&quot; repeated here?) }; X test() { X local; // ... return local; // pitfall: will be inefficient and/or do the wrong thing } If you define any of the copy constructor, copy assignment operator, or destructor, you probably should define the others. NoteIf you need to define any of these five functions, it means you need it to do more than its default behavior – and the five are asymmetrically interrelated. Here’s how: If you write/disable either of the copy constructor or the copy assignment operator, you probably need to do the same for the other: If one does “special” work, probably so should the other because the two functions should have similar effects. (See Item 53, which expands on this point in isolation.) If you explicitly write the copying functions, you probably need to write the destructor: If the “special” work in the copy constructor is to allocate or duplicate some resource (e.g., memory, file, socket), you need to deallocate it in the destructor. If you explicitly write the destructor, you probably need to explicitly write or disable copying: If you have to write a non-trivial destructor, it’s often because you need to manually release a resource that the object held. If so, it is likely that those resources require careful duplication, and then you need to pay attention to the way objects are copied and assigned, or disable copying completely. In many cases, holding properly encapsulated resources using RAII “owning” objects can eliminate the need to write these operations yourself. (See Item 13.) Prefer compiler-generated (including =default) special members; only these can be classified as “trivial”, and at least one major standard library vendor heavily optimizes for classes having trivial special members. This is likely to become common practice. Exceptions: When any of the special functions are declared only to make them nonpublic or virtual, but without special semantics, it doesn’t imply that the others are needed.In rare cases, classes that have members of strange types (such as reference members) are an exception because they have peculiar copy semantics.In a class holding a reference, you likely need to write the copy constructor and the assignment operator, but the default destructor already does the right thing. (Note that using a reference member is almost always wrong.) References: [C++CS] Item 52; [Cline99] §30.01-14, [Koenig97] §4, [Stroustrup00] §5.5, §10.4, [SuttHysl04b] Resource management rule summary: Provide strong resource safety; that is, never leak anything that you think of as a resource Never throw while holding a resource not owned by a handle A “raw” pointer or reference is never a resource handle Never let a pointer outlive the object it points to Use templates to express containers (and other resource handles) Return containers by value (relying on move or copy elision for efficiency) If a class is a resource handle, it needs a constructor, a destructor, and copy and/or move operations If a class is a container, give it an initializer-list constructor Discussion: Provide strong resource safety; that is, never leak anything that you think of as a resourceReasonPrevent leaks. Leaks can lead to performance degradation, mysterious error, system crashes, and security violations. Alternative formulation: Have every resource represented as an object of some class managing its lifetime. Exampletemplate&lt;class T&gt; class Vector { // ... private: T* elem; // sz elements on the free store, owned by the class object int sz; }; This class is a resource handle. It manages the lifetime of the Ts. To do so, Vector must define or delete the set of special operations (constructors, a destructor, etc.). Example??? &quot;odd&quot; non-memory resource ??? EnforcementThe basic technique for preventing leaks is to have every resource owned by a resource handle with a suitable destructor. A checker can find “naked news”. Given a list of C-style allocation functions (e.g., fopen()), a checker can also find uses that are not managed by a resource handle. In general, “naked pointers” can be viewed with suspicion, flagged, and/or analyzed. A complete list of resources cannot be generated without human input (the definition of “a resource” is necessarily too general), but a tool can be “parameterized” with a resource list. Discussion: Never throw while holding a resource not owned by a handleReasonThat would be a leak. Examplevoid f(int i) { FILE* f = fopen(&quot;a file&quot;, &quot;r&quot;); ifstream is { &quot;another file&quot; }; // ... if (i == 0) return; // ... fclose(f); } If i == 0 the file handle for a file is leaked. On the other hand, the ifstream for another file will correctly close its file (upon destruction). If you must use an explicit pointer, rather than a resource handle with specific semantics, use a unique_ptr or a shared_ptr with a custom deleter: void f(int i) { unique_ptr&lt;FILE, int(*)(FILE*)&gt; f(fopen(&quot;a file&quot;, &quot;r&quot;), fclose); // ... if (i == 0) return; // ... } Better: void f(int i) { ifstream input {&quot;a file&quot;}; // ... if (i == 0) return; // ... } EnforcementA checker must consider all “naked pointers” suspicious.A checker probably must rely on a human-provided list of resources.For starters, we know about the standard-library containers, string, and smart pointers.The use of span and string_span should help a lot (they are not resource handles). Discussion: A “raw” pointer or reference is never a resource handleReasonTo be able to distinguish owners from views. NoteThis is independent of how you “spell” pointer: T*, T&amp;, Ptr&lt;T&gt; and Range&lt;T&gt; are not owners. Discussion: Never let a pointer outlive the object it points toReasonTo avoid extremely hard-to-find errors. Dereferencing such a pointer is undefined behavior and could lead to violations of the type system. Examplestring* bad() // really bad { vector&lt;string&gt; v = { &quot;This&quot;, &quot;will&quot;, &quot;cause&quot;, &quot;trouble&quot;, &quot;!&quot; }; // leaking a pointer into a destroyed member of a destroyed object (v) return &amp;v[0]; } void use() { string* p = bad(); vector&lt;int&gt; xx = {7, 8, 9}; // undefined behavior: x may not be the string &quot;This&quot; string x = *p; // undefined behavior: we don&apos;t know what (if anything) is allocated a location p *p = &quot;Evil!&quot;; } The strings of v are destroyed upon exit from bad() and so is v itself. The returned pointer points to unallocated memory on the free store. This memory (pointed into by p) may have been reallocated by the time *p is executed. There may be no string to read and a write through p could easily corrupt objects of unrelated types. EnforcementMost compilers already warn about simple cases and has the information to do more. Consider any pointer returned from a function suspect. Use containers, resource handles, and views (e.g., span known not to be resource handles) to lower the number of cases to be examined. For starters, consider every class with a destructor as resource handle. Discussion: Use templates to express containers (and other resource handles)ReasonTo provide statically type-safe manipulation of elements. Exampletemplate&lt;typename T&gt; class Vector { // ... T* elem; // point to sz elements of type T int sz; }; Discussion: Return containers by value (relying on move or copy elision for efficiency)ReasonTo simplify code and eliminate a need for explicit memory management. To bring an object into a surrounding scope, thereby extending its lifetime. See also: F.20, the general item about “out” output values Examplevector&lt;int&gt; get_large_vector() { return ...; } auto v = get_large_vector(); // return by value is ok, most modern compilers will do copy elision ExceptionSee the Exceptions in F.20. EnforcementCheck for pointers and references returned from functions and see if they are assigned to resource handles (e.g., to a unique_ptr). Discussion: If a class is a resource handle, it needs a constructor, a destructor, and copy and/or move operationsReasonTo provide complete control of the lifetime of the resource. To provide a coherent set of operations on the resource. Example??? Messing with pointers NoteIf all members are resource handles, rely on the default special operations where possible. template&lt;typename T&gt; struct Named { string name; T value; }; Now Named has a default constructor, a destructor, and efficient copy and move operations, provided T has. EnforcementIn general, a tool cannot know if a class is a resource handle. However, if a class has some of the default operations, it should have all, and if a class has a member that is a resource handle, it should be considered as resource handle. Discussion: If a class is a container, give it an initializer-list constructorReasonIt is common to need an initial set of elements. Exampletemplate&lt;typename T&gt; class Vector { public: Vector(std::initializer_list&lt;T&gt;); // ... }; Vector&lt;string&gt; vs { &quot;Nygaard&quot;, &quot;Ritchie&quot; }; EnforcementWhen is a class a container? ??? Appendix D: Supporting toolsThis section contains a list of tools that directly support adoption of the C++ Core Guidelines. This list is not intended to be an exhaustive list of toolsthat are helpful in writing good C++ code. If a tool is designed specifically to support and links to the C++ Core Guidelines it is a candidate for inclusion. Tools: Clang-tidyClang-tidy has a set of rules that specifically enforce the C++ Core Guidelines. These rules are named in the pattern cppcoreguidelines-*. Tools: CppCoreCheckThe Microsoft compiler’s C++ code analysis contains a set of rules specifically aimed at enforcement of the C++ Core Guidelines. GlossaryA relatively informal definition of terms used in the guidelines(based of the glossary in Programming: Principles and Practice using C++) More information on many topics about C++ can be found on the Standard C++ Foundation‘s site. ABI: Application Binary Interface, a specification for a specific hardware platform combined with the operating system. Contrast with API. abstract class: a class that cannot be directly used to create objects; often used to define an interface to derived classes.A class is made abstract by having a pure virtual function or only protected constructors. abstraction: a description of something that selectively and deliberately ignores (hides) details (e.g., implementation details); selective ignorance. address: a value that allows us to find an object in a computer’s memory. algorithm: a procedure or formula for solving a problem; a finite series of computational steps to produce a result. alias: an alternative way of referring to an object; often a name, pointer, or reference. API: Application Programming Interface, a set of functions that form the communication between various software components. Contrast with ABI. application: a program or a collection of programs that is considered an entity by its users. approximation: something (e.g., a value or a design) that is close to the perfect or ideal (value or design).Often an approximation is a result of trade-offs among ideals. argument: a value passed to a function or a template, in which it is accessed through a parameter. array: a homogeneous sequence of elements, usually numbered, e.g., [0:max). assertion: a statement inserted into a program to state (assert) that something must always be true at this point in the program. base class: a class used as the base of a class hierarchy. Typically a base class has one or more virtual functions. bit: the basic unit of information in a computer. A bit can have the value 0 or the value 1. bug: an error in a program. byte: the basic unit of addressing in most computers. Typically, a byte holds 8 bits. class: a user-defined type that may contain data members, function members, and member types. code: a program or a part of a program; ambiguously used for both source code and object code. compiler: a program that turns source code into object code. complexity: a hard-to-precisely-define notion or measure of the difficulty of constructing a solution to a problem or of the solution itself.Sometimes complexity is used to (simply) mean an estimate of the number of operations needed to execute an algorithm. computation: the execution of some code, usually taking some input and producing some output. concept: (1) a notion, and idea; (2) a set of requirements, usually for a template argument. concrete class: class for which objects can be created. constant: a value that cannot be changed (in a given scope); not mutable. constructor: an operation that initializes (“constructs”) an object.Typically a constructor establishes an invariant and often acquires resources needed for an object to be used (which are then typically released by a destructor). container: an object that holds elements (other objects). copy: an operation that makes two object have values that compare equal. See also move. correctness: a program or a piece of a program is correct if it meets its specification.Unfortunately, a specification can be incomplete or inconsistent, or can fail to meet users’ reasonable expectations.Thus, to produce acceptable code, we sometimes have to do more than just follow the formal specification. cost: the expense (e.g., in programmer time, run time, or space) of producing a program or of executing it.Ideally, cost should be a function of complexity. customization point: ??? data: values used in a computation. debugging: the act of searching for and removing errors from a program; usually far less systematic than testing. declaration: the specification of a name with its type in a program. definition: a declaration of an entity that supplies all information necessary to complete a program using the entity.Simplified definition: a declaration that allocates memory. derived class: a class derived from one or more base classes. design: an overall description of how a piece of software should operate to meet its specification. destructor: an operation that is implicitly invoked (called) when an object is destroyed (e.g., at the end of a scope). Often, it releases resources. encapsulation: protecting something meant to be private (e.g., implementation details) from unauthorized access. error: a mismatch between reasonable expectations of program behavior (often expressed as a requirement or a users’ guide) and what a program actually does. executable: a program ready to be run (executed) on a computer. feature creep: a tendency to add excess functionality to a program “just in case.” file: a container of permanent information in a computer. floating-point number: a computer’s approximation of a real number, such as 7.93 and 10.78e-3. function: a named unit of code that can be invoked (called) from different parts of a program; a logical unit of computation. generic programming: a style of programming focused on the design and efficient implementation of algorithms.A generic algorithm will work for all argument types that meet its requirements. In C++, generic programming typically uses templates. global variable: technically, a named object in namespace scope. handle: a class that allows access to another through a member pointer or reference. See also resource, copy, move. header: a file containing declarations used to share interfaces between parts of a program. hiding: the act of preventing a piece of information from being directly seen or accessed.For example, a name from a nested (inner) scope can prevent that same name from an outer (enclosing) scope from being directly used. ideal: the perfect version of something we are striving for. Usually we have to make trade-offs and settle for an approximation. implementation: (1) the act of writing and testing code; (2) the code that implements a program. infinite loop: a loop where the termination condition never becomes true. See iteration. infinite recursion: a recursion that doesn’t end until the machine runs out of memory to hold the calls.In reality, such recursion is never infinite but is terminated by some hardware error. information hiding: the act of separating interface and implementation, thus hiding implementation details not meant for the user’s attention and providing an abstraction. initialize: giving an object its first (initial) value. input: values used by a computation (e.g., function arguments and characters typed on a keyboard). integer: a whole number, such as 42 and -99. interface: a declaration or a set of declarations specifying how a piece of code (such as a function or a class) can be called. invariant: something that must be always true at a given point (or points) of a program; typically used to describe the state (set of values) of an object or the state of a loop before entry into the repeated statement. iteration: the act of repeatedly executing a piece of code; see recursion. iterator: an object that identifies an element of a sequence. ISO: International Organization for Standardization. The C++ language is an ISO standard, ISO/IEC 14882. More information at iso.org. library: a collection of types, functions, classes, etc. implementing a set of facilities (abstractions) meant to be potentially used as part of more that one program. lifetime: the time from the initialization of an object until it becomes unusable (goes out of scope, is deleted, or the program terminates). linker: a program that combines object code files and libraries into an executable program. literal: a notation that directly specifies a value, such as 12 specifying the integer value “twelve.” loop: a piece of code executed repeatedly; in C++, typically a for-statement or a while-statement. move: an operation that transfers a value from one object to another leaving behind a value representing “empty.” See also copy. mutable: changeable; the opposite of immutable, constant, and invariable. object: (1) an initialized region of memory of a known type which holds a value of that type; (2) a region of memory. object code: output from a compiler intended as input for a linker (for the linker to produce executable code). object file: a file containing object code. object-oriented programming: (OOP) a style of programming focused on the design and use of classes and class hierarchies. operation: something that can perform some action, such as a function and an operator. output: values produced by a computation (e.g., a function result or lines of characters written on a screen). overflow: producing a value that cannot be stored in its intended target. overload: defining two functions or operators with the same name but different argument (operand) types. override: defining a function in a derived class with the same name and argument types as a virtual function in the base class, thus making the function callable through the interface defined by the base class. owner: an object responsible for releasing a resource. paradigm: a somewhat pretentious term for design or programming style; often used with the (erroneous) implication that there exists a paradigm that is superior to all others. parameter: a declaration of an explicit input to a function or a template. When called, a function can access the arguments passed through the names of its parameters. pointer: (1) a value used to identify a typed object in memory; (2) a variable holding such a value. post-condition: a condition that must hold upon exit from a piece of code, such as a function or a loop. pre-condition: a condition that must hold upon entry into a piece of code, such as a function or a loop. program: code (possibly with associated data) that is sufficiently complete to be executed by a computer. programming: the art of expressing solutions to problems as code. programming language: a language for expressing programs. pseudo code: a description of a computation written in an informal notation rather than a programming language. pure virtual function: a virtual function that must be overridden in a derived class. RAII: (“Resource Acquisition Is Initialization”) a basic technique for resource management based on scopes. range: a sequence of values that can be described by a start point and an end point. For example, [0:5) means the values 0, 1, 2, 3, and 4. recursion: the act of a function calling itself; see also iteration. reference: (1) a value describing the location of a typed value in memory; (2) a variable holding such a value. regular expression: a notation for patterns in character strings. regular: a type that behaves similarly to built-in types like int and can be compared with ==.In particular, an object of a regular type can be copied and the result of a copy is a separate object that compares equal to the original. See also semiregular type. requirement: (1) a description of the desired behavior of a program or part of a program; (2) a description of the assumptions a function or template makes of its arguments. resource: something that is acquired and must later be released, such as a file handle, a lock, or memory. See also handle, owner. rounding: conversion of a value to the mathematically nearest value of a less precise type. RTTI: Run-Time Type Information. ??? scope: the region of program text (source code) in which a name can be referred to. semiregular: a type that behaves roughly like an built-in type like int, but possibly without a == operator. See also regular type. sequence: elements that can be visited in a linear order. software: a collection of pieces of code and associated data; often used interchangeably with program. source code: code as produced by a programmer and (in principle) readable by other programmers. source file: a file containing source code. specification: a description of what a piece of code should do. standard: an officially agreed upon definition of something, such as a programming language. state: a set of values. STL: the containers, iterators, and algorithms part of the standard library. string: a sequence of characters. style: a set of techniques for programming leading to a consistent use of language features; sometimes used in a very restricted sense to refer just to low-level rules for naming and appearance of code. subtype: derived type; a type that has all the properties of a type and possibly more. supertype: base type; a type that has a subset of the properties of a type. system: (1) a program or a set of programs for performing a task on a computer; (2) a shorthand for “operating system”, that is, the fundamental execution environment and tools for a computer. TS: Technical Specification, A Technical Specification addresses work still under technical development, or where it is believed that there will be a future, but not immediate, possibility of agreement on an International Standard. A Technical Specification is published for immediate use, but it also provides a means to obtain feedback. The aim is that it will eventually be transformed and republished as an International Standard. template: a class or a function parameterized by one or more types or (compile-time) values; the basic C++ language construct supporting generic programming. testing: a systematic search for errors in a program. trade-off: the result of balancing several design and implementation criteria. truncation: loss of information in a conversion from a type into another that cannot exactly represent the value to be converted. type: something that defines a set of possible values and a set of operations for an object. uninitialized: the (undefined) state of an object before it is initialized. unit: (1) a standard measure that gives meaning to a value (e.g., km for a distance); (2) a distinguished (e.g., named) part of a larger whole. use case: a specific (typically simple) use of a program meant to test its functionality and demonstrate its purpose. value: a set of bits in memory interpreted according to a type. variable: a named object of a given type; contains a value unless uninitialized. virtual function: a member function that can be overridden in a derived class. word: a basic unit of memory in a computer, often the unit used to hold an integer. To-do: Unclassified proto-rulesThis is our to-do list.Eventually, the entries will become rules or parts of rules.Alternatively, we will decide that no change is needed and delete the entry. No long-distance friendship Should physical design (what’s in a file) and large-scale design (libraries, groups of libraries) be addressed? Namespaces Avoid using directives in the global scope (except for std, and other “fundamental” namespaces (e.g. experimental)) How granular should namespaces be? All classes/functions designed to work together and released together (as defined in Sutter/Alexandrescu) or something narrower or wider? Should there be inline namespaces (à la std::literals::*_literals)? Avoid implicit conversions Const member functions should be thread safe … aka, but I don’t really change the variable, just assign it a value the first time it’s called … argh Always initialize variables, use initialization lists for member variables. Anyone writing a public interface which takes or returns void* should have their toes set on fire. That one has been a personal favorite of mine for a number of years. :) Use const-ness wherever possible: member functions, variables and (yippee) const_iterators Use auto (size) vs. {initializers} vs. {Extent{size}} Don’t overabstract Never pass a pointer down the call stack falling through a function bottom Should there be guidelines to choose between polymorphisms? YES. classic (virtual functions, reference semantics) vs. Sean Parent style (value semantics, type-erased, kind of like std::function) vs. CRTP/static? YES Perhaps even vs. tag dispatch? should virtual calls be banned from ctors/dtors in your guidelines? YES. A lot of people ban them, even though I think it’s a big strength of C++ that they are ??? -preserving (D disappointed me so much when it went the Java way). WHAT WOULD BE A GOOD EXAMPLE? Speaking of lambdas, what would weigh in on the decision between lambdas and (local?) classes in algorithm calls and other callback scenarios? And speaking of std::bind, Stephen T. Lavavej criticizes it so much I’m starting to wonder if it is indeed going to fade away in future. Should lambdas be recommended instead? What to do with leaks out of temporaries? : p = (s1 + s2).c_str(); pointer/iterator invalidation leading to dangling pointers: void bad() { int* p = new int[700]; int* q = &amp;p[7]; delete p; vector&lt;int&gt; v(700); int* q2 = &amp;v[7]; v.resize(900); // ... use q and q2 ... } LSP private inheritance vs/and membership avoid static class members variables (race conditions, almost-global variables) Use RAII lock guards (lock_guard, unique_lock, shared_lock), never call mutex.lock and mutex.unlock directly (RAII) Prefer non-recursive locks (often used to work around bad reasoning, overhead) Join your threads! (because of std::terminate in destructor if not joined or detached … is there a good reason to detach threads?) – ??? could support library provide a RAII wrapper for std::thread? If two or more mutexes must be acquired at the same time, use std::lock (or another deadlock avoidance algorithm?) When using a condition_variable, always protect the condition by a mutex (atomic bool whose value is set outside of the mutex is wrong!), and use the same mutex for the condition variable itself. Never use atomic_compare_exchange_strong with std::atomic&lt;user-defined-struct&gt; (differences in padding matter, while compare_exchange_weak in a loop converges to stable padding) individual shared_future objects are not thread-safe: two threads cannot wait on the same shared_future object (they can wait on copies of a shared_future that refer to the same shared state) individual shared_ptr objects are not thread-safe: different threads can call non-const member functions on different shared_ptrs that refer to the same shared object, but one thread cannot call a non-const member function of a shared_ptr object while another thread accesses that same shared_ptr object (if you need that, consider atomic_shared_ptr instead) rules for arithmetic Bibliography [Abrahams01]: D. Abrahams. Exception-Safety in Generic Components. [Alexandrescu01]: A. Alexandrescu. Modern C++ Design (Addison-Wesley, 2001). [C++03]: ISO/IEC 14882:2003(E), Programming Languages — C++ (updated ISO and ANSI C++ Standard including the contents of (C++98) plus errata corrections). [C++CS]: ??? [Cargill92]: T. Cargill. C++ Programming Style (Addison-Wesley, 1992). [Cline99]: M. Cline, G. Lomow, and M. Girou. C++ FAQs (2ndEdition) (Addison-Wesley, 1999). [Dewhurst03]: S. Dewhurst. C++ Gotchas (Addison-Wesley, 2003). [Henricson97]: M. Henricson and E. Nyquist. Industrial Strength C++ (Prentice Hall, 1997). [Koenig97]: A. Koenig and B. Moo. Ruminations on C++ (Addison-Wesley, 1997). [Lakos96]: J. Lakos. Large-Scale C++ Software Design (Addison-Wesley, 1996). [Meyers96]: S. Meyers. More Effective C++ (Addison-Wesley, 1996). [Meyers97]: S. Meyers. Effective C++ (2nd Edition) (Addison-Wesley, 1997). [Meyers15]: S. Meyers. Effective Modern C++ (O’Reilly, 2015). [Murray93]: R. Murray. C++ Strategies and Tactics (Addison-Wesley, 1993). [Stroustrup94]: B. Stroustrup. The Design and Evolution of C++ (Addison-Wesley, 1994). [Stroustrup00]: B. Stroustrup. The C++ Programming Language (Special 3rdEdition) (Addison-Wesley, 2000). [Stroustrup05]: B. Stroustrup. A rationale for semantically enhanced library languages. [Stroustrup13]: B. Stroustrup. The C++ Programming Language (4th Edition). Addison Wesley 2013. [Stroustrup14]: B. Stroustrup. A Tour of C++.Addison Wesley 2014. [Stroustrup15]: B. Stroustrup, Herb Sutter, and G. Dos Reis: A brief introduction to C++’s model for type- and resource-safety. [SuttHysl04b]: H. Sutter and J. Hyslop. “Collecting Shared Objects” (C/C++ Users Journal, 22(8), August 2004). [SuttAlex05]: H. Sutter and A. Alexandrescu. C++ Coding Standards. Addison-Wesley 2005. [Sutter00]: H. Sutter. Exceptional C++ (Addison-Wesley, 2000). [Sutter02]: H. Sutter. More Exceptional C++ (Addison-Wesley, 2002). [Sutter04]: H. Sutter. Exceptional C++ Style (Addison-Wesley, 2004). [Taligent94]: Taligent’s Guide to Designing Programs (Addison-Wesley, 1994).]]></content>
  </entry>
  <entry>
    <title><![CDATA[Dependency walker的简单介绍]]></title>
    <url>%2F2018%2F07%2F05%2Fsimple-user-guide-to-dependency-walker%2F</url>
    <content type="text"><![CDATA[在c++中可以使用LoadLibrary来动态加载dll，最近遇到了一个跟发布有关的问题。在自己的电脑上运行没问题，但是在客户机上却LoadLibrary失败，返回126的错误。使用Dependency walker分析之后，发现是要动态加载的类库依赖另外一个类库，客户机找不到该类库，所以失败。下面简单介绍一下Dependency walker的使用方法。 Dependency walker是一个可以用来查看windows上可执行文件依赖库的工具。可以用来分析库的装载相关的错误。 Dependency Walker is a free utility that scans any 32-bit or 64-bit Windows module (exe, dll, ocx, sys, etc.) and builds a hierarchical tree diagram of all dependent modules. For each module found, it lists all the functions that are exported by that module, and which of those functions are actually being called by other modules. Another view displays the minimum set of required files, along with detailed information about each file including a full path to the file, base address, version numbers, machine type, debug information, and more. Dependency walker主界面如下： 通过File-&gt;open来加载一个module，module可以是dll，exe文件。左侧是加载的module的依赖的dll列表，显示了树状的依赖层级。可以在菜单栏中选择显示绝对路径。 右边上方是在左侧选中的dll中，实际上被父模块调用的函数。在该示例图中，表示fmaud_mn.dll中调用了MSVCR110.DLL中的_onexit, _unlock等等函数。其中左侧的PI列图例介绍如下： 右下方的是左侧选中的dll中，export function列表，如果导出的是c++ function，可以右键选择undecoreated c++ function，这样显示的人类可读的没有被编译器处理的函数名。，其中左侧的E列图例介绍如下： 我们也可以使用dumpbin命令行工具(linux中使用objdump或readelf)来显示dll中导出的函数。 Dependency walker下载地址 详细使用指南可以参考下载文件夹内的的帮助文件。 关于可执行文件，目标文件的格式，可以参考《程序员的自我修养—链接，装载与库》一书。]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c++中的const总结]]></title>
    <url>%2F2018%2F06%2F27%2Fconst-in-cpp%2F</url>
    <content type="text"><![CDATA[最近在看《c++ primer》，里面涉及到很多关于const相关的一些概念，比如顶层const，底层const，const函数重载等，以下是自己的一些总结，作为备忘。 const变量最简单的一个用法，可以用const来定义一个常量，如 1const int val=1024; val是一个常量，定义之后不能被改变。有点类似与使用宏定义，如 1#define VAL 1024 常量与宏定义的区别在于： 宏定义是被预处理器（preprocessor）处理的，预处理器并不知道类型信息，只是将VAL出现过的地方替换为1024 const定义的变量是被编译器（compiler）处理的，编译器理解变量的定义，类型。 常量指针与指向常量的指针常量指针表示指针本身是一个常量，意味着不能修改该指针。 指向常量的指针表示指针指向的对象是一个常量，该对象不能够被修改。 12345678int i = 0;int j = 1;int *const p = &amp;i; //p指针本身是一个常量，不允许改变p的值，顶层constint const *q = &amp;i; //q指针指向的内容是一个常量，不允许改变*q的值，底层constconst int *q = &amp;i; //等价与int const *q = &amp;i p = &amp;j; //报错，编译无法通过*q = 2; //报错，编译无法通过 可以通过“从右往左”的结合方式，来判断是属于常量指针还是指向常量的指针。 顶层const（top-level const）: 表示该指针本身就是一个const常量 底层const（low-level const）:表示该指针指向的内容是一个const常量 这里还涉及到左值(lvalue)，右值(rvalue)的概念。 左值：能放在赋值语句的左侧，当一个对象被用作左值，用的是对象的身份（在内存中的位置） 右值：不能放在赋值语句的左侧，当一个对象被用作右值，用的是对象的值（内容） const修饰函数返回值看下面一个例子： 12345char *foo()&#123; return "hello, world";&#125;foo()[1] = 'a'; 编译无问题，但是在运行的时候会报错，因为试图修改字符串字面量导致未定义行为。 12345const char *foo()&#123; return "hello, world";&#125;foo()[1] = "a"; //无法通过编译 使用const修饰函数的返回值，可以在编译的时候发现问题。 const修饰函数形参先看下面一个例子： 1234567891011void foo(int val)&#123; val = 1;&#125;void bar(int &amp;val)&#123; val = 1;&#125;int val = 0;foo(val);bar(val); 我们知道调用foo时，会将实参拷贝一份赋值给形参，在函数内部修改val的值并不会影响外部的val。而调用bar时，由于传递的是引用，所以外部的val会受到影响。这里存在一种情况，就是如果实参是一个很大的数据结构，在参数传递时，希望避免不需要的拷贝，我们可以传递引用。但是传递引用可能会改变实参的值。这个时候可以使用const来修饰参数。 123void foo(const big_type &amp;val)&#123; //todo&#125; 使用const可以保证传参时不被拷贝，同时不被函数内部修改。 const成员函数先看例子： 12345678910111213class foo&#123;public: void bar();private: int val;&#125;;void foo::bar()&#123; ++val;&#125;foo ifoo;ifoo.bar(); 例子很简单，调用bar之后会将ifoo对象中的val值加1。如果bar函数本身并不想去修改val的值，这可以将其定义为const成员函数。 123...void bar() const;... 在const成员函数中，无法对对象的数据成员进行修改。 const函数重载函数重载是指函数名称一样，但是函数签名不一样。需要const函数重载的原因是常量对象无法调用非const成员函数。 123456789101112class foo&#123;public: int get_val()&#123; return val; &#125;private: int val = 0;&#125;;foo f1;f1.get_val(); //正确const foo f2;f2.get_val(); //报错，f2只能调用const成员函数 f2无法调用get_val函数，因为f2为常量对象，只能调用const成员函数。 12345678class foo&#123;public: int get_val()&#123; return do_get_val(); &#125; int get_val() const&#123; return do_get_val(); &#125;private: int val = 0; int do_get_val() const &#123; return val; &#125;&#125;; 我们再添加一个get_val的const重载函数。注意，这个额外定义了一个do_get_val函数来返回val值，在这个简单的例子中可能显得很多余，但是如果需要做一些比较复杂的操作，单独成一个函数可以防止代码冗余，同时如果以后修改也比较方便。 参考链接 The C++ ‘const’ Declaration: Why &amp; How 《C++ primer》]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>const</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[What are TCHAR, WCHAR, LPSTR, LPWSTR, LPCTSTR]]></title>
    <url>%2F2018%2F06%2F19%2FWhat-are-TCHAR-WCHAR-LPSTR-LPWSTR-LPCTSTR%2F</url>
    <content type="text"><![CDATA[前段时间看到一篇关于C++中TCHAR，LPSTR的基础知识的文章，写的非常清晰易懂，看完之后觉得解决了以前一直郁结在心中的一些问题。推荐去看下原文：What are TCHAR, WCHAR, LPSTR, LPWSTR, LPCTSTR 。本文简单归纳总结下。 缘由字符可以使用一个byte或2个byte来表示。传统的ANSI字符是由一个byte表示，但是一个byte只能编码256个字符，显然无法满足所有的字符（比如说中文字符等）。所以后来创造出来unicode编码，可以用来表示任何字符。（Unicode编码只是一个统称，UTF-8，UTF-16，UTF-32都属于Unicode编码。） TCHAR宏在visual c++ 编译器中原生支持char(8 bits)和wchar_t(16 bits)类型。在代码中，我们应该使用更通用的类型来表示字符和字符串，已获得更好的移植性和健壮性。TCHAR类型就是这样定义出来的。查看TCHAR.h头文件，可以看到： 12345#ifdef _UNICODEtypedef wchar_t TCHAR;#elsetypedef char TCHAR;#endif 通过条件编译，TCHAR只是wchar_t或char的别名。在visual studio中，当将character set 设置为”Use Unicode Character Set “时，会自动定义_UNICODE这个symbol，所以TCHAR类型就会被翻译成wchar_t。当设置为”Use Multi-Byte Character Set”，TCHAR类型会被翻译为char。 同样的，避免直接使用string的一些库函数如strlen,strcpy,strcat或者wcslen, wcscpy, wcscat，而应该使用tcslen,_tcscpy,_tcscat。原有的函数原型和TCHAR.H头文件中的声明: 123456789101112size_t strlen(const char*);size_t wcslen(const wchar_t* ); //wide character string length//tchar.h中的声明size_t _tcslen(const TCHAR* );#ifdef _UNICODE#define _tcslen wcslen #else#define _tcslen strlen#endif SetWindowTextW vs SetWindowTextA在查阅msdn中，经常可以看到windows的API分为两个版本，其实就是char与wchar_t的区别导致的。 123456// WinUser.H#ifdef UNICODE#define SetWindowText SetWindowTextW#else#define SetWindowText SetWindowTextA#endif // !UNICODE 通过宏定义，将这些区别隐藏起来，客户端只需要直接调用SetWindowText。注意SetWindowText只是一个宏定义，在dll中并不存在真正的SetWindowText函数入口！ 1234567HMODULE hDLLHandle;FARPROC pFuncPtr;hDLLHandle = LoadLibrary(L"user32.dll");pFuncPtr = GetProcAddress(hDLLHandle, "SetWindowText");//pFuncPtr will be null, since there doesn't exist any function with name SetWindowText ! 在user32.dll中导出的是SetWindowTextA和SetWindowTextW，所以去获取SetWindowText`函数的入口地址返回为NULL。 _T宏, _TEXT宏我们经常使用直接使用双引号标记一个string。但是这种方式定义的字符串是ANSI-string，意味着每个字符用一个byte来表示。 1"This is ANSI String. Each letter takes 1 byte." 如果要表示Unicode-string，需要在字符串前加入L前缀。如： 1L"This is Unicode string. Each letter would take 2 bytes, including spaces." 这样表示的所有字符都将使用两个byte来表示。 事实上，在TCHAR.h头文件中定义了两个宏来隐藏硬编码string导致的不同。 12345678// SIMPLIFIED#ifdef _UNICODE #define _T(c) L##c #define TEXT(c) L##c#else #define _T(c) c #define TEXT(c) c#endif ##符号是token pasting operator，用来宏定义参数中作为连接符号，将两个token连接在一起。 12345"ANSI String"; // ANSIL"Unicode String"; // Unicode_T("Either string, depending on compilation"); // ANSI or Unicode// or use TEXT macro, if you need more readability WCHAR, LPSTR, LPWSTR, LPCSTR, LPCWSTR, LPTSTR, LPCTSTR这些宏定义在winnt.h文件中定义。在MSDN中data type中有详细说明。通常来说： LP - Long Pointer C - Const STR - String WSTR - Wide character String T- TCHAR WCHARtypedef wchar_t WCHAR; // wc, 16-bit UNICODE character LPSTRtypedef char *LPSTR; //A pointer to a null-terminated string of 8-bit Windows (ANSI) characters. LPWSTRtypedef wchat_t *LPWSTR; //A pointer to a null-terminated string of 16-bit Unicode characters. LPCSTRtypedef const char *LPCSTR; //A pointer to a constant null-terminated string of 8-bit Windows (ANSI) characters. LPCWSTRtypedef const wchat_t *LPCWSTR; //A pointer to a constant null-terminated string of 16-bit Unicode characters. LPTSTR12345#ifdef UNICODE typedef LPWSTR LPTSTR;#else typedef LPSTR LPTSTR;#endif LPCTSTR12345#ifdef UNICODE typedef LPCWSTR LPCTSTR; #else typedef LPCSTR LPCTSTR;#endif Example经过上面一番讨论，在TCHAR，LPSTR, LPWSTR，LPTSTR的使用过程中，需要注意不要混用，否则容易出现一些“莫名其妙的错误”。如下： 1234567int main()&#123; TCHAR name[] = "Saturn"; int nLen; // Or size_t lLen = strlen(name);&#125; 使用ANSI char set编译通过，但是使用charset为unicode编译出错。 修改后的code： 123TCHAR name[] = _T("Saturn");size_t len;len = _tclen(name); 同时在申请内存的时候也要注意sizeof的类型。 123LPTSTR pBuffer;pBuffer = new TCHAR[128]; //申请一个128字符的空间，实际大小可能是128bytes或者256bytespBuffer = (TCHAR *)malloc(128 *sizeof(TCHAR));]]></content>
      <categories>
        <category>learning</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[操作系统基本概念]]></title>
    <url>%2F2018%2F05%2F25%2Foperating-system-101%2F</url>
    <content type="text"><![CDATA[作为一名非科班程序员，经常在碰到一些操作系统相关的概念时蒙逼。特别是看前段时间看nginx源码的时候，涉及到一些I/O多路复用的代码。碰到问题，碰到不懂的名词，去网上搜索，也就能了解个大概，一些系统性的东西还是很有必要去系统性的学习。于是购入了一本《操作系统：精髓与设计原理》，打算好好读一遍。至于为什么没有买传说中的龙书(深入理解计算机系统)。。。主要是当时不知道有龙书，买完才发现大多数都推崇龙书。 本文姑且作为学习《操作系统》这本书的学习大纲吧。下面先按着书的章节列一下大纲。以后分别出各个主题的博文。坚持！ Operating System lesson 101 操作系统概述 什么是操作系统，作用是什么 基本组成 总线周期，指令周期 进程 什么是进程 在操作系统中如何表示进程 线程，进程区别 并发 互斥(Mutex) 信号量(Semaphone) 管程(Monitor) 管道(Pipes) 自旋锁与互斥锁，busy-waiting与sleep-waiting 原子操作 在c#中同步相关的API 死锁与饥饿 内存管理 为什么要分页，分段 实存(main memory/primary memory) 虚拟内存的设计原因等 I/O管理 同步I/O 异步I/O LINUX下I/O多路复用 文件系统]]></content>
      <categories>
        <category>learning</category>
      </categories>
      <tags>
        <tag>operating system</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈MemoryMappedFile]]></title>
    <url>%2F2018%2F05%2F24%2Funderstand-memory-mapped-file%2F</url>
    <content type="text"><![CDATA[Memory Mapped File (MMF)，内存映射文件。该技术将一个文件或者其他对象映射到进程的地址空间（虚拟内存），实现文件磁盘地址和进程虚拟地址空间中的一段虚拟地址的一一映射关系。 为什么要使用MMF？MMF可以提高I/O性能，特别是对于大文件来说。 因为常规文件操作需要从磁盘到页缓存再到用户主存的两次数据拷贝。而mmap操控文件，只需要从磁盘到用户主存的一次数据拷贝过程。说白了，mmap的关键点是实现了用户空间和内核空间的数据直接交互而省去了空间不同数据不通的繁琐过程。因此mmap效率更高。 这里涉及一些操作系统的一些原理。 进程的概念 内核空间和用户空间 系统调用(system call) 内存管理，分页，分段 有时间整理下。 从网上扒的两张图： .NET中的MemoryMappedFile API根据MSDN的说法，MMF分为两种情况： 持久化的MMF 持久化的MMF是与磁盘上的文件相关，调用MemoryMappedFile.CreateFromFile方法创建的。当最后一个进程完成操作MMF操作之后，操作系统会将修改写回磁盘中。这个方式特别适合操作特别大的文件。 非持久化的MMF 这种MMF不与磁盘上的文件相关联，调用MemoryMappedFile.CreateNew方法创建的。当最后一个进程使用完毕之后，映射到内存的MMF被垃圾回收机制回收。这种方式适合用于多个进程之间通信（IPC）。 .Net framework中MMF的API 创建MMF对象 MemoryMappedFile.CreateFromFile : 创建持久化MMF MemoryMappedFile.CreateNew：创建非持久化MMF 创建View对象 MemoryMappedViewAccessor: ramdom access view，适合与持久化MMF一起使用 MemoryMappedViewStream: sequence access view，适合与非持久MMF或IPC 使用上一步创建的view对象进行读写 Dispose View对象和MMF对象 摘自MSDN: Memory-mapped files can be shared across multiple processes. Processes can map to the same memory-mapped file by using a common name that is assigned by the process that created the file. To work with a memory-mapped file, you must create a view of the entire memory-mapped file or a part of it. You can also create multiple views to the same part of the memory-mapped file, thereby creating concurrent memory. For two views to remain concurrent, they have to be created from the same memory-mapped file. Multiple views may also be necessary if the file is greater than the size of the application’s logical memory space available for memory mapping (2 GB on a 32-bit computer). There are two types of views: stream access view and random access view. Use stream access views for sequential access to a file; this is recommended for non-persisted files and IPC. Random access views are preferred for working with persisted files. Memory-mapped files are accessed through the operating system’s memory manager, so the file is automatically partitioned into a number of pages and accessed as needed. You do not have to handle the memory management yourself. 代码写了一个简单的demo，来实现两个进程间通信。创建一个mmf.data文件，并由该文件创建MMF，Test1启动后检查该文件的某个字节，如果置位则退出。Test2进程启动后将MMF的这个直接置位。 Test1 进程： 1234567891011121314151617181920212223242526272829303132333435363738string filePath = @"mmf.data"; if (!System.IO.File.Exists(filePath)) System.IO.File.Create(filePath).Close(); MemoryMappedFile mmf = MemoryMappedFile.CreateFromFile(filePath, System.IO.FileMode.Create, "mmftest", 1024 * 1024 * 20, MemoryMappedFileAccess.ReadWrite); MemoryMappedViewAccessor viewAccessor = mmf.CreateViewAccessor(0, 0, MemoryMappedFileAccess.ReadWrite); //use Mutex to sync between process, in this case, Test1 and Test2 bool mutexCreated = false; Mutex mutex = new Mutex(true, "mymutex", out mutexCreated); if (mutexCreated) &#123; viewAccessor.Write(0, 1); viewAccessor.Write(2, Process.GetCurrentProcess().Id); &#125; mutex.ReleaseMutex(); Console.WriteLine("wait process test2 to start..."); var flag = 0; while(true) &#123; flag = viewAccessor.ReadByte(1); //read the second byte of mmf, which will be set to 1 when Test2 started. if(flag == 1) &#123; break; &#125; else &#123; System.Threading.Thread.Sleep(1000); &#125; &#125; //dispose viewAccessor.Dispose(); mmf.Dispose(); Test2进程： 123456789101112131415161718192021MemoryMappedFile mmf = MemoryMappedFile.OpenExisting("mmftest", MemoryMappedFileRights.ReadWrite); MemoryMappedViewAccessor viewAccessor = mmf.CreateViewAccessor(0, 0, MemoryMappedFileAccess.ReadWrite); Mutex mutex = Mutex.OpenExisting("mymutex"); mutex.WaitOne(); //require mutex to go on viewAccessor.Write(1, 1); //set the second byte to 1 Console.WriteLine("test2 started"); viewAccessor.Write(6, System.Diagnostics.Process.GetCurrentProcess().Id); mutex.ReleaseMutex(); viewAccessor.Dispose(); mmf.Dispose(); Console.WriteLine("quit myself after 5 seconds..."); System.Threading.Thread.Sleep(5000); 具体看这里：Github windows提供的C++ API其实.net framework中MMF的api只是对C++ api的封装。windows提供的API如下： CreateFileMapping OpenFileMapping MapViewOfFile MapViewOfFileEx UnmapViewOfFile FlushViewOfFile CloseHandle 具体参考 这里 推荐阅读 认真分析mmap：是什么 为什么 怎么用 内存映射文件原理探索 On Memory Mapped Files]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>MMF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c#中使用RegisterNotification来接收特定GUID的设备消息]]></title>
    <url>%2F2018%2F04%2F20%2Fregister-notification-using-device-interface-guid%2F</url>
    <content type="text"><![CDATA[在WIN32 API中提供了一个RegisterNotification函数来接收系统发过来的message。本文介绍一下在csharp中调用该接口来监听特定GUID的设备消息。 在MSDN中，RegisterDeviceNotification的原型为 12345HDEVNOTIFY WINAPI RegisterDeviceNotification( _In_ HANDLE hRecipient, _In_ LPVOID NotificationFilter, _In_ DWORD Flags); 其中NotificationFilter起到消息过滤的作用，也就是说如果我们只想收到特定的消息，可以传递特定的NotificationFilter参数。 NotificationFilter [in] A pointer to a block of data that specifies the type of device for which notifications should be sent. This block always begins with the DEV_BROADCAST_HDR structure. The data following this header is dependent on the value of the dbch_devicetype member, which can be DBT_DEVTYP_DEVICEINTERFACE or DBT_DEVTYP_HANDLE. For more information, see Remarks. 需要注意的是，对于PORT设备，arrival和removal消息会自动广播给顶层窗口。所以如果你的设备不是PORT设备，又想收到arrival和removal消息，需要手动注册消息监听。 The DBT_DEVICEARRIVAL and DBT_DEVICEREMOVECOMPLETE events are automatically broadcast to all top-level windows for port devices. Therefore, it is not necessary to call RegisterDeviceNotification for ports, and the function fails if the dbch_devicetypemember is DBT_DEVTYP_PORT. Volume notifications are also broadcast to top-level windows, so the function fails if dbch_devicetypeis DBT_DEVTYP_VOLUME. OEM-defined devices are not used directly by the system, so the function fails if dbch_devicetype is DBT_DEVTYP_OEM. 关于设备类型，猜测这个应该跟设备的驱动有关，在设备驱动中会指明设备的类型，然后在设备插入到系统中，会有一个枚举过程，这样系统就知道了该设备类型。上述的DBT_DEVICEARRIVAL和DBT_DEVICEREMOVECOMPLETE是WM_DEVICECHANGE消息中的参数。 如果设备类型为DBT_DEVTYP_DEVICEINTERFACE ，查看MSDN可知，该结构体中有一个guid的参数，正是我们需要的通过GUID来判断是否是特定设备的参数。我们在接受windows消息的函数中，判断是否是需要监测的设备即可。 12345678910111213141516171819202122232425262728293031323334353637383940414243public void ProcessWinMessage(int msg, IntPtr wParam, IntPtr lParam) &#123; if (msg == Native.WM_DEVICECHANGE) &#123; switch (wParam.ToInt32()) &#123; case (int)Native.WM_DEVICECHANGE_WPPARAMS.DBT_DEVICEARRIVAL: if (IsDesiredDevice(lParam)) &#123; if (StateChanged != null) &#123; StateChanged(true); &#125; &#125; break; case (int)Native.WM_DEVICECHANGE_WPPARAMS.DBT_DEVICEREMOVECOMPLETE: if (IsDesiredDevice(lParam)) &#123; if (StateChanged != null) &#123; StateChanged(false); &#125; &#125; break; /* * this event will be fired when device been added and removed case Native.DBT_DEVNODES_CHANGED: if (StateChanged != null) &#123; StateChanged(false); &#125; break; * */ default: break; &#125; &#125; &#125; IsDesignedDevice定义如下 123456789101112131415161718192021222324private bool IsDesiredDevice(IntPtr lParam) &#123; var hdr = (Native.DEV_BROADCAST_HDR)Marshal.PtrToStructure(lParam, typeof(Native.DEV_BROADCAST_HDR)); if (hdr.dbcc_devicetype == (uint)_deviceType) &#123; if (_deviceType == Native.DeviceType.DBT_DEVTYP_DEVICEINTERFACE) &#123; Native.DEV_BROADCAST_DEVICEINTERFACE deviceInterface = (Native.DEV_BROADCAST_DEVICEINTERFACE)Marshal.PtrToStructure(lParam, typeof(Native.DEV_BROADCAST_DEVICEINTERFACE)); var str = Encoding.Default.GetString(deviceInterface.dbcc_classguid); var guid = new Guid(deviceInterface.dbcc_classguid); if (guid.ToString() == DEVICE_INTERFACE_GUID) &#123; return true; &#125; &#125; else &#123; //TODO: other device type &#125; &#125; return false; &#125; DEV_BROADCAST_HDR结构体中的三个字段包含在所有设备类型结构体中，所以可以先将WM_DEVICECHANGE中的lParam转化为DEV_BROADCAST_HDR类型，然后根据其dbch_devicetype来转化为特定设备类型结构体类型，如DBT_DEVTYP_DEVICEINTERFACE。 完整的例子请参考：UsbDetector]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>csharp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建nginx调试环境]]></title>
    <url>%2F2018%2F04%2F18%2Fset-up-debugging-envirronment-about-nginx%2F</url>
    <content type="text"><![CDATA[本文简单记录一下搭建nginx源码调试环境的过程。 Windows在windows下使用宇宙最强IDE进行调试，可谓事半功倍。但是nginx的源码并没有提供visual studio的solution工程文件，所幸在github上找到了一个repo，别人已经将其他一些messup的东西都给你搞好了，直接F5就能run起来，简单省事。 Repo地址: https://github.com/tumtumtum/nginx-visualstudio Linux好在微软发布了一个跨平台的VS Code，在linux下可以使用它作为集成开发环境。下面以ubuntu为例。 安装VS Code在官网下载vs code deb包，安装好，再安装C/C++插件 安装GCC/GDB安装GCC编辑器和GDB调试器，我使用的ubuntu desktop 16.04版本自带这些，所以就没有额外安装，如果系统没有带，需要额外安装。 1sudo apt install build-essential -y 下载Nginx源码与依赖库使用git 将repo clone下来。如果没有安装git，需要先安装git。 12cd ~git clone https://github.com/nginx/nginx.git 注意，如果你是在虚拟机使用git，记得使用https方式，而不是ssh方式来下载代码。因为你可能没有为虚拟机生成公钥。 NGINX depends on 3 libraries: PCRE, zlib and OpenSSL: 12345678# PCRE version 4.4 - 8.40wget https://ftp.pcre.org/pub/pcre/pcre-8.40.tar.gz &amp;&amp; tar xzvf pcre-8.40.tar.gz# zlib version 1.1.3 - 1.2.11wget http://www.zlib.net/zlib-1.2.11.tar.gz &amp;&amp; tar xzvf zlib-1.2.11.tar.gz# OpenSSL version 1.0.2 - 1.1.0wget https://www.openssl.org/source/openssl-1.1.0f.tar.gz &amp;&amp; tar xzvf openssl-1.1.0f.tar.gz 编译源码执行configure shell脚本，编译代码。注意，configure脚本在 auto目录下，我们需要拷贝到代码根目录 123456cd nginxcp auto/configure configure./configure --with-pcre="./pcre-8.40" \ --with-zlib="./zlib-1.2.11" \ --with-openssl="./openssl-1.1.0f" \ --with-debug 上述configure指出的参数为依赖库的目录地址。 执行成功之后在根目录生成obj目录和Makefile。正式进行编译。 1make -f Makefile 使用VS Code进行debug使用VS Code 打开nginx 代码根目录，F5开始调试，如果是第一次进行调试，会打开launch.json文件。修改可执行程序目录。 打上断点即可开始调试，效果如下图。 总结由于自己以前没哟在linux下的开发经验，导致搭建调试环境的时候遇到了一些问题。比如makefile是怎么一回事等等。希望自己能好好看看nginx的源码，打算在接下来的博文中出一个nginx源码解读系列。 参考链接Debug Nginx source code]]></content>
      <categories>
        <category>coding</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Fiddler抓包遇到的几个问题]]></title>
    <url>%2F2018%2F04%2F16%2Fpackage-filter-in-fiddler%2F</url>
    <content type="text"><![CDATA[Fiddler是一款免费好用的web debugging工具，可用于网络抓包。下面简单介绍Fiddler再抓包过程中的过滤功能。 Fiddler支持解析HTTPS请求，不过首先需要再Fiddler设置，设置之后会自动安装Fiddler的根证书。 在Filter页面，勾选Use Filters，对filter进行一定的配置，然后点击右上角的Actions 即可以按你配置的规则进行包过滤。 在使用过滤时，自己也踩了不少坑。想当然的以为这个功能不是“显而易见”嘛，然后就发现，咦，我的包哪去了？？下面简单说下遇到的“坑”。 坑1：以为可以自动匹配三级域名例如，如果你想只抓取instapaper.com站点的数据，需要在host下填入：www.instapaper.com，而不是直接填写instapaper.com。在不使用通配符的情况下，Fiddler默认是使用完全匹配的规则来进行过滤的，也就是说在host为instapaper.com的过滤条件下，是无法在结果中显示www.instapaper.com的数据包的。 对于这种情况，可以使用通配符来匹配Host名称，如*.instapaper.com;*instapaper.com。 坑2：以为Chrome的Task Manager中的Process ID作为过滤条件在Fiddler中过滤页面中，可以通过Process ID作为过滤条件，如下图： 在Chrome中的Task Manager中可以看到Tab的进程ID的，如下图： 但是注意了（手动划重点！）：如果想要在Fiddler中使用Client Process ID作为chrome的Tab的数据包的过滤条件的话，这个process ID并不是在task manager中的Tab的process ID，而是Chrome 浏览器的Process ID，即在上图中Browser的Process ID。 打开TroubleShooting如果发现在使用Fiddler的过滤时，无法正确的Filter到想要的包，可以在打开Fiddler的TroubleShooting，查看包时被什么过滤条件给“无视”了。 勾选之后，Fiddler会将所有的包都已“被划掉”的形式显示出来，并在Comments一栏显示被”无视”的原因。 Happy Fiddlering!]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>fiddler</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于使用VMware安装ubuntu的几个注意点]]></title>
    <url>%2F2018%2F04%2F12%2Fnotes-about-installing-ubuntu-using-vmware%2F</url>
    <content type="text"><![CDATA[最近打算读读开源项目的源码，正好一年前买的《深入理解Nginx》这本书还一直落灰，就准备读读Nginx的源码吧。在Github下载源码之后，干看代码不好理解，得像个办法Debug啊，于是乎有了用VMware折腾下Ubuntu，学学如何使用GCC和GDB。这就是本文的由来。 VMware傻瓜式的安装教程就不多说了。不过昨天折腾了一晚上竟然没有安装成功，使用的VMware pro 10.0版本，镜像为Ubuntu Desktop 16.04 LTS版本，一直提示Internal Error。后来换了VMware pro 12.5版本之后顺利安装。 系统安装好之后，安装VMWare tools。VMWare tools可以提供一系列强化功能，比如全屏化，和Host共享文件等。 在VMware菜单中 VM -&gt; Install VMWare tools。VMware tool文件会挂载到CD-ROM中。将压缩包解压出来，打开Terminal sudo ./vmware-install.pl 执行安装脚本即可。安装好之后重启一下。 无法全屏问题View -&gt; Autosize -&gt; AutoGuest勾选之后，Logout一下即可 共享文件夹在VMware中编辑虚拟机配置，在Option-&gt;Shared Folder选择宿主中要共享的文件夹。然后即可再Ubuntu的/mnt/hgfs 路径下看到共享的文件夹。 科学上网问题有的时候还是需要再虚拟机中共享宿主的科学上网网络的。我们需要为虚拟机配置一个代理。具体参考此文章。]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有关与最近的生活]]></title>
    <url>%2F2018%2F04%2F10%2Frecent-review-2018-4%2F</url>
    <content type="text"><![CDATA[一个月前，自己立了好多flag。这一个月以来，为了不打自己脸，行动了起来。 关于博客。 现在坚持一个礼拜出两篇博客。目前为止，坚持的还算好。需要继续坚持。 关于跑步。 鉴于夏天是胖子的死期，没办法，最近开始夜跑了。准备隔一天跑个5公里。不过今天偷懒了。要坚持。 关于办理护照。 上周去办理了居住证，办理下来需要一段时间，这个先等等吧。 关于阅读。 一个月前买了两本书，一本《货币金融学》，一本《GEB》。也许是货币金融学太教科书了，当然这本书本身就是作为经济学教材，搬家之后没看了。可以挑选一些敢兴趣的章节看下。《GEB》上周末看了一点。要坚持。 关于工作。 最近工作比以前忙了起来，但是却不是我要的状态。关于在今年准备搞一搞开源项目，目前的打算是与博客中的技术分享结合起来，充实github。还有一点就是看一些优质的开源项目代码。前端时间看了一下MvvmLight的源码，不过就代码量来说，这个项目还算是少的。今天准备开始看Nginx的源码。要坚持。 2018/04/10 于家中]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[个人windows实用工具推荐]]></title>
    <url>%2F2018%2F04%2F05%2Fuseful-tools-for-windows%2F</url>
    <content type="text"><![CDATA[今天清明节，一个人呆在家里没啥事，就想着整理整理博客，写个个人认为比较实用的小工具推荐吧。这些工具也是自己用过一段时间，觉得能提高效率，小而美的。 StarDock Fences Listary Internet Download Manager Cmder Clover Snipaste StarDock Fences 关键词：桌面管理 StarDock Fences可谓是一款桌面管理的神器了。曾几何时，桌面一大堆乱而杂的图片，密密麻麻。而有了Fences，自动给图标分类，整齐多了。盗用Fences官网的一张图。桌面从此告别”脏乱差”。 Fences是一个收费软件，售价9.99刀，还是很值的。 Listary 关键词: 文件搜索，app启动器 Listary是我平时使用的频率最高的一款windows工具了。定位文件或是作为高效率的app启动器，用来来得心应手而且基础版软件免费。 Listary使用操作也很简单，安装完毕之后，会有一个简单的tutorial，基本过完几步之后，就基本掌握了Listary的使用方法。下面简单介绍几个使用场景。 app启动器 双击ctrl键打开Listary搜索框，可以搜索文件或者程序，比如输入QQ 文件检索 双击ctrl键呼出检索框，输入文件名之后按下空格键，表示搜索文件/文件夹 文件定位 Listary与windows资源管理器深度整合，可以快速定位到要找到的文件。window本身是支持首字母的快速定位的。Listary可以支持文件名精确定位，模糊定位等。如下图，在资源管理器中直接敲击键盘，输入work，listary自动在右下方列出相关的文件夹 对于右边搜索的结果，你可以继续使用键盘的箭头键(window arrow key)导航，可以对文件/文件夹进行操作。 这个功能实在太方便了，可以在不需要利用鼠标直接通过键盘定位文件，提高效率。 文件夹定位 有的时候需要上传或者保存东西的时候，一般程序会pop一个Folder Browse Dialog出来，如果你的文件隐藏路径比较深的情况下，需要一层一层的找，有了Listary，你可以在先使用windows 资源管理器定位目录，按下ctrl + G，然后回到Dialog，点击一下，Dialog的目录自动定位到你刚才的路径。 Internet Download Manager 关键词：下载利器 Internet Download Manager ，简称IDM，可以自动开启多线程下载，基本能跑满带宽。配合Chrome插件–Internet download module（安装IDM的时候自动会安装插件），可以自动调用IDM进行下载。 虽然UI有些“复古”，但是确实下载速度快的飞起。美中不足的是，IDM是收费软件，license要25刀一年。 Cmder 关键词：统一命令行工具 Cmder 是一款终端命令行工具，界面美观，配色舒服。有了Cmder，你可以抛弃其他的命令行工具了，git bash， cmd， powershell…… Cmder支持多Tab页面，方便用户打开和切换console。 Clover 关键词：多标签 Clover 是一款令windows 资源管理器支持多标签的工具。值得一提的是，该软件是有国人开发的免费工具。Clover在让资源管理器支持多Tab的同时，在工具栏加入了书签功能，可以将经常访问的目录收藏起来，类似浏览器的书签功能。 Clover的易用性和方便性在双屏的情况下体现的淋漓尽致，没使用Clover之前，在双显示器的情况下，我经常要早资源管理器在A屏还是B屏，有了clover之后，每次开机将管理器放在左边屏，下次要切屏方便多了。 美中不足的是Clover在windows 10上经常会crash。而且在Window 10中微软会带来原生的多Tab支持—Microsoft Set。期待微软给力。 支持多Tab的我了解到的还有一款应用，StarDock Groupy，这个不仅支持资源管理器，貌似其他应该也可以支持多标签，鉴于自己没有体验锅，暂不发表评论。 Snipaste 关键词：截图神器 Snipaste 是一款强大的截图软件，小巧简约，典型的小而美。以前截图工具一直使用系统自带的Snipping Tool，Snipaste使用体验不知道甩Snipping Tool几条街。 F1快捷键直接呼出截图界面，智能识别边框，而且带简单的编辑和标注功能，箭头，马赛克，应有尽有。还可以拾取颜色，是我用过的最好用的截图工具。而且免费哦。 以上就是个人使用中遇到的不可多得的小工具，完。]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[spy++简单教程]]></title>
    <url>%2F2018%2F04%2F05%2Fsimple-spy-tutorial%2F</url>
    <content type="text"><![CDATA[Spy++是一款随着Visual studio自带的工具，可以用来分析windows上的应用程序的windows 消息。Windows上的GUI程序都是靠windows message来响应用户，来与用户交互。 Spy++有两个版本，32bit版本(spyxx.exe)和64bit版本(spyxx_amd64.exe)，分别用来spy对应bit的进程。所以如果你在使用spy++的时候发现无法收到消息，可以试着使用另外版本。 在这里同时推荐一款windows小而美的软件：Listary。双击left control两次即可呼出检索框。 在这里以spyxx 32bit版本为例。启动spyxx.exe。 Spy++可以查看window，Process和Thread的状态。以查看Window为例。contrl + F呼出Find window窗口。然后用鼠标拖拽中间的圆形标志到你要spy的windows上，即可在window tree上找到。然后右键message可以看到该窗体的消息。 默认是会将该window收到的所有的消息都显示在spy++界面中，可以通过filter只显示你想要显示的消息。点击菜单栏中的Logging Option按钮。勾选需要监听的window message，比如Mouse message Window message的种类可以参考MSDN：Message Types。]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[visual studio中版本号自动管理]]></title>
    <url>%2F2018%2F04%2F04%2Fautomatic-versionning-in-visual-studio%2F</url>
    <content type="text"><![CDATA[在开发中，对版本号进行管理是一个很重要的事情。特别在visual studio中有多个project的时候，每一个project都有自己的version。下面介绍三种方式来实现版本号自动化管理。 前言先简单介绍下在visual studio中的三个version。 Assembly Version .net CLR加载DLL的时候使用的版本号，如果加载强签名的dll，需要指定dll的版本号，就是这个Assembly Version Assembly File Version 在windows 资源管理器中显示的文件版本号 Assembly Info Version 在windows 资源管理器中显示的产品版本号 利用VS自带的版本号递增在project的AssemblyInfo.cs文件中，可以使用通配符来使得版本号自动变化。 123456789101112// Version information for an assembly consists of the following four values://// Major Version// Minor Version // Build Number// Revision//// You can specify all the values or you can default the Build and Revision Numbers // by using the '*' as shown below:// [assembly: AssemblyVersion("1.0.*")][assembly: AssemblyVersion("1.0.*")]//[assembly: AssemblyFileVersion("1.0.0.0")] 注释掉该行 这样每次成功build之后，assembly version ，File version都会变化，其中build number和revision是以某个时间节点为起点，到build时计算出来的值。 在vs中，每个project都有一个AssemblyInfo.cs文件，在多个project之间，可以通过共享文件来共享同一个版本号。 首先将所有project的AssemblyInfo.cs文件中的AssemblyVersion和AssemblyFileVersion注释掉 在你的启动工程中创建一个SharedInfo.cs，加入以下内容: 123using System.Reflection;[assembly: AssemblyVersion("1.0.*")] 在其他project中将上一步创建的文件通过add as link方式add进来。 这样所有project都会共享SharedInfo文件。 使用T4模板生成版本号在AssemblyVersion属性中使用通配符生成的版本号并不是那么“友好”。有的时候仅仅是想让版本号加一而已。使用T4(Text Template Transformation Toolkit)模板自动生成代码可以做到这一点。 In Visual Studio, a T4 text template is a mixture of text blocks and control logic that can generate a text file. T4 is used by developers as part of an application or tool framework to automate the creation of text files with a variety of parameters. These text files can ultimately be any text format, such as code (for example C#), XML, HTML or XAML. 在vs中创建一个SharedInfo.tt文件(new -&gt;item -&gt; text template)，加入以下内容: 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;#@ template debug="false" hostspecific="true" language="C#" #&gt;&lt;#@ import namespace="System.IO" #&gt;&lt;#@ output extension=".cs" #&gt;&lt;# int major = 0; int minor = 0; int build = 0; int revision = 0; try &#123; using(var f = File.OpenText(Host.ResolvePath("SharedInfo.cs"))) &#123; string maj = f.ReadLine().Replace("//",""); string min = f.ReadLine().Replace("//",""); string b = f.ReadLine().Replace("//",""); string r = f.ReadLine().Replace("//",""); major = int.Parse(maj); minor = int.Parse(min); build = int.Parse(b); revision = int.Parse(r) + 1; &#125; &#125; catch &#123; major = 1; minor = 0; build = 0; revision = 0; &#125; #&gt; //&lt;#= major #&gt; //&lt;#= minor #&gt; //&lt;#= build #&gt; //&lt;#= revision #&gt; // // This code was generated by a tool. Any changes made manually will be lost // the next time this code is regenerated. // using System.Reflection; [assembly: AssemblyFileVersion("&lt;#= major #&gt;.&lt;#= minor #&gt;.&lt;#= build #&gt;.&lt;#= revision #&gt;")] 保存之后，会在SharedInfo.tt文件下面生成SharedInfo.cs文件。然后将该文件通过add as link 加入到其他project中。这样每次要生成一个新的版本号之后，需要在SharedInfo.tt文件的右键菜单中Run Custom tool，重新生成SharedInfo.cs文件。 当然也可以在使用pre-build事件，自动化这一过程。在project的pre-build事件中加入以下内容： 123set textTemplatingPath="%CommonProgramFiles(x86)%\Microsoft Shared\TextTemplating\$(VisualStudioVersion)\texttransform.exe"if %textTemplatingPath%=="\Microsoft Shared\TextTemplating\$(VisualStudioVersion)\texttransform.exe" set textTemplatingPath="%CommonProgramFiles%\Microsoft Shared\TextTemplating\$(VisualStudioVersion)\texttransform.exe"%textTemplatingPath% "$(ProjectDir)SharedInfo.tt" 使用VS插件Automatic Versions 1最简单也是最强大的莫过于直接使用Automatic Versions插件了。该VS插件提供了多种策略来实现版本号自动递增，可以支持整个solution和单个project的versioning继承。即可以为整个solution设置versionning的规则，也可以为单个project设置不继承solution的规则，自己按自己的规则。 安装好之后，在vs菜单栏tools -&gt; automatic versions settings，打开设置面板。 设置选项参考官方的文档： CustomSystem.Version Options Major, Minor, Build, andRevision can be individually configured to the incrementation type desired: In these examples, we usethe date July 29th 2024, 1:30pm None - Do not increment this value. Increment (Always) - Always Increments this value by 1* Increment w/AutoReset - Increments this value by 1, unless a more significant number increases, in which case it will reset to 0. On Demand (Build New Version) - Increment this value by 1 only when a build is initiated using the Build New Version command (on the context menu of each project). You can set this value on both the Major and the Minor numbers and use the context menu (see usage below) to control which one is incremented. On Demand w/Reset (Obsolete) - Use Increment w/AutoReset instead. This feature may not be supported in future versions of the product. (Legacy functionality: Increment this value by 1 only when a build is initiated using the Build New Version command (on the context menu of each project). Resets all Increment sub-values.) Day Of Year (ddd) - Set this value to DateTime.UtcNow.DayOfYear: 211. Day (dd) - Set this value to the current day of the month: 29. Month (MM) - Set this value to the current month of the year: 7. Year (yyyy) - Set this value to the current year: 2024. Short Year (yy) - Set this value to 2 digit current year: 24. Date (yyddd) - Set this value to the current date (yyddd format - where ddd is the day of year)**: 24211. Date (MMdd) - Set this value to the current date (MMdd) where MM is a 2-digit month and dd is a 2-digit day of month: 0729. UTC Time (HHmm) - Set this value to the current time (HHmm format): 1330. Delta Days (since 1/1/2000) - Set this value to the number of days that have occurred since January 1, 2000: 8976. UTC Seconds Since Midnight/2 - If you are using a custom unique time based stamp for your version number, this gives you the most granularity to a single day. The number has to be divided by 2 so it doesn’t overflow the max value. *There is an exception to this rule whenIncrement On Demand w/Reset (Obsolete) is used it will reset this value if youchoose Build New Version **This value will overflow in 2065. Since itis very useful and there are limited alternatives that work as well as thisone, we are continuing to use it and even recommend using it, however, we maychange it’s functionality at some point such that it does not overflow in 2065.The overflow itself is not a security issue, however. It will only cause abuild error. CustomSemantic Version (BETA/PRO) Semantic Versioning istypically used for ‘packaging’ the results of a build for use in a manifestfile or as a ‘published package’ of your product. Therefore Semantic Versioningleverages the other version attributes by letting you choose which of those youwant to use for your Major/Minor numbers, and independently does it’s ownincrementation on the Patch and Pre-Release numbers. Major/Minor settings - Set to use AssemblyVersion, AssemblyFileVersion, or Set Manually. To set manually, open the AssemblyInfo file (for Full .Net) or the project properties (for .Net Standard/Core) and manually set the major and minor values. Patch settings - This will increment the Patch number based on the incrementation settings. Increment Once is available for when you switch to a ‘pre-release’ version of the product, you will typically want the Patch number to Increment Once for the start of your pre-release cycle. After incrementing once, this setting will automatically update to None (whereby Pre-Release will be doing the incrementation). Pre-Release (optional) - Set to alpha, beta, preview, rc, or N/A (release). If you set a pre-release, then Patch will automatically change to “increment once” for you and the prerelease will increment instead starting with alpha, then alpha-01, alpha-02, etc. When you set this to (N/A release) then Patch will be automatically changed to Increment w/AutoReset for you. 注意一点： OnDemand 表示在工程的右键菜单中手动选择build 参考链接 https://jonthysell.com/2017/01/10/automatically-generating-version-numbers-in-visual-studio/ https://marketplace.visualstudio.com/items?itemName=PrecisionInfinity.AutomaticVersions https://weblogs.asp.net/kon/assembly-file-version-auto-increment-magic https://docs.microsoft.com/en-us/visualstudio/modeling/code-generation-and-t4-text-templates]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>visual studio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[visual studio:应用程序处于中断模式]]></title>
    <url>%2F2018%2F04%2F04%2Fvisual-studio-is-in-break-mode%2F</url>
    <content type="text"><![CDATA[在使用Visual studio 2017 这一宇宙最强IDE一段时间，发现偶尔碰到提示：the application is in break mode。 由于这个时候visual studio没有给出具体的stack trace信息，不好debug。我们可以在修改visual studio的exception setting，让exception都thrown出来，便于debug。 在exception setting中勾选所有的设定。 设置之后，visual studio会在exception的地方停下，给出异常信息。]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>visual studio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[黑群晖的安装以及设置外网访问]]></title>
    <url>%2F2018%2F03%2F31%2Finstall-synology-on-pc%2F</url>
    <content type="text"><![CDATA[最近把家里闲置的一台笔记本装了群晖，并且利用上次再良心云买的域名，添加了外网访问。此博文为记。 安装群晖总体来说用笔记本来安装黑群晖还是比较简单的。具体参考张大妈上的这篇文章。 需要注意的是，本来笔记本是ssd和机械硬盘组的双硬盘，安装好群晖之后，发现只能识别到ssd，无法识别机械硬盘。想着ssd用来做硬盘有点浪费，所以我将笔记本的ssd拆下来，又重新安装了一遍，这才识别了机械硬盘。 安装完之后出现登录界面还是有点小激动的。 建立外网访问安装完之后，建立外网访问。建立外网访问需要具备几个条件。 拥有外网IP，家里办的联通的宽带，是有公网IP的 拥有自有域名，这个可以购买，我是再腾讯云买的域名 DNSPOD账号，免费注册，现在已经被腾讯收购了。腾讯云买的域名默认DNS服务器就是DNSPOD免费服务器。 添加DNS解析记录登录到DNSPOD，再域名下添加一条解析记录。主机记录填上你想要的二级域名，记录值可以随便填一个IP地址(后面会通过脚本来自动修改该值) 然后需要获取这条记录的ID值，按F12打开浏览器开发者工具，选择记录前面的勾选框，然后再html源码中找到value值，即为这条记录的ID值，后续我们需要通过这个ID值来定期修改IP地址。 创建API Token再DNSPOD左侧面板中选择安全设置，然后创建API Token，得到API Token ID和Token值。 建立计划任务将安装好群晖的笔记本通过千兆有线连接到路由器中。然后再主控机中打开Synology Assist。查找局域网内的群晖，可以看到DHCP后的IP地址。 打开浏览器输入URL: 10.0.0.10:5000，以默认的admin用户登陆。然后再控制面板中找到计划任务。新建计划任务，再用户自定义脚本中填入以下脚本（注意替换），并且设置15分钟执行一次： 1curl -X POST https://dnsapi.cn/Record.Ddns -d 'login_token=ApiToken数字ID,ApiToken密钥&amp;format=json&amp;domain=你的域名&amp;record_id=记录的ID&amp;record_line=默认&amp;sub_domain=域名的前缀 这个教程原理就是通过发POST请求给DNSPOD服务器，然后DNSPOD服务器就能知道你的公网地址，同时将得到的公网地址写入到我们新增的域名解析记录中，从而可以动态刷新IP地址。 现在我们先手动执行以下上面的脚本，linux可以直接再终端执行，window再git bash上执行。如果如果返回执行成功，说明已经成功将公网IP推送域名解析中。 设置路由器转发手动ping一下域名，看是否能得到你的公网ip。如果可以ping通，那么增加的域名解析记录已经成功。从修改DNS解析记录到该记录同步到DNS服务器，需要一定的同步时间。 再浏览器中登陆群晖，再控制面板中找到外部访问，路由器设置。群晖会启动检测你的路由器型号，并且验证是否具有端口转发的功能。我的路由器是网件的R6400，虽然不在检测中支持的列表里，但是可以兼容。 ![set_up_router][set_up_router.png] 勾选要转发的端口，这个可以按需勾选，一般至少打开WEB UI 管理也即5000和5001端口。勾选之后，点击保存，注意这步就覆盖路由器中现有的端口映射规则。点击测试连接。如果配置成功，可以看到测试OK。 至此，已大功告成。再浏览器中输入域名加端口看看能否访问。没有用过群晖官方的QuickConnect，但是一些朋友使用公网IP来访问之后，都说速度比官方的快不少。通过公网IP在群晖上下载，速度取决于宽带的上行带宽。 安全设置由于现在已经将群晖暴露在公网之下，所以采取一定的安全措施必不可少。下面简单说一些安全的方法。 https化默认是直接使用5000端口进行访问的，这种方式是直接使用HTTP连接来访问。在现在这个全站HTTPS化的时代，实现HTTPS访问必不可少。 首先去申请SSL证书，有很多的厂商都提供免费的DV SSL证书，如Let’s Encrypt，TrustAsia等。腾讯云与赛门铁克推出了免费的TrustAsia SSL证书。于是自然我去腾讯云申请SSL证书。同一域名下可以免费申请20个DV SSL证书，而且证书签发很快，从申请到审核通过几分钟就好了。 审核通过之后，将证书下载下来解压缩。进入到群晖中的控制面板，安全，证书导入。我们使用Apache目录下的证书。如下图： 导入之后 然后再浏览器中使用域名打开。可以看到成功https访问。 关闭SSH连接安装好的群晖默认是没有启用SSH连接的。如果你不使用ssh来登陆的话，建议关闭SSH登陆。 设置独立用户，admin用户二部验证给admin用户加上二步验证。这样如果使用admin用户登陆，需要输入验证码，提升安全性。同时设置用户组，严格管理每个用户的目录访问权限和读写权限。 初玩nas，必然还有很多的东西等我去发掘。nas作为一个私有云盘，可以方便的进行数据备份，数据管理等，希望以后好好利用。 参考链接 ssl证书 nas 安装 nas外网访问]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>nas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo添加第三方功能支持]]></title>
    <url>%2F2018%2F03%2F20%2Fhexo-add-more-setting%2F</url>
    <content type="text"><![CDATA[hexo添加第三方插件，可以实现很多功能，如seo优化，生成feed等。 SEO优化seo优化简单的说如何让搜索引擎收录你的网站。参考此博文。 需注意一点的是，因为网站未备案的原因，直接使用http无法访问自己的博客。而hexo中自动生成的sitemap都是默认以http来访问，导致提交sitemap到谷歌的时候，会无法抓取。所以我手动修改了一下sitemap的模板文件。 hexo-generator-sitemap 在node_modules\hexo-generator-sitemap\sitemap.xml中，手动加入https:// 1&lt;loc&gt;https://&#123;&#123; post.permalink | uriencode &#125;&#125;&lt;/loc&gt; hexo-generator-baidu-sitemap 在node_modules\hexo-generator-baidu-sitemap\baidusitemap.ejs中，手动加入https:// 1&lt;loc&gt;https://&lt;%- encodeURI(url + post.path) %&gt;&lt;/loc&gt; 添加feed安装feed插件 1npm install hexo-generator-feed --save 在站点_config.yml文件中添加 12345678feed: type: atom path: atom.xml limit: 20 hub: content: true content_limit: 140 content_limit_delim: ' ' 添加评论系统Valine是一款极简的评论系统，基于leancloud。具体参考此博文。 参考链接 SEO Feed github]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客迁移到腾讯云]]></title>
    <url>%2F2018%2F03%2F19%2Fmigration-to-tecent-cvm%2F</url>
    <content type="text"><![CDATA[终于受不了Github的龟速，速度慢就罢了，在联通的宽带下还经常timeout。虽然腾讯云的带宽也就1Mbps，好歹也能跑满，速度稳定在120多kb。于是在周末把博客完全迁移到了腾讯云上。 流程 先明确一下它的运作流程：本地有个 hexo 程序，里面包含了 public 文件夹，sources 文件夹，hexo 将 sources 里的*.md文件渲染为静态的 html 文件放到 public 下，然后我们用git推送到服务器的repository，服务器用git hooks把仓库里的文件同步到网站根目录，而 nginx 的作用就是反向代理。 服务器环境：安装git、nginx、创建git用户 本地搭建Hexo环境：安装NodeJs、hexo-cli，生成本地静态网站 使用git自动化部署发布博客 安装git，建立git用户12yum install gitadduser git 安装nginx123yum install nginxsystemctl start nginxsystemctl enable nginx.service #设置为开机启动 修改nginx的配置文件： 1vim /etc/nginx/nginx.conf server模块配置如下（包含https的配置） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455server &#123; listen 80 default_server; listen [::]:80 default_server; server_name your_ip bygeek.cn www.bygeek.cn; #root /usr/share/nginx/html; root /usr/blog/www; return 301 https://$host$request_uri; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125;# Settings for a TLS enabled server.# server &#123; listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; server_name your_ip www.bygeek.cn bygeek.cn; ssl on; # root /usr/blog/www; ssl_certificate "/etc/nginx/ssl_folder/1_bygeek.cn_bundle.crt"; ssl_certificate_key "/etc/nginx/ssl_folder/2_bygeek.cn.key"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; root /usr/blog/www; index index.html index.htm; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125; 更改权限 123cd /usr/blogmkdir wwwchmod -R 777 /usr/blog/www #更改文件夹及子文件夹权限 将/usr/blog/www作为网站的根目录。 服务器新建仓库在服务器上新建裸仓库blog.git. 12345su gitcd ~ #切换到git用户的根目录 /home/gitmkdir blog.gitcd blog.gitgit init --bare 利用git hooks，当blog.git收到push之后，自动同步到站点中。 1vim ~/blog.git/hooks/post-receive 写入以下内容： 12#!/bin/shgit --work-tree=/usr/blog/www --git-dir=/home/git/blog.git checkout -f 赋予可执行权限： 1chmod +x ~/blog.git/hooks/post-receive 设置公钥登录在服务器端创建.ssh文件夹记忆authorized_keys文件。 1234su gitcd ~mkdir .ssh &amp;&amp; chmod 700 .sshtouch .ssh/authorized_keys &amp;&amp; chmod 600 .ssh/authorized_keys 在本地使用puttygen加载你的private key获取public key，复制之后粘贴到authrozied_keys文件中。如果使用的git bash，git bash使用ssh目录在C:\Users\user_name\.ssh中，id_rsa即为私钥文件。 1vim ~/.ssh/authorized_keys 保存之后测试下是否能登录 1ssh git@your_server_ip -p your_ssh_port 本地设置hexo由于以前设置过hexo环境，本来博客的源文件是托管在github上的，这次索性将源文件也迁移到腾讯云上。 在git bash中，从服务器clone到本地 12cd /d/bloggit clone ssh://git@your_server_ip:your_ssh_port/home/git/blog.git 注意：如果你的ssh端口不是默认的22端口，这需要指出ssh的端口号。blog.git 这个repo的地址是在上一步新建的目录。 新建一个hexo分支，用于保存markdown等博客源文件，master分支用于保存渲染好的html页面。 123git branch hexo #新建hexo分支git checkout hexo #切换到hexo分支git push origin hexo #push到remote，即remote也新建了一个hexo分支 在git bash中 1234567cd /d/blognpm install hexo -gmkdir blog_sourcecd blog_sourcehexo initnpm installnpm install hexo-deployer-git 本地的hexo环境搭建完毕，将以前的博客源文件覆盖过来。编辑站点_config.yml，在deploy中修改为腾讯云的repo地址 1234deploy: type: git repo: ssh://git@ip:port/home/git/blog.git branch: master 安装next theme 1git clone --branch v5.1.4 https://github.com/iissnan/hexo-theme-next themes/next 将以前next theme的_config.yml文件覆盖。 由于使用了七牛云作为图床，安装七牛云插件 1npm install hexo-qiniu-sync --save next theme使用了第三方的local search： 1npm install hexo-generator-searchdb --save 最后，将文件push到服务器上 1git push origin hexo 参考链接 腾讯云的1001种玩法 git-scm 将Hexo博客部署到云主机]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[网站备案]]></title>
    <url>%2F2018%2F03%2F13%2F%E7%BD%91%E7%AB%99%E5%A4%87%E6%A1%88%2F</url>
    <content type="text"><![CDATA[Update2: 2018/5/15 今天上午收到工信部的邮件，审核已经通过。但是还需要再公安系统中备案。。。晚上又提交了一大推信息，等审核吧。 Update: 直接使用https协议是可以访问的。估计腾讯云只拦截未备案的http站点，现在问题就是http没办法自动跳转https。等居住证办下来再说把。 今天打开博客，发现无法访问了，腾讯云提示需要网站备案。打开备案网址，每个省的备案规则还不一样，江苏省备案要求非省户籍必须提供居住证明。证明链如下： 网站备案 -&gt; 居住证明 -&gt; 房屋租赁备案证明 -&gt; 房产证 好吧，看来居住证明是非办理不可了。 现在域名无法解析，暂时将nginx监听端口修改为8080，只能通过ip访问。]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos 初始化简单配置]]></title>
    <url>%2F2018%2F03%2F12%2Fcentos-%E5%88%9D%E5%A7%8B%E5%8C%96%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[centos简单折腾记录。 新建用户 使用root用户登录到server端。 新建用户账号：adduser robert 设置密码: passwd robert 增加用户到sudoer中root用户拥有系统的最高权限，但是为了系统的安全性，一般不会直接使用root用户。相反我们会使用sudo命令来暂时提高当前用户的权限。下一步我们将新建的用户robert加入到sudoer中。在centos中，在wheel用户组的用户具有sudo权限。 1usermod -aG wheel robert 注：在debian系统中sudoer所在的用户组是sudo。usermod -aG sudo robert 测试是否成功。 12su robertsudo ls -al /root 如果还是提示用户不再sudoer中。那么还需要修改/etc/sudoers文件。sudo命令是由该文件来配置哪个用户及用户组可以执行。注意该文件不要随便修改，因为错误的语法错误可能会导致用户无法通过sudo来提升权限。需要通过visudo命令来修改。visudo命令默认使用vi来打开文件，但是在保存文件的时候会检查配置是否有语法错误。 1visudo -f /etc/sudoers 找到wheel（可以使用vi中进行搜索字符）。如下面所示，去掉前面的#号，取消该行注释。%wheel表示的是wheel 用户组。参考链接 123...%wheel ALL=(ALL) ALL... 然后再测试是否切换到创建的用户，是否能够执行sudo命令。 修改SSH默认端口ssh是一个安全的加密协议，用于主机之间的通信。为了加强系统的安全性，修改默认的ssh的22端口。 修改ssh_config文件中的默认端口号 1vim /etc/ssh/sshd_config 找到#Port 22这一行，去掉#，取消注释，修改为你想要该的端口号，如10086。 按需修改修改防火墙规则和更新selinux规则。 centos7执行： 12firewall-cmd --add-port 10086firewall-cmd --add-port 2345/tcp --permanent centos6执行： 1iptables -I INPUT -p tcp --dport 10086 -j ACCEPT 同时按需修改selinux: 1semanage port -a -t ssh_port_t -p tcp 10086 重启ssh服务: 1systemctl restart sshd.service 注：在centos 6以下中可能无法使用systemctl，需使用service ssh restart. 测试ssh链接： 1ssh robert@ip_address -p 10086 配置公钥登录在windows上一般使用putty或xshell来作为ssh客户端。这里以xshell为例。在xshell中Tools-&gt;User key Manager-&gt;Generate生成公钥/私钥对。将私钥保存好，同时将公钥复制到剪贴板。 使用xshell ssh连接到远程主机，在当前用户HOME目录下执行如下命令： 123cd ~mkdir .ssh &amp;&amp; chmod 700 .sshtouch .ssh/authorized_keys &amp;&amp; chmod 600 .ssh/authorized_keys ssh服务默认使用用户.ssh目录下的authorized_keys中的公钥来进行验证。将上一部复制的公钥复制到authorized_keys文件中。 如果想配置root也使用公钥登录，需要在root目录下也建立.ssh文件夹和authorized_keys文件。注意，需要更改文件夹和文件权限！ 禁止root远程密码登录修改ssd的配置文件 1sudo vim /etc/ssh/sshd_config 将#PermitRootLogin yes修改为PermitRootLogin without-password。注意是修改为without-password，如果直接修改为no，则root公钥也不能登录了。 参考链接 centos wiki add sudoer add sudoer 2]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用beyond compare自动生成patch包]]></title>
    <url>%2F2018%2F03%2F12%2F%E5%88%A9%E7%94%A8beyond-compare%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90patch%E5%8C%85%2F</url>
    <content type="text"><![CDATA[前言beyond compare对于程序员来说，可谓是一个不可多得的文件比较工具，试用过winMerge以及一些自带的diff工具之后，还是发现beyond compare界面最为友好，功能也比其他工具强大。 最近有一个需求是能否在每次release之后，可以比较方便的产生各个版本的升级patch包。持续集成的工具(类似jenkins，Travis CI)我没有了解过，不知道是否能有这个功能。但是仅仅对于这个小需求来说，利用beyond compare工具就可以做到。 利用BC GUI生成patch包 选中需要对比的两个文件夹，右键选择compare 在BC中选择diff，只显示有变化的文件 在BC菜单栏中Edit -&gt; Expand all, Edit -&gt; select all files 在选中的文件中右击，选择copy to folder 在打开的对话框中，选择要生成patch的文件(left/right side)，选择folder structure为base patch包生成完毕。 编写脚本自动化BC其实是支持脚本运行的，可移步与此。同时安装完BC之后，会在安装目录有CHM的帮助文件，具体的一些语法可参考该文件。 编写脚本，将脚本保存为bc_auto_script.txt 123456789log verbose "c:\bclog.txt" #表示将脚本的log记录在bclog.txt中load "d:\testv1.0" "d:\testv2.0" #加载需要比较的文件夹filter "-*.log;-lib\" #利用beyong compare中的filter：除去*.log文件以及lib子文件夹，即这些不参与比较expand all #展开文件，这个命令与beyond compare中的UI的expand all是对应的select right.diff.files right.orphan.files #只选取有差异的文件copyto right path:base "D:\diff.zip" #将有差异的文件拷贝到d:\diff中，注意copyto命令的参数 ##right: 对应上述load命令中的参数，即testv2.0，意思是将testv2.0的差异文件copy出来 ##path:base: 指保留目录结构 ##d:\diff: 输出目录，也可以指明为zip文件：如"d:\diff.zip"，这样最后会生成一个zip包 cmd下执行：&quot;C:\Program Files (x86)\Beyond Compare 4\Bcompare.exe&quot; /silent &quot;@D:\bc_auto_script.txt&quot;, BC安装路径， silent参数表示不启动GUI， 后面是在第一部中编写的脚本文件。 diff.zip即为生成的patch文件。如果要实现批量的生成patch包，可以编写一个批处理脚本。可参考这里。 参考链接 beyond compare sample script]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TCP报头的标志位]]></title>
    <url>%2F2018%2F03%2F05%2FTCP%E6%8A%A5%E5%A4%B4%E7%9A%84%E6%A0%87%E5%BF%97%E4%BD%8D%2F</url>
    <content type="text"><![CDATA[上篇文章简单的摘录了TCP建立连接和释放连接的过程。TCP报头中的标志位于操控TCP的状态机。下面简单说说TCP报头中的标志位。 TCP 报头二图胜千言。 对比上述二图，可以看到TCP报文中定义了8个标志位。分别为SYN,ACK,FIN,PSH,RST,URG,CWR,ECE，其中最为常用的是前六个标志位。通过对这些标志位置位，可以控制TCP连接的建立和释放。 标志位标志位的功能摘录如下： SYN: for SYNchronize; marks packets that are part of the new-connection handshake ACK: indicates that the header Acknowledgment field is valid; that is, all but the first packet FIN: for FINish; marks packets involved in the connection closing PSH: for PuSH; marks “non-full” packets that should be delivered promptly at the far end RST: for ReSeT; indicates various error conditions URG: for URGent; part of a now-seldom-used mechanism for high-priority data CWR and ECE: part of the Explicit Congestion Notification mechanism URG：此标志表示TCP包的紧急指针域（后面马上就要说到）有效，用来保证TCP连接不被中断，并且督促中间层设备要尽快处理这些数据； ACK：此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中；有两个取值：0和1，为1的时候表示应答域有效，反之为0； PSH：这个标志位表示Push操作。所谓Push操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队； RST：这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包； SYN：表示同步序号，用来建立连接。SYN标志位和ACK标志位搭配使用，当连接请求的时候，SYN=1，ACK=0；连接被响应的时候，SYN=1，ACK=1；这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有SYN的数据包，如果对方主机响应了一个数据包回来，就表明这台主机存在这个端口；但是由于这种扫描方式只是进行TCP三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行TCP的三次握手； FIN： 表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。 TCP过程结合下图来理解TCP连接的建立与释放和标志位的关系。 Wireshark抓包我们可以利用Wireshark抓包工具来对上述过程进行抓包。Wireshar本身不支持loopback address（即127.0.0.1）进行抓包测试，但是可以下载一个插件实现该功能：Npcap。 在本地建立一个socket 链接，详情可参考该博文。 打开wireshark，选择npcap虚拟网卡，开始抓包，并在filter中过滤TCP端口。 三次握手建立连接。SYN表示开始建立连接，PSH表示该包中有数据。 同时在wireshark的中间窗口中可以更清楚的看到标志位的置位情况。 四次挥手释放连接。FIN表示开始释放连接。client端发送带FIN标志的数据包，server端收到后给一个ACK确认包。然后server端确认自己也没有数据要发送，也给一个FIN包，最后client端回复ACK包，至此连接被释放。 netstat命令行工具在windows下，系统提供了一个netstat工具来查看连接的状态。 netstat -na | find &quot;55554&quot; 参考链接 TCP Transport TCP\IP三次握手连接，四次握手断开分析]]></content>
      <categories>
        <category>learning</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TCP中的三次握手和四次挥手]]></title>
    <url>%2F2018%2F03%2F05%2FTCP%E4%B8%AD%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%2F</url>
    <content type="text"><![CDATA[TCP(Transmission Control Protocol)是一种面向连接的可靠的传输协议。TCP连接的建立和释放过程可由下图表示： 那么问题来了： 为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？ 这是因为服务端的 LISTEN 状态下的 SOCKET 当收到 SYN 报文的建立连接请求后，它可以把 ACK 和 SYN （ ACK 起应答作用，而 SYN 起同步作用）放在一个报文里来发送。TCP是全双工通信，关闭连接时，当收到对方的 FIN 报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你可以未必会马上会关闭 SOCKET, 也即你可能还需要发送一些数据给对方之后，再发送 FIN 报文给对方来表示你同意现在可以关闭连接了，所以它这里的 ACK 报文和 FIN报文多数情况下都是分开发送的。 为什么 TIME_WAIT 状态还需要等 2MSL 后才能返回到 CLOSED 状态？ 这是因为虽然双方都同意关闭连接了，而且握手的 4 个报文也都协调和发送完毕，按理可以直接回到 CLOSED 状态（就好比从 SYN_SEND 状态到 ESTABLISH 状态那样）；但是因为我们必须要假想网络是不可靠的，你无法保证你最后发送的 ACK 报文会一定被对方收到，因此对方处于 LAST_ACK 状态下的 SOCKET 可能会因为超时未收到 ACK 报文，而重发 FIN 报文，所以这个 TIME_WAIT 状态的作用就是用来重发可能丢失的 ACK 报文。 本文摘录自 此]]></content>
      <categories>
        <category>learning</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c#：关于socket.Receive是否阻塞的问题]]></title>
    <url>%2F2018%2F03%2F05%2Fc-%EF%BC%9A%E5%85%B3%E4%BA%8Esocket-Receive%E6%98%AF%E5%90%A6%E9%98%BB%E5%A1%9E%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[最近socket调查一个bug的时候，发现一个“问题”。在c#中调用socket.Receive(buff)的时候，并没有阻塞当前线程，而是直接返回。 查看MSDN： The Receive method reads data into the buffer parameter and returns the number of bytes successfully read. You can call Receive from both connection-oriented and connectionless sockets. This overload only requires you to provide a receive buffer. The buffer offset defaults to 0, the size defaults to the length of the buffer parameter, and the SocketFlags value defaults to None. If you are using a connection-oriented protocol, you must either call Connect to establish a remote host connection, or Accept to accept an incoming connection prior to calling Receive. The Receive method will only read data that arrives from the remote host established in the Connect or Acceptmethod. If you are using a connectionless protocol, you can also use the ReceiveFrom method. ReceiveFrom will allow you to receive data arriving from any host. If no data is available for reading, the Receive method will block until data is available, unless a time-out value was set by using Socket.ReceiveTimeout. If the time-out value was exceeded, the Receive call will throw a SocketException. If you are in non-blocking mode, and there is no data available in the in the protocol stack buffer, the Receive method will complete immediately and throw a SocketException. You can use the Available property to determine if data is available for reading. When Available is non-zero, retry the receive operation. If you are using a connection-oriented Socket, the Receive method will read as much data as is available, up to the size of the buffer. If the remote host shuts down the Socket connection with the Shutdown method, and all available data has been received, the Receive method will complete immediately and return zero bytes. If you are using a connectionless Socket, Receive will read the first queued datagram from the destination address you specify in the Connectmethod. If the datagram you receive is larger than the size of the buffer parameter, buffer gets filled with the first part of the message, the excess data is lost and a SocketException is thrown. 加粗位置：当使用面向连接的socket（比如使用TCP协议），socket.Receive(buff)方法会获取尽可能多的数据来填充buff。但是如果remote端(可以是client，也可以是server)调用shutdown，而且所有的数据都收到了，则再次调用socket.Receive(buff)会立即返回。]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>socket</tag>
        <tag>c#</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Socket通信浅析]]></title>
    <url>%2F2018%2F03%2F05%2FSocket%E9%80%9A%E4%BF%A1%E6%B5%85%E6%9E%90%2F</url>
    <content type="text"><![CDATA[定义Socket通信是计算机网络中一种重要的数据交换的方式。维基百科对socket定义如下： 在操作系统中，通常会为应用程序提供一组应用程序接口（API），称为套接字接口（英语：socket API）。应用程序可以通过套接字接口，来使用网络套接字，以进行数据交换。最早的套接字接口来自于4.2 BSD，因此现代常见的套接字接口大多源自Berkeley套接字（Berkeley sockets）标准。在套接字接口中，以IP地址及通信端口组成套接字地址（socket address）。远程的套接字地址，以及本地的套接字地址完成连接后，再加上使用的协议（protocol），这个五元组（five-element tuple)，作为套接字对（socket pairs），之后就可以彼此交换数据。例如，在同一台计算机上，TCP协议与UDP协议可以同时使用相同的port而互不干扰。 操作系统根据套接字地址，可以决定应该将数据送达特定的进程或线程。 Socket本身并不是通信协议，只是定义的一个调用接口(API)，我们可以通过socket来使用TCP/UDP协议。socket只是对TCP等协议的抽象，方便应用层调用底层的通信协议。如下图： Socket 原语所谓的原语(primitive)是指定义的一些基本操作，跟具体的实现无关。TCP协议中socket定义的原语如下图： 其中包含两个方面，server side和client side。 Server side: Server startup executes SOCKET, BIND, LISTEN. LISTEN - allocate queue for multiple simultaneous clients. ACCEPT - suspend server until request. When client request arrives: ACCEPT returns.Start new socket (thread or process) with same properties as original, this handles the request,server goes on waiting on original socket.If new request arrives while spawning thread for this one, it is queued.If queue full it is refused. ​ Client side: SOCKET to create. Then CONNECT. When this returns the socket is open. Both sides can now SEND, RECEIVE. Connection not released until both sides do CLOSE. Typically client does it, server acks. 用下图来表示： 示例下面通过一个简单的示例，来展示c#中的socket编程的API，实现socket 多client连接。 server端代码：在while循环中接受client的连接，accept之后另起一个线程来handle这个request，并通过检查socket的状态来判断连接是否是active。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475static void Run() &#123; IPEndPoint server = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 55554); Socket listener = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); listener.Bind(server); listener.Listen(10); while (true) &#123; Log("waiting for connection..."); Socket handler = listener.Accept(); Log("connection established."); try &#123; Thread thread = new Thread(new ParameterizedThreadStart(HandleSocket)); thread.Start(handler); &#125; catch (Exception e) &#123; Console.WriteLine(e.Message); &#125; &#125; &#125;static void HandleSocket(object socket) &#123; var handler = socket as Socket; byte[] data = new byte[1024]; try &#123; bool connected = SocketConnected(handler); while (connected) &#123; var cnt = 0; var recvStr = string.Empty; cnt = handler.Receive(data, SocketFlags.None); recvStr = Encoding.Default.GetString(data, 0, cnt); if (recvStr.IndexOf("\n") &gt; 0) &#123; //response Log("\n " + DateTime.Now.ToString() + " received cmd: " + recvStr); Log("send ok back.\n"); byte[] sendStr = Encoding.Default.GetBytes("ok\n"); handler.Send(sendStr); &#125; /* if (recvStr.IndexOf("&lt;EOF&gt;") &gt;= 0) &#123; break; &#125; * */ connected = SocketConnected(handler); &#125; Log("close socket..."); handler.Shutdown(SocketShutdown.Both); handler.Close(); &#125; catch (Exception ex) &#123; if (handler != null) &#123; handler.Shutdown(SocketShutdown.Both); handler.Close(); &#125; Log(ex.Message); &#125; &#125; client端代码：通过connect来建立连接，建立成功之后，即可发送数据，收发多次数据之后，将连接关闭。 1234567891011121314151617181920212223242526272829303132333435363738394041static void Communicate() &#123; Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); byte[] buffer = new byte[1024]; IPEndPoint endpoint = new IPEndPoint(IPAddress.Parse("127.0.0.1"), 55554); string recv = string.Empty; try &#123; socket.Connect(endpoint); byte[] data = Encoding.Default.GetBytes("connect\n"); for (int i = 0; i &lt; 10; i++) &#123; socket.Send(data); Console.WriteLine("&#123;0&#125; send: connect\n", DateTime.Now.ToString()); var cnt = socket.Receive(buffer); recv = Encoding.Default.GetString(buffer, 0, cnt); Console.WriteLine("&#123;0&#125; received: &#123;1&#125;", DateTime.Now.ToString(), recv); if (!recv.Contains("ok")) &#123; Console.WriteLine("not ok!\n"); break; &#125; &#125; //byte[] end = Encoding.Default.GetBytes("&lt;EOF&gt;"); //socket.Send(end); //socket.Disconnect(false); socket.Shutdown(SocketShutdown.Both); socket.Close(); &#125; catch (Exception ex) &#123; Console.WriteLine(ex); &#125; 注意点： 在csharp中，socket等资源属于非托管资源，使用完毕之后，必须释放（client和server分别close），否则会导致内存泄漏。 server端close的释放时机一般是client端这边close之后，server也没有数据发送给client端。可以有以下方法来判断建立的连接是否已经close了： 通过client端发送定义好的字符，如&lt;EOF&gt;，当server端收到预定义好的字符串，则断开与client的连接并回收资源。 通过Socket.Poll方法。该方法可以用来判断socket的连接状态。MSDN文档如下： 1234public bool Poll( int microSeconds, SelectMode mode) Poll will block execution until the specified time period, measured in microseconds, elapses. Set the microSeconds parameter to a negative integer if you would like to wait indefinitely for a response. The Poll method will check the state of the Socket. Specify SelectMode.SelectRead for the selectMode parameter to determine if the Socket is readable. Specify SelectMode.SelectWrite to determine if the Socket is writable. Use SelectMode.SelectError to detect an error condition. TCP 浅析占位下篇博客链接占位。 参考链接 socket 原语 即时通讯系列之Socket简介 MSDN Socket.Poll Method 网络套接字 维基 Instantly detect client disconnection from server socket Socket Programming in C/C++]]></content>
      <categories>
        <category>learning</category>
      </categories>
      <tags>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WPF自定义控件和依赖项属性浅析]]></title>
    <url>%2F2018%2F02%2F28%2FWPF-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%92%8C%E4%BE%9D%E8%B5%96%E9%A1%B9%E5%B1%9E%E6%80%A7%E6%B5%85%E6%9E%90%2F</url>
    <content type="text"><![CDATA[前言依赖项属性是WPF引入的一个新特性，它扩展了普通的CLR属性。同时依赖项属性有以下优点：减少内存占用，值继承，自动通知等。 依赖项属性与普通CLR属性区别和优点它与CLR属性的区别是： CLR属性是类中的一个成员，可以直接读取，而依赖项属性要通过GetValue() 方法动态取得 当你设置CLR属性时，CLR属性存储在对象的field中。依赖项属性必须声明为public static readonly，存储在基类DependencyObject中的Dictionary中。 依赖项属性带来的好处如下： 减少内存占用 It’s a huge dissipation to store a field for each property when you think that over 90% of the properties of a UI control typically stay at its initial values. Dependency properties solve these problems by only store modified properties in the instance. The default values are stored once within the dependency property. 值继承 When you access a dependency property the value is resolved by using a value resolution strategy. If no local value is set, the dependency property navigates up the logical tree until it finds a value. When you set the FontSize on the root element it applies to all textblocks below except you override the value. 变化通知 Dependency properties have a built-in change notification mechanism. By registering a callback in the property metadata you get notified, when the value of the property has been changed. This is also used by the databinding. 下面编写一个自定义控件，并给自定义控件加入几个依赖项属性。 例子在接下来的例子中，我们将自定义一个ChkButton控件，该控件左边是一个TextBlock，右边是一个Checkbox。并且定义两个依赖项属性：IsChecked，ChkVisibility。 创建自定义控件(Custom Control)。 创建成功后会在工程目录下多了一个theme的文件夹，同时在该文件夹内有Generic.xaml。该xaml是一个ResourceDictionary，在AssemblyInfo文件中会加载该xaml资源。 在Generic.xaml中，我们可以定义该Custom Control的ControlTemplate。 1234567891011121314151617181920212223242526272829303132333435&lt;Style TargetType="&#123;x:Type local:ChkButton&#125;"&gt; &lt;Setter Property="Template"&gt; &lt;Setter.Value&gt; &lt;ControlTemplate TargetType="&#123;x:Type local:ChkButton&#125;"&gt; &lt;Border Background="&#123;TemplateBinding Background&#125;" BorderBrush="&#123;TemplateBinding BorderBrush&#125;" BorderThickness="&#123;TemplateBinding BorderThickness&#125;"&gt; &lt;Grid&gt; &lt;Grid.ColumnDefinitions&gt; &lt;ColumnDefinition Width="*" /&gt; &lt;ColumnDefinition Width="auto" /&gt; &lt;/Grid.ColumnDefinitions&gt; &lt;TextBlock Name="PART_txt" Margin="3,3" HorizontalAlignment="Right" VerticalAlignment="Center" Text="&#123;TemplateBinding Content&#125;" /&gt; &lt;CheckBox Name="PART_chk" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" IsChecked="&#123;Binding RelativeSource=&#123;RelativeSource TemplatedParent&#125;, Path=IsChecked, Mode=TwoWay&#125;" Visibility="Collapsed" /&gt; &lt;/Grid&gt; &lt;/Border&gt; &lt;/ControlTemplate&gt; &lt;/Setter.Value&gt; &lt;/Setter&gt; &lt;/Style&gt; ​ 先在该xaml中引入namespace，如xmlns:local=&quot;clr-namespace:ButtonTest1&quot; 该ControlTemplate中的Checkbox的IsChecked属性双向绑定与ChkButton的自定义的IsChecked依赖项属性，从而将内部的checkbox的checked属性开放出来。 注意，在这里在IsChecked进行Binding时没有使用TemplateBinding，即没有使用下面的写法： 1IsChecked=&quot;&#123;TemplateBinding IsChecked&#125;&quot; 因为TemplateBind只支持单向绑定，而我们要实现双向绑定，只能通过Binding表达式。参见stackoverflow的这个问题。 定义ChkButton的依赖项属性：IsChecked, ChkVisibility。 1234567891011121314151617181920212223242526272829303132public static readonly DependencyProperty IsCheckedProperty = DependencyProperty.Register("IsChecked", typeof(Boolean), typeof(ChkButton)); public bool IsChecked &#123; get &#123; return (bool)GetValue(IsCheckedProperty); &#125; set &#123; SetValue(IsCheckedProperty, value); &#125; &#125; public static readonly DependencyProperty ChkVisibilityProperty = DependencyProperty.Register("ChkVisibility", typeof(Visibility), typeof(ChkButton), new PropertyMetadata(Visibility.Collapsed, new PropertyChangedCallback((obj, args) =&gt; &#123; var btn = (ChkButton)obj; btn.ApplyTemplate(); var textblock = (TextBlock)btn.GetTemplateChild("PART_txt"); var checkbox = (CheckBox)btn.GetTemplateChild("PART_chk"); checkbox.Visibility = (Visibility)args.NewValue; if (checkbox.Visibility == Visibility.Visible) &#123; textblock.HorizontalAlignment = HorizontalAlignment.Right; &#125; else &#123; textblock.HorizontalAlignment = HorizontalAlignment.Center; &#125; &#125;))); public Visibility ChkVisibility &#123; get &#123; return (Visibility)GetValue(ChkVisibilityProperty); &#125; set &#123; SetValue(ChkVisibilityProperty, value); &#125; &#125; 在ControlTemplate中给每一个Part定义一个名称，这样可以使用GetTemplateChild方法来获取到引用，注意在调用之前，必须先调用控件的ApplyTemplate方法。 我们希望在点击ChkButton的TextBlock部分时，响应Button的Click事件，在点击Checkbox部分时，不触发Click事件。但是由于WPF中event的冒泡特性，也会传递到ChkButton。我们可以在ChkButton的构造函数设置为该事件已处理。 1234567891011public ChkButton() &#123; this.Click += (sender, args) =&gt; &#123; if (args.OriginalSource is CheckBox) &#123; args.Handled = true; return; &#125; &#125;; &#125; ChkButton已经创建好了。在xaml中可以使用。 123456789101112&lt;local:ChkButton x:Name="chkbtn1" Width="100" Height="100" Margin="5" Background="LightBlue" ChkVisibility="Collapsed" Click="ChkButton_Click" Content="another text" IsChecked="False" /&gt; &lt;TextBlock Margin="5" Text="&#123;Binding ElementName=chkbtn1, Path=IsChecked&#125;" /&gt; 改善使用BooleanToVisibilityConverter在上面的代码中，是通过创建一个ChkVisibility的依赖属性来控制是否显示Checkbox的，在PropertyChangedCallback中通过代码来控制Checkbox是否显示。其实我们可以直接通过绑定来实现这个功能。为了更直接的实现这个功能，我们使用一个ValueConvertor来将bool类型转化为Visibility类型。在framework中有一个现成的类：BooleanToVisibilityConverter。将其加入到对应的Style的Resource中。 123456789101112131415&lt;Style TargetType=&quot;&#123;x:Type local:ChkButton&#125;&quot;&gt;&lt;Style.Resources&gt; &lt;BooleanToVisibilityConverter x:Key=&quot;boolToVi&quot; /&gt;&lt;/Style.Resources&gt; ... &lt;CheckBox x:Name=&quot;PART_chk&quot; Grid.Column=&quot;1&quot; VerticalAlignment=&quot;Center&quot; Visibility=&quot;&#123;TemplateBinding ShowCheckbox, Converter=&#123;StaticResource boolToVi&#125;&#125;&quot; IsChecked=&quot;&#123;Binding RelativeSource=&#123;RelativeSource TemplatedParent&#125;, Mode=TwoWay, Path=IsChecked&#125;&quot;/&gt; &lt;/Style&gt; 增加一个ShowCheckBox依赖属性： 12345678public static DependencyProperty ShowCheckboxProperty = DependencyProperty.Register( "ShowCheckbox", typeof(bool), typeof(CustomControl1), new FrameworkPropertyMetadata(true)); public bool ShowCheckbox &#123; get &#123; return (bool)GetValue(ShowCheckboxProperty); &#125; set &#123; SetValue(ShowCheckboxProperty, value); &#125; &#125; 使用TempatePartAttribute在建立CustomControl时，经常会使用TemplatePart特性来标识类。这可以算是一种design pattern。 Control authors apply this attribute to the class definition to inform template authors the types of the parts to use for styling the class. These parts are usually required in the template and have a specific predefined name. There can only be one element with a given name in any template. 在上述的ChkButton中定义了两个PART: PART_btn, PART_chk。按照惯例，part name一般使用PART_开头，并并使用const string保存在类中。 123456789101112131415161718192021222324252627282930313233343536373839404142[TemplatePart(Name=PART_BTN, Type=typeof(Button))][TemplatePart(Name=PART_CHK, Type=typeof(CheckBox))]public class ChkButton : Control &#123; private const string PART_BTN = "PART_btn"; private const string PART_CHK = "PART_chk"; static CustomControl1() &#123; DefaultStyleKeyProperty.OverrideMetadata(typeof(ChkButton), new FrameworkPropertyMetadata(typeof(ChkButton))); &#125; private Button _btnPart; private CheckBox _chkPart; public override void OnApplyTemplate() &#123; base.OnApplyTemplate(); //alway detach event handlers first if (_btnPart != null) &#123; _btnPart.Click -= OnButtonClick; &#125; _btnPart = GetTemplateChild(PART_BTN) as Button; _chkPart = GetTemplateChild(PART_CHK) as CheckBox; //alway check _btnPart/_chkPart is null or not if (_btnPart != null) &#123; _btnPart.Click += OnButtonClick; &#125; if (_chkPart != null) &#123; //do something here &#125; &#125; ... &#125; 如果在类中要访问PART，则定义private 变量将PART 保存起来，同时重写OnApplayTemplate方法。同时在使用PART的时候需要判断是否为null，因为每次在给control ApplyTemplate的时候OnApplayTemplate会调用一次。同时注意先注销可能已经绑定的事件。 参考链接 https://wpftutorial.net/DependencyProperties.html https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/dependency-properties-overview https://www.jeff.wilcox.name/2010/04/template-part-tips/ 系列文章 https://www.kunal-chowdhury.com/2011/04/how-to-create-custom-control-in.html https://www.kunal-chowdhury.com/2011/04/how-to-design-custom-control-by-editing.html https://www.kunal-chowdhury.com/2011/04/how-to-implement-template-binding-in.html https://www.codeproject.com/articles/179105/how-to-access-control-template-parts-from-code-beh]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>WPF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客迁移记录]]></title>
    <url>%2F2018%2F02%2F26%2F%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[这几天将博客的主题换成了next。本来使用的是yilia主题，后来发现渲染有序列表会出现换行的问题，同时yilia已经放弃维护了，next主题也很不错，果断换之。使用hexo框架换个主题简直不要太简单，就不多说了。本文是简单记录下博客迁移的过程。 关于如何使用hexo和github pages来搭建博客，网络上有很多教程。我主要是参考 此博文 。这篇博文详细记录了如何建立，部署，同时如何进行博客迁移。摘录部分内容如下： 4.2 我的博客搭建流程 创建仓库，CrazyMilk.github.io； 创建两个分支：master 与 hexo； 设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）； 使用git clone git@github.com:CrazyMilk/CrazyMilk.github.io.git拷贝仓库； 在本地CrazyMilk.github.io文件夹下通过Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）; 修改_config.yml中的deploy参数，分支应为master； 依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件； 执行hexo generate -d生成网站并部署到GitHub上。 这样一来，在GitHub上的CrazyMilk.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！ 4.3 我的博客管理流程4.3.1 日常修改在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理： 依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）； 然后才执行hexo generate -d发布网站到master分支上。 虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。 4.3.2 本地资料丢失当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤： 使用git clone git@github.com:CrazyMilk/CrazyMilk.github.io.git拷贝仓库（默认分支为hexo）； 在本地新拷贝的CrazyMilk.github.io文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。 这样一来，hexo分支用于存放markdown等原文件，master分支用来存放生成之后的html等静态页面，可以方便的进行博客迁移和管理。]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>博客</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何删除github敏感文件]]></title>
    <url>%2F2018%2F02%2F24%2F%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4github%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[前言由于当初建立博客的失误，我将一些不可名状的东西上传到了github中，今天才发现，吓的我赶紧找方法如何删除。google了一番之后终于找到了一个repo-cleaner工具：BFG。 下面就简单记录下如何删除已经commit到服务器上的文件，同时删除commit记录。 步骤 在你的local working directory中将你要删除的文件删除，正常commit并push到remote，因为BFG工具会使用最新的一次commit。 The BFG treats you like a reformed alcoholic: you’ve made some mistakes in the past, but now you’ve cleaned up your act. Thus the BFG assumes that your latest commit is a good one, with none of the dirty files you want removing from your history still in it. This assumption by the BFG protects your work, and gives you peace of mind knowing that the BFG is only changing your repo history, not meddling with the current files of your project. 下载BFG工具jar包，链接 。（当然要先装java runtime）:) 下载git repo的bare repository：git clone --mirror git://example.com/some-repo.git bare repository并不能看到实际的repo文件，但是却包含了repo的全部数据。下载完之后，最好备份一下。 在目录下执行：java -jar bfg.jar --delete-files filename some-repo.git。 后面这个参数为刚刚下载到本地的repo目录，不是完整的git地址。 filename为要删除的文件，注意，该操作会将根目录下及根目录下的子目录的相同filename的文件都删除 如果想删除多个文件，filename参数可以写成{file1,file2}。 进入到刚下好的repo目录中，执行： git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive 将修改的repo push到remote：git push。 push成功之后查看remote中是否文件已删除，并且与该文件相关的commit的历史记录也删除了。 参考链接 bfg-repo-cleaner Removing sensitive data from a repository 下篇博客预告，总结下博客迁移的步骤吧，今天又踩了以前踩过的坑:)]]></content>
      <categories>
        <category>tutorial</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>bfg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[onion architecture]]></title>
    <url>%2F2018%2F02%2F24%2Fonion-architecture%2F</url>
    <content type="text"><![CDATA[传统的三层架构中数据位于最核心的地方，而洋葱模型将一些UI，DB这些最可能经常要变化的东西放在外圈，同时外圈的layer依赖于里圈的东西。 传统的三层架构一层只能调用下一层，不能跨层调用，比如UI只能调用Business Logic 层. 洋葱架构外圈的层可以调用内圈的层 洋葱架构要点 The application is built around an independent object model Inner layers define interfaces. Outer layers implement interfaces Direction of coupling is toward the center All application core code can be compiled and run separate from infrastructure 本文摘录地址]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>architecture</tag>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[blog plan]]></title>
    <url>%2F2018%2F02%2F23%2Fblog-plan%2F</url>
    <content type="text"><![CDATA[最近打算将onenote上的一些笔记，整理整理上传到博客中，正好熟悉熟悉下markdown的语法。打算一周两篇的量吧。]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2018-new-year]]></title>
    <url>%2F2018%2F02%2F23%2F2018-new-year%2F</url>
    <content type="text"><![CDATA[2018年上班第一天。 前些日子一直想做点开年计划，今天趁着不那么忙，把这些计划记录到自己的博客中。希望自己在这一年中能坚持做下来。 跑步减肥，目标是73KG。前几天搬家，越来越意识到自己真实越来越胖了 把博客运行起来。想来这个博客搭建好之后都快一年了，内容还只有first-blog-test。。。 看书，专业书和自己买的两本社科书。关于要看的书，再写一遍博文描述一下。 开发一个能上线的小程序/app，或者有自己的一个开源项目。 攒钱去一趟香港旅游。 2018/2/23 于公司]]></content>
      <categories>
        <category>notes</category>
      </categories>
      <tags>
        <tag>plan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[blog migration test]]></title>
    <url>%2F2017%2F11%2F08%2Fblog-migration-test%2F</url>
    <content type="text"><![CDATA[由于换了新电脑，博客内容一直没有迁移过来。（其实一直在忙着玩塞尔达） 本帖是迁移测试。]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[image test]]></title>
    <url>%2F2017%2F06%2F10%2Fimage-test%2F</url>
    <content type="text"><![CDATA[Update 2018/11/09 由于最近七牛云测试域名回收，图片需要绑定自定义域名，外链才正常。参考绑定加速域名和域名解析流程已经绑定了本站点域名。 使用七牛云作为图床，使用七牛云的图片处理功能，可以对图片进行预处理，使用hexo-qiniu-sync插件可以在_config.yml文件中配置处理默认效果。比如 1?imageView2/0/w/800/q/75|watermark/2/text/YnlHZWVr/font/YXJpYWw=/fontsize/360/fill/I0ZGRkZGRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10|imageslim 控制图片width=800，等比缩放，加上bygeek水印等。只需在_config.yml文件中配置好默认效果之后，在markdown文件中使用一下标记语法即可对图片加上默认处理效果。 1&#123;% qnimg demo.jpg %&#125; 如果想显示原图效果，markdown中标记如下： 1&#123;% qnimg demo.jpg normal:yes %&#125; 效果即是原图效果，如下： Hexo-qiniu-sync插件自动扫描_config.yml配置的目录local_dir，在执行hexo s的时候会自动将local_dir目录下的资源上传同步到七牛云。然后在markdown中直接使用图片名称即可。 更多的图片预处理语法请参考七牛云图片处理。 关于Hexo-qiniu-sync的配置等请参考官方Github以及Hexo七牛插件安装与使用。]]></content>
  </entry>
  <entry>
    <title><![CDATA[my first blog]]></title>
    <url>%2F2017%2F05%2F31%2Fmy-first-blog%2F</url>
    <content type="text"><![CDATA[终于搞定了一些前几天困扰的问题了，一个是头像无法加载的问题，还有一个是点击所有文章提示模块缺失的问题。南京的夜晚，夏日炎炎，即使干坐了，也止不住的流汗。先占个坑，等有时间再详细说下问题怎么解决的吧。]]></content>
      <categories>
        <category>notes</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[my fisrt post]]></title>
    <url>%2F2017%2F05%2F26%2Fmy-fisrt-post%2F</url>
    <content type="text"><![CDATA[this is my first post using hexo]]></content>
  </entry>
</search>
